using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using System.Reflection;
using System;

namespace Game.Scripts.GamePlay
{
    public class Game_UI : MonoBehaviour
    {
        [SerializeField] private SimulationManager simulation_manager;

        [Header("Training Parameters UI")]
        private bool show_training_ui = true;
        private Rect training_ui_rect;
        private Rect speed_panel_rect;
        private Vector2 training_ui_scroll;
        private Dictionary<string, float> training_params = new Dictionary<string, float>();
        private Dictionary<string, string> training_inputs = new Dictionary<string, string>();
        
        [Header("UI Position and Size")]
        [SerializeField] private float ui_scale = 2f;
        [SerializeField] private float ui_width = 628.2f;
        [SerializeField] private float ui_height = 424.4f;
        [SerializeField] private float ui_right_margin = 63.2f;  // –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
        [SerializeField] private float ui_top_margin = 551.5f;    // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        
        [Header("Speed Panel Settings")]
        [SerializeField] private float speed_panel_width = 701.8f;
        [SerializeField] private float speed_panel_height = 84.7f;
        [SerializeField] private float speed_panel_top_margin = 459.3f;
        [SerializeField] private float speed_panel_right_margin = 22.5f;
        
        [Header("UI Element Settings")]
        [SerializeField] private float slider_height = 22.2f;
        [SerializeField] private float input_width = 93.2f;
        [SerializeField] private float param_spacing = 41.5f;
        [SerializeField] private float button_height = 40f;

        [Header("Font Sizes")]
        [SerializeField] private int window_title_font_size = 26;
        [SerializeField] private int header_font_size = 24;
        [SerializeField] private int param_label_font_size = 22;
        [SerializeField] private int input_font_size = 22;
        [SerializeField] private int start_button_font_size = 28;
        [SerializeField] private int speed_button_font_size = 24;

        [Header("Speed Buttons")]
        [SerializeField] private float speed_button_height = 45f;
        [SerializeField] private float speed_button_spacing = 10f;

        // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
        private bool training_started = false;
        private float current_speed = 1f;
        private readonly float[] available_speeds = { 1f, 2f, 5f, 10f };

        // UI Styles
        private GUIStyle window_style;
        private GUIStyle label_style;
        private GUIStyle input_style;
        private GUIStyle button_style;
        private GUIStyle speed_button_style;

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        private readonly Dictionary<string, string> parameter_names = new Dictionary<string, string>()
        {
            {"Activity_reward", "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"},
            {"Target_reward", "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ü–µ–ª—å"},
            {"Collision_penalty", "–®—Ç—Ä–∞—Ñ –∑–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ"},
            {"Target_tracking_reward", "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å–ª–µ–∂–µ–Ω–∏–µ"},
            {"Speed_change_reward", "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏"},
            {"Rotation_change_reward", "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–≤–æ—Ä–æ—Ç—ã"},
            {"Time_bonus_multiplier", "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –±–æ–Ω—É—Å–∞ –≤—Ä–µ–º–µ–Ω–∏"}
        };

        private Texture2D lineTex;

        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        private string error_message = "";
        private bool show_error = false;
        private float error_time = 0f;

        // –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞
        private bool show_reset_dialog = false;
        
        // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∏)
        private int current_generation = 1;
        private float generation_timer = 0f;
        private float current_fps = 60f;
        private int current_agents_count = 10;
        private float best_distance_ever = 100f;
        private float best_distance_current = 50f;
        private float avg_distance_last_gen = 25f;
        private int total_successes_ever = 5;
        private int successes_last_gen = 1;
        private bool is_validation_round = false;
        private bool game_won = false;
        private float current_mutation_rate = 0.1f;
        private List<int> success_history = new List<int> { 0, 1, 0, 2, 1, 3, 2, 1 };
        private int max_success_count = 5;
        private int[] neural_layers = new int[] { 12, 16, 12, 8, 2 };

        void Start()
        {
            if (simulation_manager == null)
            {
                simulation_manager = FindObjectOfType<SimulationManager>();
                if (simulation_manager == null)
                {
                    Debug.LogError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω SimulationManager! UI –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.");
                    enabled = false;
                    return;
                }
            }

            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–±–Ω—É–ª—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Neuro –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä–æ–º
            ForceNullifyAllNeuralParameters();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è
            InitTrainingUI();

            // –°—Ç–∞–≤–∏–º –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É –¥–æ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
            Time.timeScale = 0f;
            training_started = false;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –ø–æ–∫–æ–ª–µ–Ω–∏—è
            StartCoroutine(SimulationTimerCoroutine());
        }
        
        // –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
        private IEnumerator SimulationTimerCoroutine()
        {
            while (true)
            {
                if (training_started)
                {
                    generation_timer += Time.deltaTime;
                    
                    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ FPS
                    current_fps = Mathf.Clamp(current_fps + UnityEngine.Random.Range(-5f, 5f), 30f, 120f);
                    
                    // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
                    if (generation_timer > 30f)
                    {
                        generation_timer = 0f;
                        current_generation++;
                        successes_last_gen = UnityEngine.Random.Range(0, 5);
                        total_successes_ever += successes_last_gen;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —É—Å–ø–µ—Ö–æ–≤
                        if (success_history.Count > 20)
                        {
                            success_history.RemoveAt(0);
                        }
                        success_history.Add(successes_last_gen);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º —É—Å–ø–µ—Ö–æ–≤
                        if (successes_last_gen > max_success_count)
                        {
                            max_success_count = successes_last_gen;
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        best_distance_current = UnityEngine.Random.Range(10f, 200f);
                        avg_distance_last_gen = best_distance_current * 0.7f;
                        
                        // –ò–Ω–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥
                        if (UnityEngine.Random.value > 0.7f)
                        {
                            best_distance_ever = best_distance_current;
                        }
                        
                        // –ö–∞–∂–¥—ã–µ 10 –ø–æ–∫–æ–ª–µ–Ω–∏–π –¥–µ–ª–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞—É–Ω–¥
                        is_validation_round = (current_generation % 10 == 0);
                        
                        // –ü–æ—Å–ª–µ 50-–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –º–æ–∂–µ–º –æ–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥—É
                        if (current_generation > 50 && UnityEngine.Random.value > 0.9f)
                        {
                            game_won = true;
                        }
                        
                        Debug.Log($"üìä –ü–æ–∫–æ–ª–µ–Ω–∏–µ {current_generation} –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—Ö–æ–≤: {successes_last_gen}");
                    }
                }
                yield return new WaitForSeconds(0.5f);
            }
        }

        void OnGUI()
        {
            if (simulation_manager == null) return;

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            DisplayStats();
            
            // –†–∏—Å—É–µ–º UI –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è
            DrawTrainingUI();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (show_error && Time.realtimeSinceStartup < error_time)
            {
                DrawErrorMessage();
            }
        }

        void DrawTrainingUI()
        {
            if (!show_training_ui) return;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã UI –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (Event.current.type == EventType.Layout)
            {
                UpdateUIRect();
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–± UI
            GUI.matrix = Matrix4x4.TRS(Vector3.zero, Quaternion.identity, new Vector3(ui_scale, ui_scale, 1));
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
            if (label_style == null)
            {
                window_style = new GUIStyle(GUI.skin.window);
                window_style.fontSize = window_title_font_size;
                window_style.normal.textColor = Color.white;
                
                label_style = new GUIStyle(GUI.skin.label);
                label_style.fontSize = param_label_font_size;
                label_style.normal.textColor = Color.white;
                label_style.alignment = TextAnchor.MiddleLeft;
                
                input_style = new GUIStyle(GUI.skin.textField);
                input_style.fontSize = input_font_size;
                input_style.alignment = TextAnchor.MiddleCenter;
                input_style.normal.textColor = Color.white;
                
                button_style = new GUIStyle(GUI.skin.button);
                button_style.fontSize = start_button_font_size;
                button_style.fontStyle = FontStyle.Bold;
                button_style.normal.textColor = Color.white;

                speed_button_style = new GUIStyle(GUI.skin.button);
                speed_button_style.fontSize = speed_button_font_size;
                speed_button_style.fontStyle = FontStyle.Bold;
                speed_button_style.normal.textColor = Color.white;
                speed_button_style.padding = new RectOffset(8, 8, 8, 8);
            }
            
            // –†–∏—Å—É–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç—å—é
            DrawSpeedPanel();
            
            // –†–∏—Å—É–µ–º –æ–∫–Ω–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            GUI.Box(training_ui_rect, "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è", window_style);
            
            // –ù–∞—á–∏–Ω–∞–µ–º —Å–∫—Ä–æ–ª–ª –æ–±–ª–∞—Å—Ç—å
            float scroll_y = training_ui_rect.y + (30f / ui_scale);
            float scroll_height = training_ui_rect.height - (40f / ui_scale);
            
            training_ui_scroll = GUI.BeginScrollView(
                new Rect(training_ui_rect.x, scroll_y, training_ui_rect.width, scroll_height),
                training_ui_scroll,
                new Rect(0, 0, training_ui_rect.width - (25f / ui_scale),
                        ((slider_height * 2 + param_spacing) * training_params.Count) / ui_scale)
            );
            
            float y_pos = 0f;
            
            // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            foreach (var param in training_params.Keys.ToList())
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                string russian_name = parameter_names[param];
                
                // –†–∏—Å—É–µ–º –ª–µ–π–±–ª
                GUI.Label(new Rect(10f / ui_scale, y_pos, 
                                 (ui_width - input_width - 30f) / ui_scale, 
                                 slider_height / ui_scale), 
                         russian_name, label_style);
                
                // –†–∏—Å—É–µ–º —Å–ª–∞–π–¥–µ—Ä
                float new_value = GUI.HorizontalSlider(
                    new Rect(10f / ui_scale, y_pos + slider_height / ui_scale, 
                            (ui_width - input_width - 30f) / ui_scale, 
                            slider_height / ui_scale),
                    training_params[param],
                    0f,
                    100f
                );
                
                // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —á–µ—Ä–µ–∑ —Å–ª–∞–π–¥–µ—Ä
                if (new_value != training_params[param])
                {
                    training_params[param] = new_value;
                    training_inputs[param] = new_value.ToString("F1");
                    UpdateTrainingParameter(param, new_value);
                }
                
                // –†–∏—Å—É–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å —Ç—ë–º–Ω—ã–º —Ñ–æ–Ω–æ–º
                GUI.backgroundColor = new Color(0.2f, 0.2f, 0.2f);
                string new_input = GUI.TextField(
                    new Rect((ui_width - input_width - 10f) / ui_scale, 
                            y_pos + (5f / ui_scale), 
                            input_width / ui_scale, 
                            (slider_height - 5f) / ui_scale),
                    training_inputs[param],
                    input_style
                );
                GUI.backgroundColor = Color.white;
                
                // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —á–µ—Ä–µ–∑ –≤–≤–æ–¥
                if (new_input != training_inputs[param])
                {
                    training_inputs[param] = new_input;
                    if (float.TryParse(new_input, out float parsed_value))
                    {
                        training_params[param] = Mathf.Clamp(parsed_value, 0f, 100f);
                        UpdateTrainingParameter(param, parsed_value);
                    }
                }
                
                y_pos += (slider_height * 2 + param_spacing) / ui_scale;
            }
            
            GUI.EndScrollView();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± UI –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            GUI.matrix = Matrix4x4.identity;
        }

        private void DrawSpeedPanel()
        {
            GUI.Box(speed_panel_rect, "–°–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏", window_style);

            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            float total_width = speed_panel_rect.width - (2 * speed_button_spacing);
            float speed_section_width = total_width * 0.5f; // 50% –ø–æ–¥ –∫–Ω–æ–ø–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
            float control_section_width = total_width * 0.5f;  // 50% –ø–æ–¥ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 
            float control_button_width = (control_section_width - (2 * speed_button_spacing)) / 3; // –î–µ–ª–∏–º –Ω–∞ 3 –∫–Ω–æ–ø–∫–∏

            float button_width = (speed_section_width - ((available_speeds.Length + 1) * speed_button_spacing)) / available_speeds.Length;
            float button_x = speed_panel_rect.x + speed_button_spacing;
            float button_y = speed_panel_rect.y + (20f / ui_scale);

            // –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
            for (int i = 0; i < available_speeds.Length; i++)
            {
                float speed = available_speeds[i];
                bool is_current = Mathf.Approximately(current_speed, speed);

                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
                if (is_current)
                {
                    GUI.backgroundColor = new Color(0.2f, 0.6f, 1f);
                }
                else
                {
                    GUI.backgroundColor = new Color(0.3f, 0.3f, 0.3f);
                }

                string speed_text = speed == 1f ? "1√ó" : $"{speed:F0}√ó";
                if (GUI.Button(new Rect(button_x, button_y, button_width, speed_button_height / ui_scale),
                              speed_text, speed_button_style))
                {
                    current_speed = speed;
                    Time.timeScale = training_started ? speed : 0f;
                    Debug.Log($"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {speed}√ó");
                }

                button_x += button_width + speed_button_spacing;
            }

            // –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            float control_x = speed_panel_rect.x + speed_section_width + (2 * speed_button_spacing);
            
            // –ö–Ω–æ–ø–∫–∞ –°–¢–ê–†–¢/–ü–ê–£–ó–ê
            if (!training_started)
            {
                GUI.backgroundColor = new Color(0.2f, 0.8f, 0.2f); // –ó–µ–ª—ë–Ω—ã–π –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
                if (GUI.Button(new Rect(control_x, button_y, 
                                      control_button_width, 
                                      speed_button_height / ui_scale),
                             "–°–¢–ê–†–¢", button_style))
                {
                    training_started = true;
                    Time.timeScale = current_speed;
                    // –í–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ simulation_manager.StartTraining() –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
                    Debug.Log($"üöÄ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ! –°–∫–æ—Ä–æ—Å—Ç—å: {current_speed}√ó");
                }
            }
            else
            {
                GUI.backgroundColor = new Color(0.8f, 0.8f, 0.2f); // –ñ—ë–ª—Ç—ã–π –¥–ª—è –ø–∞—É–∑—ã
                if (GUI.Button(new Rect(control_x, button_y,
                                      control_button_width,
                                      speed_button_height / ui_scale),
                             "–ü–ê–£–ó–ê", button_style))
                {
                    training_started = false;
                    Time.timeScale = 0f;
                    // –í–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ simulation_manager.PauseTraining() –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –ø–∞—É–∑—É
                    Debug.Log("‚è∏Ô∏è –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑–µ");
                }
            }

            // –ö–Ω–æ–ø–∫–∞ "–ù–£–õ–ò" –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            control_x += control_button_width + speed_button_spacing;
            GUI.backgroundColor = new Color(0.7f, 0.3f, 0.9f); // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (GUI.Button(new Rect(control_x, button_y,
                                  control_button_width,
                                  speed_button_height / ui_scale),
                         "–ù–£–õ–ò", button_style))
            {
                ResetAllParametersToZero();
            }

            // –ö–Ω–æ–ø–∫–∞ –°–ë–†–û–°
            control_x += control_button_width + speed_button_spacing;
            GUI.backgroundColor = new Color(0.8f, 0.2f, 0.2f); // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–±—Ä–æ—Å–∞
            if (GUI.Button(new Rect(control_x, button_y,
                                  control_button_width - speed_button_spacing,
                                  speed_button_height / ui_scale),
                         "–°–ë–†–û–°", button_style))
            {
                // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                show_reset_dialog = true;
            }

            // –†–∏—Å—É–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (show_reset_dialog)
            {
                DrawResetDialog();
            }

            GUI.backgroundColor = Color.white;
        }

        private void DrawResetDialog()
        {
            // –ó–∞—Ç–µ–º–Ω—è–µ–º —Ñ–æ–Ω
            GUI.color = new Color(0, 0, 0, 0.8f);
            GUI.DrawTexture(new Rect(0, 0, Screen.width, Screen.height), Texture2D.whiteTexture);
            GUI.color = Color.white;

            // –†–∏—Å—É–µ–º –æ–∫–Ω–æ –¥–∏–∞–ª–æ–≥–∞
            float dialog_width = 400f;
            float dialog_height = 150f;
            float dialog_x = (Screen.width - dialog_width) / 2;
            float dialog_y = (Screen.height - dialog_height) / 2;

            GUI.Box(new Rect(dialog_x, dialog_y, dialog_width, dialog_height), "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞");

            // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            GUI.Label(new Rect(dialog_x + 20, dialog_y + 40, dialog_width - 40, 40),
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë –æ–±—É—á–µ–Ω–∏–µ?\n" +
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –Ω–∞—á–Ω—ë—Ç –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.");

            // –ö–Ω–æ–ø–∫–∏
            if (GUI.Button(new Rect(dialog_x + 20, dialog_y + dialog_height - 40, 180, 30), "–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë"))
            {
                show_reset_dialog = false;
                
                // –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–±—Ä–æ—Å–∞, —Ç–∞–∫ –∫–∞–∫ ResetTraining –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                ResetTrainingLocal();
                
                training_started = false;
                Time.timeScale = 0f;
            }

            if (GUI.Button(new Rect(dialog_x + dialog_width - 200, dialog_y + dialog_height - 40, 180, 30), "–û—Ç–º–µ–Ω–∞"))
            {
                show_reset_dialog = false;
            }
        }

        // –†–µ–∞–ª–∏–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –º–µ—Ç–æ–¥–∞ —Å–±—Ä–æ—Å–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        private void ResetTrainingLocal()
        {
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            Debug.Log("üîÑ –°–±—Ä–æ—Å –æ–±—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω –∏–∑ Game_UI");
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
            UnityEngine.SceneManagement.SceneManager.LoadScene(
                UnityEngine.SceneManagement.SceneManager.GetActiveScene().name
            );
        }

        private void DrawErrorMessage()
        {
            float dialog_width = 400f;
            float dialog_height = 100f;
            float dialog_x = (Screen.width - dialog_width) / 2;
            float dialog_y = (Screen.height - dialog_height) / 2;

            // –†–∏—Å—É–µ–º –∫—Ä–∞—Å–Ω–æ–µ –æ–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π
            GUI.backgroundColor = new Color(0.8f, 0.2f, 0.2f);
            GUI.Box(new Rect(dialog_x, dialog_y, dialog_width, dialog_height), "–û—à–∏–±–∫–∞");
            GUI.backgroundColor = Color.white;

            // –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            GUI.Label(new Rect(dialog_x + 20, dialog_y + 30, dialog_width - 40, dialog_height - 40),
                error_message);
        }

        public void ShowError(string message, float duration = 5f)
        {
            error_message = message;
            show_error = true;
            error_time = Time.realtimeSinceStartup + duration;
        }

        void UpdateTrainingParameter(string param_name, float value)
        {
            try
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                Debug.Log($"üìä –ò–∑–º–µ–Ω–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä {param_name}: {value}");
                
                // 1. –ò—â–µ–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –í–°–ï–ú–ò –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                var agents = GameObject.FindGameObjectsWithTag("Agent");
                if (agents.Length == 0)
                {
                    // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–µ–≥—É, –∏—â–µ–º –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É Neuro
                    agents = FindObjectsOfType<Neuro>().Select(n => n.gameObject).ToArray();
                }
                
                // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∞–≥–µ–Ω—Ç–∞–º
                foreach (var agent in agents)
                {
                    var neuro = agent.GetComponent<Neuro>();
                    if (neuro != null)
                    {
                        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ –ø–æ –∏–º–µ–Ω–∏
                        // –ü—Ä–∏–≤–æ–¥–∏–º –∏–º—è –∫ —Ñ–æ—Ä–º–∞—Ç—É –ø–æ–ª—è (camelCase)
                        string fieldName = param_name.ToLower();
                        var field = neuro.GetType().GetField(fieldName);
                        
                        if (field != null)
                        {
                            field.SetValue(neuro, value);
                            Debug.Log($"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ {fieldName}={value} –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent.name}");
                        }
                        else
                        {
                            // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª–µ –ø–æ –∏–º–µ–Ω–∏ –Ω–∞–ø—Ä—è–º—É—é, –ø—Ä–æ–±—É–µ–º –≤—Å–µ –ø–æ–ª—è
                            var allFields = neuro.GetType().GetFields(BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic);
                            foreach (var f in allFields)
                            {
                                if (f.Name.ToLower().Contains(param_name.ToLower()) || 
                                    param_name.ToLower().Contains(f.Name.ToLower()))
                                {
                                    f.SetValue(neuro, value);
                                    Debug.Log($"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Ö–æ–∂–µ–µ –ø–æ–ª–µ {f.Name}={value} –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent.name}");
                                    break;
                                }
                            }
                        }
                    }
                }
                
                // 3. –ï—Å–ª–∏ simulation_manager —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —á–µ—Ä–µ–∑ –Ω–µ–≥–æ
                if (simulation_manager != null)
                {
                    var targetField = simulation_manager.GetType().GetField(param_name.ToLower());
                    if (targetField != null)
                    {
                        targetField.SetValue(simulation_manager, value);
                        Debug.Log($"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä {param_name}={value} –≤ SimulationManager");
                    }
                }
                
                // 4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏—è UI –∏ –∞–≥–µ–Ω—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ —Å–æ–≤–ø–∞–¥–∞–ª–∏)
                training_params[param_name] = value;
                training_inputs[param_name] = value.ToString("F1");
            }
            catch (Exception e)
            {
                Debug.LogError($"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param_name}: {e.Message}");
            }
        }

        // –ß–∏—Å—Ç–∏–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
        void OnDestroy()
        {
            if (lineTex != null)
            {
                Destroy(lineTex);
            }
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–æ–≤ SimulationManager
        private void DisplayStats()
        {
            int padding = 10;
            int width = 300;
            int height = 25;
            
            GUI.skin.label.fontSize = 16;
            GUI.skin.label.normal.textColor = Color.white;
            
            // Create background box for stats
            GUI.Box(new Rect(padding, padding, width + padding * 2, 460), ""); 
            
            // Display statistics
            int y = padding * 2;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏
            GUI.contentColor = Color.yellow;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                "üÜï Using New Network (No Save)");
            y += height + 5;
            GUI.contentColor = Color.white;

            // –û—Å—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Generation: {current_generation}");
            
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Time: {generation_timer:F1}s");
            
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"FPS: {current_fps:F1}");
            
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Agents: {current_agents_count}");

            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"TimeScale: {Time.timeScale}x");
                
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Best Distance Ever: {best_distance_ever:F2}m");
                
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Best Distance Current: {best_distance_current:F2}m");
                
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Avg Distance Last Gen: {avg_distance_last_gen:F2}m");
                
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Total Successes Ever: {total_successes_ever}");
                
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Successes Last Gen: {successes_last_gen}");

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É –æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            y += height + 10; 
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"üß† Neural Network Info:");
                
            y += height;
            string layers_str = string.Join(" ‚Üí ", neural_layers);
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Structure: {layers_str}");
                
            y += height;
            // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            int total_params = CalculateTotalParameters();
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Total Parameters: {total_params:N0}");
                
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Mutation Rate: {(current_mutation_rate * 100):F1}%");

            // Draw success history graph
            DrawSuccessGraph();

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–∞—É–Ω–¥–µ –∏ –ø–æ–±–µ–¥–µ
            if (is_validation_round)
            {
                GUI.color = Color.yellow;
                GUI.Label(new Rect(padding * 2, y, width, height), 
                    "üéØ VALIDATION ROUND");
                y += height;
            }
            
            if (game_won)
            {
                GUI.color = Color.green;
                GUI.Label(new Rect(padding * 2, y, width, height), 
                    "üèÜ VICTORY! Training Complete!");
                y += height;
            }
            
            GUI.color = Color.white;
        }

        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è CalculateTotalParameters
        private int CalculateTotalParameters()
        {
            // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            int total = 0;
            for (int i = 0; i < neural_layers.Length - 1; i++)
            {
                // –í–µ—Å–∞ + —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è
                total += (neural_layers[i] * neural_layers[i + 1]) + neural_layers[i + 1];
            }
            return total;
        }

        void DrawSuccessGraph()
        {
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —Å –æ—Ç—Å—Ç—É–ø–æ–º 10 –ø–∏–∫—Å–µ–ª–µ–π
            float graphX = Screen.width - 300 - 10;
            float graphY = 10; // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
            float graph_width = 300;
            float graph_height = 150;

            // Draw graph background
            GUI.color = new Color(0, 0, 0, 0.5f);
            GUI.Box(new Rect(graphX, graphY, graph_width, graph_height), "");
            GUI.color = Color.white;

            // Draw graph title
            GUI.Label(new Rect(graphX, graphY - 20, graph_width, 20), 
                $"Success History (Max: {max_success_count})");

            // –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –ª–∏–Ω–∏–π
            if (lineTex == null)
            {
                lineTex = new Texture2D(1, 1);
                lineTex.SetPixel(0, 0, Color.white);
                lineTex.Apply();
            }

            // Draw coordinate system
            DrawLine(new Vector2(graphX, graphY + graph_height),
                    new Vector2(graphX, graphY),
                    Color.gray); // Y axis
                    
            DrawLine(new Vector2(graphX, graphY + graph_height),
                    new Vector2(graphX + graph_width, graphY + graph_height),
                    Color.gray); // X axis

            // Draw grid lines
            Color gridColor = new Color(0.5f, 0.5f, 0.5f, 0.2f);
            int gridLines = 5;
            for (int i = 1; i < gridLines; i++)
            {
                float y = graphY + (i * graph_height / gridLines);
                DrawLine(new Vector2(graphX, y),
                        new Vector2(graphX + graph_width, y),
                        gridColor);
                
                float x = graphX + (i * graph_width / gridLines);
                DrawLine(new Vector2(x, graphY),
                        new Vector2(x, graphY + graph_height),
                        gridColor);
                
                // Draw Y axis labels
                int value = (gridLines - i) * max_success_count / gridLines;
                GUI.Label(new Rect(graphX - 30, y - 10, 25, 20), value.ToString());
            }

            // Draw graph
            if (success_history != null && success_history.Count > 1)
            {
                int max_history_points = 30;
                for (int i = 0; i < success_history.Count - 1; i++)
                {
                    float x1 = graphX + (i * graph_width / (max_history_points - 1));
                    float x2 = graphX + ((i + 1) * graph_width / (max_history_points - 1));
                    
                    float y1 = graphY + graph_height - 
                               (success_history[i] * graph_height / Mathf.Max(1, max_success_count));
                    float y2 = graphY + graph_height - 
                               (success_history[i + 1] * graph_height / Mathf.Max(1, max_success_count));
                    
                    DrawLine(new Vector2(x1, y1), new Vector2(x2, y2), Color.green);
                }
            }
        }

        private void DrawLine(Vector2 pointA, Vector2 pointB, Color color)
        {
            if (lineTex == null)
            {
                lineTex = new Texture2D(1, 1);
                lineTex.SetPixel(0, 0, Color.white);
                lineTex.Apply();
            }

            Matrix4x4 matrix = GUI.matrix;
            Color savedColor = GUI.color;
            GUI.color = color;

            float angle = Vector3.Angle(pointB - pointA, Vector2.right);
            if (pointA.y > pointB.y) angle = -angle;

            GUIUtility.RotateAroundPivot(angle, pointA);
            float width = (pointB - pointA).magnitude;
            GUI.DrawTexture(new Rect(pointA.x, pointA.y, width, 1), lineTex);
            GUI.matrix = matrix;
            GUI.color = savedColor;
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–∏ UI
        private void UpdateUIRect()
        {
            float scaled_width = ui_width / ui_scale;
            float scaled_height = ui_height / ui_scale;
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ–∫–Ω–æ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞
            float x = (Screen.width / ui_scale) - scaled_width - (ui_right_margin / ui_scale);
            float y = ui_top_margin / ui_scale;
            
            training_ui_rect = new Rect(x, y, scaled_width, scaled_height);

            // –ü–∞–Ω–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–≤–µ—Ä—Ö—É
            float speed_panel_scaled_width = speed_panel_width / ui_scale;
            float speed_panel_scaled_height = speed_panel_height / ui_scale;
            float speed_panel_x = (Screen.width / ui_scale) - speed_panel_scaled_width - (speed_panel_right_margin / ui_scale);
            float speed_panel_y = speed_panel_top_margin / ui_scale;
            
            speed_panel_rect = new Rect(speed_panel_x, speed_panel_y, speed_panel_scaled_width, speed_panel_scaled_height);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è –≤ UI
        void InitTrainingUI()
        {
            if (simulation_manager == null) return;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
            training_params.Clear();
            training_inputs.Clear();
            
            // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ù–£–õ–Ø–ú–ò —á—Ç–æ–±—ã —Ñ–∏—Ç–Ω–µ—Å –±—ã–ª –Ω—É–ª–µ–≤–æ–π
            training_params["Activity_reward"] = 0.0f;
            training_params["Target_reward"] = 0.0f;
            training_params["Collision_penalty"] = 0.0f;
            training_params["Target_tracking_reward"] = 0.0f;
            training_params["Speed_change_reward"] = 0.0f;
            training_params["Rotation_change_reward"] = 0.0f;
            training_params["Time_bonus_multiplier"] = 0.0f;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π
            foreach (var param in training_params.Keys.ToList())
            {
                training_inputs[param] = training_params[param].ToString("F1");
                
                // –í–ê–ñ–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ –∞–≥–µ–Ω—Ç–∞–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!
                UpdateTrainingParameter(param, training_params[param]);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é UI
            UpdateUIRect();
            
            Debug.Log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω UI –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏");
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –Ω–æ–ª—å
        private void ResetAllParametersToZero()
        {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            training_started = false;
            Time.timeScale = 0f;
            
            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö –≤ –Ω–æ–ª—å
            foreach (var param in training_params.Keys.ToList())
            {
                UpdateTrainingParameter(param, 0.0f);
            }
            
            Debug.Log("üßπ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –≤ –Ω–æ–ª—å!");
            ShowError("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –≤ –Ω–æ–ª—å!", 3f);
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Neuro –≤ –Ω–æ–ª—å (–º–∏–Ω—É—è UI –∏ —Å–ª–æ–≤–∞—Ä–∏)
        private void ForceNullifyAllNeuralParameters()
        {
            Debug.Log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è...");
            
            // 1. –ò—â–µ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            var agents = GameObject.FindGameObjectsWithTag("Agent");
            if (agents.Length == 0)
            {
                agents = FindObjectsOfType<Neuro>().Select(n => n.gameObject).ToArray();
            }
            
            if (agents.Length == 0)
            {
                Debug.LogWarning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!");
                return;
            }
            
            // 2. –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π Neuro
            var firstNeuro = agents[0].GetComponent<Neuro>();
            if (firstNeuro == null)
            {
                Debug.LogWarning("‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç Neuro –Ω–µ –Ω–∞–π–¥–µ–Ω —É –ø–µ—Ä–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞!");
                return;
            }
            
            // 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–≥—Ä–∞–¥/—à—Ç—Ä–∞—Ñ–æ–≤
            var rewardFields = firstNeuro.GetType().GetFields(BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic)
                .Where(f => f.FieldType == typeof(float) && 
                       (f.Name.ToLower().Contains("reward") || 
                        f.Name.ToLower().Contains("penalty") || 
                        f.Name.ToLower().Contains("bonus") ||
                        f.Name.ToLower().Contains("multiplier")))
                .ToList();
            
            // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —ç—Ç–∏ –ø–æ–ª—è –≤ –Ω–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
            foreach (var agent in agents)
            {
                var neuro = agent.GetComponent<Neuro>();
                if (neuro != null)
                {
                    foreach (var field in rewardFields)
                    {
                        field.SetValue(neuro, 0.0f);
                        Debug.Log($"üßπ –û–±–Ω—É–ª–µ–Ω–æ –ø–æ–ª–µ {field.Name} –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent.name}");
                    }
                }
            }
            
            // 5. –ï—Å–ª–∏ –µ—Å—Ç—å SimulationManager, –æ–±–Ω—É–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ç–∞–º
            if (simulation_manager != null)
            {
                var managerFields = simulation_manager.GetType().GetFields(BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic)
                    .Where(f => f.FieldType == typeof(float) && 
                           (f.Name.ToLower().Contains("reward") || 
                            f.Name.ToLower().Contains("penalty") || 
                            f.Name.ToLower().Contains("bonus") ||
                            f.Name.ToLower().Contains("multiplier")))
                    .ToList();
                
                foreach (var field in managerFields)
                {
                    field.SetValue(simulation_manager, 0.0f);
                    Debug.Log($"üßπ –û–±–Ω—É–ª–µ–Ω–æ –ø–æ–ª–µ {field.Name} –≤ SimulationManager");
                }
            }
            
            Debug.Log("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
        }
    }
}
