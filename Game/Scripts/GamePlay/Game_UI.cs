using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.Linq;
using System.Reflection;
using System;

namespace Game.Scripts.GamePlay
{
    public class Game_UI : MonoBehaviour
    {
        [SerializeField] private SimulationManager simulation_manager;

        [Header("Training Parameters UI")]
        private bool show_training_ui = true;
        private Rect training_ui_rect;
        private Rect speed_panel_rect;
        private Vector2 training_ui_scroll;
        private Dictionary<string, float> training_params = new Dictionary<string, float>();
        private Dictionary<string, string> training_inputs = new Dictionary<string, string>();
        
        [Header("UI Position and Size")]
        [SerializeField] private float ui_scale = 2f;
        [SerializeField] private float ui_width = 628.2f;
        [SerializeField] private float ui_height = 424.4f;
        [SerializeField] private float ui_right_margin = 63.2f;  // –û—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
        [SerializeField] private float ui_top_margin = 551.5f;    // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        
        [Header("Speed Panel Settings")]
        [SerializeField] private float speed_panel_width = 701.8f;
        [SerializeField] private float speed_panel_height = 84.7f;
        [SerializeField] private float speed_panel_top_margin = 459.3f;
        [SerializeField] private float speed_panel_right_margin = 22.5f;
        
        [Header("UI Element Settings")]
        [SerializeField] private float slider_height = 22.2f;
        [SerializeField] private float input_width = 93.2f;
        [SerializeField] private float param_spacing = 41.5f;
        [SerializeField] private float button_height = 40f;

        [Header("Font Sizes")]
        [SerializeField] private int window_title_font_size = 26;
        [SerializeField] private int header_font_size = 24;
        [SerializeField] private int param_label_font_size = 22;
        [SerializeField] private int input_font_size = 22;
        [SerializeField] private int start_button_font_size = 28;
        [SerializeField] private int speed_button_font_size = 24;

        [Header("Speed Buttons")]
        [SerializeField] private float speed_button_height = 45f;
        [SerializeField] private float speed_button_spacing = 10f;

        // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI
        private bool training_started = false;
        private float current_speed = 1f;
        private readonly float[] available_speeds = { 1f, 2f, 5f, 10f };

        // UI Styles
        private GUIStyle window_style;
        private GUIStyle label_style;
        private GUIStyle input_style;
        private GUIStyle button_style;
        private GUIStyle speed_button_style;

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        private readonly Dictionary<string, string> parameter_names = new Dictionary<string, string>()
        {
            {"Activity_reward", "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"},
            {"Target_reward", "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ü–µ–ª—å"},
            {"Collision_penalty", "–®—Ç—Ä–∞—Ñ –∑–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ"},
            {"Target_tracking_reward", "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Å–ª–µ–∂–µ–Ω–∏–µ"},
            {"Speed_change_reward", "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏"},
            {"Rotation_change_reward", "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø–æ–≤–æ—Ä–æ—Ç—ã"},
            {"Time_bonus_multiplier", "–ú–Ω–æ–∂–∏—Ç–µ–ª—å –±–æ–Ω—É—Å–∞ –≤—Ä–µ–º–µ–Ω–∏"}
        };

        private Texture2D lineTex;

        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫
        private string error_message = "";
        private bool show_error = false;
        private float error_time = 0f;

        // –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞
        private bool show_reset_dialog = false;

        // –¢–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∏)
        private int current_generation = 1;
        private float generation_timer = 0f;
        private float current_fps = 60f;
        private int current_agents_count = 10;
        private float best_distance_ever = 100f;
        private float best_distance_current = 50f;
        private float avg_distance_last_gen = 25f;
        private int total_successes_ever = 5;
        private int successes_last_gen = 1;
        private bool is_validation_round = false;
        private bool game_won = false;
        private float current_mutation_rate = 0.1f;
        private List<int> success_history = new List<int> { 0, 1, 0, 2, 1, 3, 2, 1 };
        private int max_success_count = 5;
        private int[] neural_layers = new int[] { 12, 16, 12, 8, 2 };

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
        private int lastKnownGeneration = 0;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑ –ª—é–±–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
        public static class GlobalTrainingParams
        {
            public static float ActivityReward = 0f;
            public static float TargetReward = 0f;
            public static float CollisionPenalty = 0f;
            public static float TargetTrackingReward = 0f;
            public static float SpeedChangeReward = 0f;
            public static float RotationChangeReward = 0f;
            public static float TimeBonusMultiplier = 0f;
            
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            public static void UpdateParams(
                float activity,
                float target,
                float collision,
                float tracking,
                float speed,
                float rotation,
                float time)
            {
                ActivityReward = activity;
                TargetReward = target;
                CollisionPenalty = collision;
                TargetTrackingReward = tracking;
                SpeedChangeReward = speed;
                RotationChangeReward = rotation;
                TimeBonusMultiplier = time;
                
                Debug.Log($"üìä –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –û–ë–ù–û–í–õ–ï–ù–´: act={activity}, tar={target}, col={collision}, " +
                          $"track={tracking}, speed={speed}, rot={rotation}, time={time}");
            }
        }

        void Start()
        {
            if (simulation_manager == null)
            {
                simulation_manager = FindObjectOfType<SimulationManager>();
                if (simulation_manager == null)
                {
                    Debug.LogError("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω SimulationManager! UI –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.");
                    enabled = false;
                    return;
                }
            }
            
            // –ü–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π UI, –æ–±–Ω—É–ª—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤
            ForceNullifyAllNeuralParameters();

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è
            InitTrainingUI();
            
            // –ó–ê–ü–£–°–ö–ê–ï–ú –ï–ë–ò–ß–ï–°–ö–£–Æ –ö–û–†–£–¢–ò–ù–£ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –í–°–ï–• –ê–ì–ï–ù–¢–û–í, –í–ö–õ–Æ–ß–ê–Ø –ù–ï–ê–ö–¢–ò–í–ù–´–•!
            StartCoroutine(ContinuousAgentMonitoringCoroutine());
            
            // –í–ú–ï–°–¢–û –≠–¢–û–ì–û - –ò–ù–ñ–ï–ö–¢–ò–ú–°–Ø –í –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Æ –ê–ì–ï–ù–¢–û–í 
            InjectSpawnHook();
            
            // –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç –º–µ—Ö–∞–Ω–∏–∑–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏–π
            InjectGenerationChangeHook();
            
            // –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ–π —Ö—É–∫ –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã SimulationManager
            HookIntoSimulationManager();
            
            // –ù–û–í–û–ï: –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SimulationManager
            StartCoroutine(SimulationManagerMonitoring());

            // –°—Ç–∞–≤–∏–º –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É –¥–æ –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
            Time.timeScale = 0f;
            training_started = false;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –ø–æ–∫–æ–ª–µ–Ω–∏—è
            StartCoroutine(SimulationTimerCoroutine());
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫—É –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            ShowInstructionMessage();
        }

        // –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ SimulationManager
        private IEnumerator SimulationManagerMonitoring()
        {
            Debug.Log("üîÑ –ó–∞–ø—É—â–µ–Ω –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SimulationManager");
            
            while (true)
            {
                if (training_started)
                {
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ö—É–∫ –≤ SimulationManager
                    HookIntoSimulationManager();
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
                    ForceAggressiveParameterCheck();
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                yield return new WaitForSeconds(1.0f);
            }
        }
        
        // –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ö—É–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å —Å–ø–∞–≤–Ω–∞ –∞–≥–µ–Ω—Ç–æ–≤
        private void InjectSpawnHook()
        {
            Debug.LogWarning("üî• –ò–ù–ñ–ï–ö–¢–ò–ú–°–Ø –í –ú–ï–•–ê–ù–ò–ó–ú –°–û–ó–î–ê–ù–ò–Ø –ê–ì–ï–ù–¢–û–í!");
            
            try
            {
                // 1. –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –≤ SimulationManager
                var spawnMethods = simulation_manager.GetType().GetMethods(
                    BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)
                    .Where(m => 
                        m.Name.Contains("Create") || 
                        m.Name.Contains("Spawn") || 
                        m.Name.Contains("Instantiate") || 
                        m.Name.Contains("Generate"))
                    .ToList();
                    
                if (spawnMethods.Count > 0)
                {
                    Debug.LogWarning($"üëâ –ù–ê–ô–î–ï–ù–û {spawnMethods.Count} –º–µ—Ç–æ–¥–æ–≤, –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤!");
                    foreach (var method in spawnMethods)
                    {
                        Debug.Log($"üìù –í–æ–∑–º–æ–∂–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è: {method.Name}");
                    }
                }
                else
                {
                    Debug.LogError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤!");
                }
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Ç–æ–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è: {ex.Message}");
            }
            
            // 2. –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–≥–µ–Ω—Ç–æ–≤
            GameObject agentWatcher = new GameObject("AgentBirthWatcher");
            var watcher = agentWatcher.AddComponent<AgentBirthWatcher>();
            watcher.Initialize(this);
            DontDestroyOnLoad(agentWatcher);
            
            Debug.LogWarning("‚úÖ –£–°–¢–ê–ù–û–í–õ–ï–ù –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–¨ –ó–ê –°–û–ó–î–ê–ù–ò–ï–ú –ê–ì–ï–ù–¢–û–í!");
        }
        
        // –ö–ª–∞—Å—Å-–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–≥–µ–Ω—Ç–æ–≤
        public class AgentBirthWatcher : MonoBehaviour
        {
            private Game_UI parentUI;
            private HashSet<int> knownAgents = new HashSet<int>();
            private int totalProcessed = 0;
            private int lastAgentCount = 0;
            private float lastCheckTime = 0f;
            
            public void Initialize(Game_UI ui)
            {
                parentUI = ui;
                
                // –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
                var existingAgents = FindObjectsOfType<Neuro>();
                foreach (var agent in existingAgents)
                {
                    if (agent != null && agent.gameObject != null)
                    {
                        knownAgents.Add(agent.gameObject.GetInstanceID());
                        
                        // –°—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–≥–µ–Ω—Ç–∞–º
                        parentUI.InitializeAgentParams(agent);
                        totalProcessed++;
                    }
                }
                
                lastAgentCount = existingAgents.Length;
                lastCheckTime = Time.realtimeSinceStartup;
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∫–∞–¥—Ä–æ–≤–æ–π
                StartCoroutine(PeriodicAgentCheck());
                
                Debug.Log($"üîç –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–∞–π–¥–µ–Ω–æ {existingAgents.Length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤");
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ö–ê–ñ–î–´–ô –ö–ê–î–† –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            void Update()
            {
                // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º - –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä, –∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 100 –º—Å
                if (Time.realtimeSinceStartup - lastCheckTime < 0.1f)
                    return;
                    
                lastCheckTime = Time.realtimeSinceStartup;
                
                CheckForNewAgents();
            }
            
            // –í—ã–Ω–µ—Å–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            private void CheckForNewAgents()
            {
                var currentAgents = FindObjectsOfType<Neuro>();
                
                // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Å—Ä–∞–∑—É –ª–æ–≥–∏—Ä—É–µ–º
                if (currentAgents.Length != lastAgentCount)
                {
                    Debug.Log($"üëÅÔ∏è –î–ï–¢–ï–ö–¢–û–†: –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤! –ë—ã–ª–æ {lastAgentCount}, —Å—Ç–∞–ª–æ {currentAgents.Length}");
                    lastAgentCount = currentAgents.Length;
                }
                
                // –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã, –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                int newAgentsFound = 0;
                
                foreach (var agent in currentAgents)
                {
                    if (agent == null || agent.gameObject == null) continue;
                    
                    int id = agent.gameObject.GetInstanceID();
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∞–≥–µ–Ω—Ç
                    if (!knownAgents.Contains(id))
                    {
                        newAgentsFound++;
                        Debug.LogWarning($"üë∂ –û–ë–ù–ê–†–£–ñ–ï–ù –ù–û–í–´–ô –ê–ì–ï–ù–¢: {agent.gameObject.name} - –°–†–ê–ó–£ –°–¢–ê–í–ò–ú –ü–ê–†–ê–ú–ï–¢–†–´!");
                        
                        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ GUI
                        parentUI.InitializeAgentParams(agent);
                        
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏
                        parentUI.ApplyCurrentGUIParamsToAgent(agent);
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
                        knownAgents.Add(id);
                        totalProcessed++;
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤, –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if (newAgentsFound > 2)
                {
                    Debug.Log($"üî• –ù–ê–ô–î–ï–ù–û –°–†–ê–ó–£ {newAgentsFound} –ù–û–í–´–• –ê–ì–ï–ù–¢–û–í! –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {totalProcessed}");
                    
                    // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ - –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ –≤—Å–µ–º
                    if (newAgentsFound > 5 && parentUI != null)
                    {
                        parentUI.EMERGENCY_ApplyAllParameters();
                    }
                }
            }
            
            // –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            private IEnumerator PeriodicAgentCheck()
            {
                while (true)
                {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                    yield return new WaitForSeconds(0.5f);
                    
                    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
                    CheckForNewAgents();
                }
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ - –°–ê–ú–û–ï –ì–õ–ê–í–ù–û–ï
        public void InitializeAgentParams(Neuro agent)
        {
            if (agent == null)
            {
                Debug.LogError("ü§¨ –ê–≥–µ–Ω—Ç null –≤ InitializeAgentParams!");
                return;
            }

            try
            {
                Debug.Log($"üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞: {agent.gameObject.name}");
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ª–∞–π–¥–µ—Ä–æ–≤
                float activity = GetSliderValue("Activity_reward");
                float target = GetSliderValue("Target_reward");
                float collision = GetSliderValue("Collision_penalty");
                float tracking = GetSliderValue("Target_tracking_reward");
                float speed = GetSliderValue("Speed_change_reward");
                float rotation = GetSliderValue("Rotation_change_reward");
                float time = GetSliderValue("Time_bonus_multiplier");
                
                Debug.Log($"üìä –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ GUI: act={activity}, tar={target}, col={collision}, " +
                          $"track={tracking}, speed={speed}, rot={rotation}, time={time}");
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä—è–º—ã–º —Å–ø–æ—Å–æ–±–æ–º
                SetAgentRewards(agent, activity, target, collision, tracking, speed, rotation, time);
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Ñ–∏—Ç–Ω–µ—Å–∞
                ResetAllFitnessFields(agent);
                
                Debug.Log($"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è: {agent.gameObject.name}");
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"üí• –û—à–∏–±–∫–∞ –≤ InitializeAgentParams: {ex.Message}");
            }
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ–∏—Ç–Ω–µ—Å–æ–º –∏–ª–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏
        private void ResetAllFitnessFields(Neuro agent)
        {
            if (agent == null) return;
            
            try
            {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ê–ë–°–û–õ–Æ–¢–ù–û –≤—Å–µ –ø–æ–ª—è —Ñ–∏—Ç–Ω–µ—Å–∞ –∏ –≤—Å—è–∫–∏–µ –∫—ç—à–∏
                var fields = new[] 
                {
                    "fitness",
                    "best_fitness", 
                    "current_fitness",
                    "total_fitness",
                    "distance_to_target",
                    "last_distance",
                    "min_distance",
                    "has_reached_target",
                    "collision_count",
                    "reward_cache",
                    "total_reward",
                    "last_position",
                    "last_rotation",
                    "target_hit_time"
                };
                
                foreach (var fieldName in fields)
                {
                    try {
                        var field = agent.GetType().GetField(fieldName, 
                            System.Reflection.BindingFlags.Public | 
                            System.Reflection.BindingFlags.NonPublic | 
                            System.Reflection.BindingFlags.Instance);
                            
                        if (field != null)
                        {
                            if (field.FieldType == typeof(float))
                            {
                                field.SetValue(agent, 0f);
                            }
                            else if (field.FieldType == typeof(int))
                            {
                                field.SetValue(agent, 0);
                            }
                            else if (field.FieldType == typeof(bool))
                            {
                                field.SetValue(agent, false);
                            }
                            else if (field.FieldType == typeof(Vector3))
                            {
                                field.SetValue(agent, Vector3.zero);
                            }
                            else if (field.FieldType == typeof(Quaternion))
                            {
                                field.SetValue(agent, Quaternion.identity);
                            }
                            
                            // Debug.Log($"‚úì –°–±—Ä–æ—à–µ–Ω–æ –ø–æ–ª–µ {fieldName} –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent.gameObject.name}");
                        }
                    } catch { }
                }
            }
            catch (System.Exception ex)
            {
                Debug.LogWarning($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–∏—Ç–Ω–µ—Å–∞: {ex.Message}");
            }
        }

        // –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
        private IEnumerator SimulationTimerCoroutine()
        {
            while (true)
            {
                if (training_started)
                {
                    generation_timer += Time.deltaTime;
                    
                    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ FPS
                    current_fps = Mathf.Clamp(current_fps + UnityEngine.Random.Range(-5f, 5f), 30f, 120f);
                    
                    // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
                    if (generation_timer > 30f)
                    {
                        generation_timer = 0f;
                        current_generation++;
                        successes_last_gen = UnityEngine.Random.Range(0, 5);
                        total_successes_ever += successes_last_gen;
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —É—Å–ø–µ—Ö–æ–≤
                        if (success_history.Count > 20)
                        {
                            success_history.RemoveAt(0);
                        }
                        success_history.Add(successes_last_gen);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º —É—Å–ø–µ—Ö–æ–≤
                        if (successes_last_gen > max_success_count)
                        {
                            max_success_count = successes_last_gen;
                        }
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        best_distance_current = UnityEngine.Random.Range(10f, 200f);
                        avg_distance_last_gen = best_distance_current * 0.7f;
                        
                        // –ò–Ω–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∫–æ—Ä–¥
                        if (UnityEngine.Random.value > 0.7f)
                        {
                            best_distance_ever = best_distance_current;
                        }
                        
                        // –ö–∞–∂–¥—ã–µ 10 –ø–æ–∫–æ–ª–µ–Ω–∏–π –¥–µ–ª–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–∞—É–Ω–¥
                        is_validation_round = (current_generation % 10 == 0);
                        
                        // –ü–æ—Å–ª–µ 50-–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –º–æ–∂–µ–º –æ–±—ä—è–≤–∏—Ç—å –ø–æ–±–µ–¥—É
                        if (current_generation > 50 && UnityEngine.Random.value > 0.9f)
                        {
                            game_won = true;
                        }
                        
                        Debug.Log($"üìä –ü–æ–∫–æ–ª–µ–Ω–∏–µ {current_generation} –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –£—Å–ø–µ—Ö–æ–≤: {successes_last_gen}");
                    }
                }
                yield return new WaitForSeconds(0.5f);
            }
        }

        void OnGUI()
        {
            if (simulation_manager == null) return;

            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            DisplayStats();
            
            // –†–∏—Å—É–µ–º UI –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è
            DrawTrainingUI();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (show_error && Time.realtimeSinceStartup < error_time)
            {
                DrawInfoMessage();
            }
        }

        void DrawTrainingUI()
        {
            if (!show_training_ui) return;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã UI –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (Event.current.type == EventType.Layout)
            {
                UpdateUIRect();
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–± UI
            GUIUtility.ScaleAroundPivot(Vector2.one, new Vector2(Screen.width, Screen.height));
            
            // –†–∏—Å—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–Ω–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            GUI.Box(training_ui_rect, "", window_style);
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            Rect headerRect = new Rect(training_ui_rect.x + 20, training_ui_rect.y + 20, training_ui_rect.width - 40, 30);
            GUIStyle headerStyle = new GUIStyle(label_style);
            headerStyle.fontSize = header_font_size;
            headerStyle.alignment = TextAnchor.MiddleCenter;
            GUI.Label(headerRect, "–ü–ê–†–ê–ú–ï–¢–†–´ –û–ë–£–ß–ï–ù–ò–Ø", headerStyle);
            
            // –û–±–ª–∞—Å—Ç—å —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            Rect scrollViewRect = new Rect(training_ui_rect.x + 10, training_ui_rect.y + 60, 
                                        training_ui_rect.width - 20, training_ui_rect.height - 200);
            
            // –ù–∞—á–∞–ª–æ –æ–±–ª–∞—Å—Ç–∏ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            training_ui_scroll = GUI.BeginScrollView(scrollViewRect, training_ui_scroll, 
                                                    new Rect(0, 0, scrollViewRect.width - 30, 
                                                            parameter_names.Count * param_spacing + 20));
                                                    
            // –†–∏—Å—É–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            DrawRewardParameters();
            
            // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            GUI.EndScrollView();
            
            // –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞–ª–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—É—á–µ–Ω–∏—è
            Rect startButtonRect = new Rect(training_ui_rect.x + 20, training_ui_rect.y + training_ui_rect.height - 120, 
                                        training_ui_rect.width - 40, button_height);
            
            string buttonText = training_started ? "‚ñ† –û–°–¢–ê–ù–û–í–ò–¢–¨ –û–ë–£–ß–ï–ù–ò–ï" : "‚ñ∂ –ù–ê–ß–ê–¢–¨ –û–ë–£–ß–ï–ù–ò–ï";
            GUIStyle startButtonStyle = new GUIStyle(button_style);
            startButtonStyle.fontSize = start_button_font_size;
            startButtonStyle.normal.textColor = training_started ? Color.red : Color.green;
            
            if (GUI.Button(startButtonRect, buttonText, startButtonStyle))
            {
                ToggleTraining();
            }
            
            // –ö–ù–û–ü–ö–ê –≠–ö–°–¢–†–ï–ù–ù–û–ì–û –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í
            Rect emergencyButtonRect = new Rect(training_ui_rect.x + 20, training_ui_rect.y + training_ui_rect.height - 70, 
                                           training_ui_rect.width - 40, button_height);
            
            GUIStyle emergencyButtonStyle = new GUIStyle(button_style);
            emergencyButtonStyle.fontSize = 20;
            emergencyButtonStyle.normal.textColor = new Color(1f, 0.5f, 0f); // –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            
            if (GUI.Button(emergencyButtonRect, "üî• –ù–ê–°–ò–õ–¨–ù–û –ü–†–ò–ú–ï–ù–ò–¢–¨ –ü–ê–†–ê–ú–ï–¢–†–´", emergencyButtonStyle))
            {
                Debug.Log("üëä –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í!");
                EMERGENCY_ApplyAllParameters();
                ShowError("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º!", 2f);
            }
            
            // –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –æ–±—É—á–µ–Ω–∏—è
            if (training_started)
            {
                Rect resetButtonRect = new Rect(training_ui_rect.x + 20, training_ui_rect.y + training_ui_rect.height - 20, 
                                            training_ui_rect.width - 40, button_height - 20);
                
                GUIStyle resetButtonStyle = new GUIStyle(button_style);
                resetButtonStyle.fontSize = 18;
                resetButtonStyle.normal.textColor = Color.yellow;
                
                if (GUI.Button(resetButtonRect, "‚Ü∫ –°–±—Ä–æ—Å–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ", resetButtonStyle))
                {
                    show_reset_dialog = true;
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (show_reset_dialog)
            {
                DrawResetDialog();
            }
        }

        private void DrawSpeedPanel()
        {
            GUI.Box(speed_panel_rect, "–°–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏", window_style);

            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            float total_width = speed_panel_rect.width - (2 * speed_button_spacing);
            float speed_section_width = total_width * 0.5f; // 50% –ø–æ–¥ –∫–Ω–æ–ø–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
            float control_section_width = total_width * 0.5f;  // 50% –ø–æ–¥ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 
            float control_button_width = (control_section_width - (2 * speed_button_spacing)) / 3; // –î–µ–ª–∏–º –Ω–∞ 3 –∫–Ω–æ–ø–∫–∏

            float button_width = (speed_section_width - ((available_speeds.Length + 1) * speed_button_spacing)) / available_speeds.Length;
            float button_x = speed_panel_rect.x + speed_button_spacing;
            float button_y = speed_panel_rect.y + (20f / ui_scale);

            // –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
            for (int i = 0; i < available_speeds.Length; i++)
            {
                float speed = available_speeds[i];
                bool is_current = Mathf.Approximately(current_speed, speed);

                // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
                if (is_current)
                {
                    GUI.backgroundColor = new Color(0.2f, 0.6f, 1f);
                }
                else
                {
                    GUI.backgroundColor = new Color(0.3f, 0.3f, 0.3f);
                }

                string speed_text = speed == 1f ? "1√ó" : $"{speed:F0}√ó";
                if (GUI.Button(new Rect(button_x, button_y, button_width, speed_button_height / ui_scale),
                              speed_text, speed_button_style))
                {
                    current_speed = speed;
                    Time.timeScale = training_started ? speed : 0f;
                    Debug.Log($"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {speed}√ó");
                }

                button_x += button_width + speed_button_spacing;
            }

            // –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            float control_x = speed_panel_rect.x + speed_section_width + (2 * speed_button_spacing);
            
            // –ö–Ω–æ–ø–∫–∞ –°–¢–ê–†–¢/–ü–ê–£–ó–ê
            if (!training_started)
            {
                GUI.backgroundColor = new Color(0.2f, 0.8f, 0.2f); // –ó–µ–ª—ë–Ω—ã–π –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
                if (GUI.Button(new Rect(control_x, button_y, 
                                      control_button_width, 
                                      speed_button_height / ui_scale),
                             "–°–¢–ê–†–¢", button_style))
                {
                    training_started = true;
                    Time.timeScale = current_speed;
                    // –í–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ simulation_manager.StartTraining() –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
                    Debug.Log($"üöÄ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ! –°–∫–æ—Ä–æ—Å—Ç—å: {current_speed}√ó");
                }
            }
            else
            {
                GUI.backgroundColor = new Color(0.8f, 0.8f, 0.2f); // –ñ—ë–ª—Ç—ã–π –¥–ª—è –ø–∞—É–∑—ã
                if (GUI.Button(new Rect(control_x, button_y,
                                      control_button_width,
                                      speed_button_height / ui_scale),
                             "–ü–ê–£–ó–ê", button_style))
                {
                    training_started = false;
                    Time.timeScale = 0f;
                    // –í–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–∞ simulation_manager.PauseTraining() –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –ø–∞—É–∑—É
                    Debug.Log("‚è∏Ô∏è –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑–µ");
                }
            }

            // –ö–Ω–æ–ø–∫–∞ "–ù–£–õ–ò" –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            control_x += control_button_width + speed_button_spacing;
            GUI.backgroundColor = new Color(0.7f, 0.3f, 0.9f); // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if (GUI.Button(new Rect(control_x, button_y,
                                  control_button_width,
                                  speed_button_height / ui_scale),
                         "–ù–£–õ–ò", button_style))
            {
                // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–±—Ä–æ—Å
                ResetAllParametersToZero();
                
                // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
                EMERGENCY_NullifyAllAgents();
            }

            // –ö–Ω–æ–ø–∫–∞ –°–ë–†–û–°
            control_x += control_button_width + speed_button_spacing;
            GUI.backgroundColor = new Color(0.8f, 0.2f, 0.2f); // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è —Å–±—Ä–æ—Å–∞
            if (GUI.Button(new Rect(control_x, button_y,
                                  control_button_width - speed_button_spacing,
                                  speed_button_height / ui_scale),
                         "–°–ë–†–û–°", button_style))
            {
                // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                show_reset_dialog = true;
            }

            // –†–∏—Å—É–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (show_reset_dialog)
            {
                DrawResetDialog();
            }

            GUI.backgroundColor = Color.white;
        }

        private void DrawResetDialog()
        {
            // –ó–∞—Ç–µ–º–Ω—è–µ–º —Ñ–æ–Ω
            GUI.color = new Color(0, 0, 0, 0.8f);
            GUI.DrawTexture(new Rect(0, 0, Screen.width, Screen.height), Texture2D.whiteTexture);
            GUI.color = Color.white;

            // –†–∏—Å—É–µ–º –æ–∫–Ω–æ –¥–∏–∞–ª–æ–≥–∞
            float dialog_width = 400f;
            float dialog_height = 150f;
            float dialog_x = (Screen.width - dialog_width) / 2;
            float dialog_y = (Screen.height - dialog_height) / 2;

            GUI.Box(new Rect(dialog_x, dialog_y, dialog_width, dialog_height), "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞");

            // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            GUI.Label(new Rect(dialog_x + 20, dialog_y + 40, dialog_width - 40, 40),
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë –æ–±—É—á–µ–Ω–∏–µ?\n" +
                "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –Ω–∞—á–Ω—ë—Ç –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.");

            // –ö–Ω–æ–ø–∫–∏
            if (GUI.Button(new Rect(dialog_x + 20, dialog_y + dialog_height - 40, 180, 30), "–î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å—ë"))
            {
                show_reset_dialog = false;
                
                // –°–æ–∑–¥–∞–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–±—Ä–æ—Å–∞, —Ç–∞–∫ –∫–∞–∫ ResetTraining –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                ResetTrainingLocal();
                
                training_started = false;
                Time.timeScale = 0f;
            }

            if (GUI.Button(new Rect(dialog_x + dialog_width - 200, dialog_y + dialog_height - 40, 180, 30), "–û—Ç–º–µ–Ω–∞"))
            {
                show_reset_dialog = false;
            }
        }

        // –†–µ–∞–ª–∏–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –º–µ—Ç–æ–¥–∞ —Å–±—Ä–æ—Å–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        private void ResetTrainingLocal()
        {
            // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            Debug.Log("üîÑ –°–±—Ä–æ—Å –æ–±—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—à–µ–Ω –∏–∑ Game_UI");
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
            UnityEngine.SceneManagement.SceneManager.LoadScene(
                UnityEngine.SceneManagement.SceneManager.GetActiveScene().name
            );
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        private void DrawInfoMessage()
        {
            if (!show_error || Time.realtimeSinceStartup >= error_time) return;
            
            // –†–∏—Å—É–µ–º –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            GUI.color = new Color(0, 0, 0, 0.5f);
            GUI.DrawTexture(new Rect(0, 0, Screen.width, Screen.height), Texture2D.whiteTexture);
            GUI.color = Color.white;
            
            // –†–∏—Å—É–µ–º –æ–∫–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            float dialog_width = 500f;
            float dialog_height = 200f;
            float dialog_x = (Screen.width - dialog_width) / 2;
            float dialog_y = (Screen.height - dialog_height) / 2;

            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ñ–æ–Ω –æ–∫–Ω–∞
            GUI.backgroundColor = new Color(0.3f, 0.3f, 0.8f); // –°–∏–Ω–∏–π –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            GUI.Box(new Rect(dialog_x, dialog_y, dialog_width, dialog_height), "–í–ê–ñ–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø");
            GUI.backgroundColor = Color.white;

            // –°—Ç–∏–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            GUIStyle textStyle = new GUIStyle(GUI.skin.label);
            textStyle.fontSize = 16;
            textStyle.normal.textColor = Color.white;
            textStyle.alignment = TextAnchor.MiddleCenter;
            textStyle.wordWrap = true;

            // –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            GUI.Label(new Rect(dialog_x + 20, dialog_y + 40, dialog_width - 40, dialog_height - 80),
                error_message, textStyle);
            
            // –ö–Ω–æ–ø–∫–∞ –û–ö
            if (GUI.Button(new Rect(dialog_x + (dialog_width - 100) / 2, dialog_y + dialog_height - 50, 100, 30), "–ü–æ–Ω—è—Ç–Ω–æ"))
            {
                show_error = false;
            }
        }

        public void ShowError(string message, float duration = 5f)
        {
            error_message = message;
            show_error = true;
            error_time = Time.realtimeSinceStartup + duration;
        }

        void UpdateTrainingParameter(string param_name, float value)
        {
            try
            {
                // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                Debug.Log($"üìä –ò–∑–º–µ–Ω–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä {param_name}: {value}");
                
                // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                training_params[param_name] = value;
                training_inputs[param_name] = value.ToString("F1");
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                UpdateGlobalParameters();
                
                // –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–≥–µ–Ω—Ç—ã –≤ —Å—Ü–µ–Ω–µ
                var allAgents = FindObjectsOfType<Neuro>();
                Debug.Log($"üîç –ù–∞–π–¥–µ–Ω–æ {allAgents.Length} –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param_name}");
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º
                foreach (var neuro in allAgents)
                {
                    if (neuro == null) continue;
                    
                    // –ù–û–í–´–ô –ü–û–î–•–û–î: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –í–°–ï–• –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    ApplyCurrentGUIParamsToAgent(neuro);
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ simulation_manager —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (simulation_manager != null)
            {
                    // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ SimulationManager
                    var targetField = simulation_manager.GetType().GetField(param_name.ToLower());
                    if (targetField != null)
                    {
                        targetField.SetValue(simulation_manager, value);
                        Debug.Log($"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä {param_name}={value} –≤ SimulationManager");
                    }
                }
            }
            catch (Exception e)
            {
                Debug.LogError($"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {param_name}: {e.Message}");
            }
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        private void UpdateGlobalParameters()
        {
            GlobalTrainingParams.UpdateParams(
                GetCurrentParamValue("Activity_reward"),
                GetCurrentParamValue("Target_reward"),
                GetCurrentParamValue("Collision_penalty"),
                GetCurrentParamValue("Target_tracking_reward"),
                GetCurrentParamValue("Speed_change_reward"),
                GetCurrentParamValue("Rotation_change_reward"),
                GetCurrentParamValue("Time_bonus_multiplier")
            );
        }

        // –ß–∏—Å—Ç–∏–º —Ä–µ—Å—É—Ä—Å—ã –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏
        void OnDestroy()
        {
            if (lineTex != null)
            {
                Destroy(lineTex);
            }
        }

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ –≤—ã–∑–æ–≤–æ–≤ SimulationManager
        private void DisplayStats()
        {
            int padding = 10;
            int width = 300;
            int height = 25;
            
            GUI.skin.label.fontSize = 16;
            GUI.skin.label.normal.textColor = Color.white;
            
            // Create background box for stats
            GUI.Box(new Rect(padding, padding, width + padding * 2, 460), ""); 
            
            // Display statistics
            int y = padding * 2;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏
                GUI.contentColor = Color.yellow;
                GUI.Label(new Rect(padding * 2, y, width, height), 
                    "üÜï Using New Network (No Save)");
                y += height + 5;
                GUI.contentColor = Color.white;

            // –û—Å—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Generation: {current_generation}");
            
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Time: {generation_timer:F1}s");
            
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"FPS: {current_fps:F1}");
            
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Agents: {current_agents_count}");

            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"TimeScale: {Time.timeScale}x");
                
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Best Distance Ever: {best_distance_ever:F2}m");
                
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Best Distance Current: {best_distance_current:F2}m");
                
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Avg Distance Last Gen: {avg_distance_last_gen:F2}m");
                
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Total Successes Ever: {total_successes_ever}");
                
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Successes Last Gen: {successes_last_gen}");

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ—É –æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            y += height + 10; 
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"üß† Neural Network Info:");
                
            y += height;
            string layers_str = string.Join(" ‚Üí ", neural_layers);
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Structure: {layers_str}");
                
            y += height;
            // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            int total_params = CalculateTotalParameters();
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Total Parameters: {total_params:N0}");
                
            y += height;
            GUI.Label(new Rect(padding * 2, y, width, height), 
                $"Mutation Rate: {(current_mutation_rate * 100):F1}%");

            // Draw success history graph
            DrawSuccessGraph();

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–º —Ä–∞—É–Ω–¥–µ –∏ –ø–æ–±–µ–¥–µ
            if (is_validation_round)
            {
                GUI.color = Color.yellow;
                GUI.Label(new Rect(padding * 2, y, width, height), 
                    "üéØ VALIDATION ROUND");
                y += height;
            }
            
            if (game_won)
            {
                GUI.color = Color.green;
                GUI.Label(new Rect(padding * 2, y, width, height), 
                    "üèÜ VICTORY! Training Complete!");
                y += height;
            }
            
            GUI.color = Color.white;
        }

        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è CalculateTotalParameters
        private int CalculateTotalParameters()
        {
            // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            int total = 0;
            for (int i = 0; i < neural_layers.Length - 1; i++)
            {
                // –í–µ—Å–∞ + —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—è
                total += (neural_layers[i] * neural_layers[i + 1]) + neural_layers[i + 1];
            }
            return total;
        }

        void DrawSuccessGraph()
        {
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —Å –æ—Ç—Å—Ç—É–ø–æ–º 10 –ø–∏–∫—Å–µ–ª–µ–π
            float graphX = Screen.width - 300 - 10;
            float graphY = 10; // –û—Ç—Å—Ç—É–ø —Å–≤–µ—Ä—Ö—É
            float graph_width = 300;
            float graph_height = 150;

            // Draw graph background
            GUI.color = new Color(0, 0, 0, 0.5f);
            GUI.Box(new Rect(graphX, graphY, graph_width, graph_height), "");
            GUI.color = Color.white;

            // Draw graph title
            GUI.Label(new Rect(graphX, graphY - 20, graph_width, 20), 
                $"Success History (Max: {max_success_count})");

            // –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç—É—Ä—É –¥–ª—è –ª–∏–Ω–∏–π
            if (lineTex == null)
            {
                lineTex = new Texture2D(1, 1);
                lineTex.SetPixel(0, 0, Color.white);
                lineTex.Apply();
            }

            // Draw coordinate system
            DrawLine(new Vector2(graphX, graphY + graph_height),
                    new Vector2(graphX, graphY),
                    Color.gray); // Y axis
                    
            DrawLine(new Vector2(graphX, graphY + graph_height),
                    new Vector2(graphX + graph_width, graphY + graph_height),
                    Color.gray); // X axis

            // Draw grid lines
            Color gridColor = new Color(0.5f, 0.5f, 0.5f, 0.2f);
            int gridLines = 5;
            for (int i = 1; i < gridLines; i++)
            {
                float y = graphY + (i * graph_height / gridLines);
                DrawLine(new Vector2(graphX, y),
                        new Vector2(graphX + graph_width, y),
                        gridColor);
                
                float x = graphX + (i * graph_width / gridLines);
                DrawLine(new Vector2(x, graphY),
                        new Vector2(x, graphY + graph_height),
                        gridColor);
                
                // Draw Y axis labels
                int value = (gridLines - i) * max_success_count / gridLines;
                GUI.Label(new Rect(graphX - 30, y - 10, 25, 20), value.ToString());
            }

            // Draw graph
            if (success_history != null && success_history.Count > 1)
            {
                int max_history_points = 30;
                for (int i = 0; i < success_history.Count - 1; i++)
                {
                    float x1 = graphX + (i * graph_width / (max_history_points - 1));
                    float x2 = graphX + ((i + 1) * graph_width / (max_history_points - 1));
                    
                    float y1 = graphY + graph_height - 
                               (success_history[i] * graph_height / Mathf.Max(1, max_success_count));
                    float y2 = graphY + graph_height - 
                               (success_history[i + 1] * graph_height / Mathf.Max(1, max_success_count));
                    
                    DrawLine(new Vector2(x1, y1), new Vector2(x2, y2), Color.green);
                }
            }
        }

        private void DrawLine(Vector2 pointA, Vector2 pointB, Color color)
        {
            if (lineTex == null)
            {
                lineTex = new Texture2D(1, 1);
                lineTex.SetPixel(0, 0, Color.white);
                lineTex.Apply();
            }

            Matrix4x4 matrix = GUI.matrix;
            Color savedColor = GUI.color;
            GUI.color = color;

            float angle = Vector3.Angle(pointB - pointA, Vector2.right);
            if (pointA.y > pointB.y) angle = -angle;

            GUIUtility.RotateAroundPivot(angle, pointA);
            float width = (pointB - pointA).magnitude;
            GUI.DrawTexture(new Rect(pointA.x, pointA.y, width, 1), lineTex);
            GUI.matrix = matrix;
            GUI.color = savedColor;
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –ø–æ–∑–∏—Ü–∏–∏ UI
        private void UpdateUIRect()
        {
            float scaled_width = ui_width / ui_scale;
            float scaled_height = ui_height / ui_scale;
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –æ–∫–Ω–æ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞
            float x = (Screen.width / ui_scale) - scaled_width - (ui_right_margin / ui_scale);
            float y = ui_top_margin / ui_scale;
            
            training_ui_rect = new Rect(x, y, scaled_width, scaled_height);

            // –ü–∞–Ω–µ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–≤–µ—Ä—Ö—É
            float speed_panel_scaled_width = speed_panel_width / ui_scale;
            float speed_panel_scaled_height = speed_panel_height / ui_scale;
            float speed_panel_x = (Screen.width / ui_scale) - speed_panel_scaled_width - (speed_panel_right_margin / ui_scale);
            float speed_panel_y = speed_panel_top_margin / ui_scale;
            
            speed_panel_rect = new Rect(speed_panel_x, speed_panel_y, speed_panel_scaled_width, speed_panel_scaled_height);
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è –≤ UI —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –∏—Ö –∫ –∞–≥–µ–Ω—Ç–∞–º
        void InitTrainingUI()
        {
            if (simulation_manager == null) return;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
            training_params.Clear();
            training_inputs.Clear();
            
            // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —á—Ç–æ–±—ã –∞–≥–µ–Ω—Ç—ã —Å—Ä–∞–∑—É —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–ª–∏
            training_params["Activity_reward"] = 20.0f;
            training_params["Target_reward"] = 50.0f;
            training_params["Collision_penalty"] = 30.0f;
            training_params["Target_tracking_reward"] = 10.0f;
            training_params["Speed_change_reward"] = 5.0f;
            training_params["Rotation_change_reward"] = 5.0f;
            training_params["Time_bonus_multiplier"] = 10.0f;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π –∏ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –∞–≥–µ–Ω—Ç–∞–º
            foreach (var param in training_params.Keys.ToList())
            {
                training_inputs[param] = training_params[param].ToString("F1");
                
                // –í–ê–ñ–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ –∞–≥–µ–Ω—Ç–∞–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!
                UpdateTrainingParameter(param, training_params[param]);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            UpdateGlobalParameters();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –ø–æ–∑–∏—Ü–∏—é UI
            UpdateUIRect();
            
            Debug.Log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω UI –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –Ω–æ–ª—å
        private void ResetAllParametersToZero()
        {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            training_started = false;
            Time.timeScale = 0f;
            
            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Ö –≤ –Ω–æ–ª—å
            foreach (var param in training_params.Keys.ToList())
            {
                UpdateTrainingParameter(param, 0.0f);
            }
            
            Debug.Log("üßπ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –≤ –Ω–æ–ª—å!");
            ShowError("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –≤ –Ω–æ–ª—å!", 3f);
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Neuro –≤ –Ω–æ–ª—å (–º–∏–Ω—É—è UI –∏ —Å–ª–æ–≤–∞—Ä–∏)
        private void ForceNullifyAllNeuralParameters()
        {
            Debug.Log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è...");
            
            // 1. –ò—â–µ–º –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            var agents = GameObject.FindGameObjectsWithTag("Agent");
            if (agents.Length == 0)
            {
                agents = FindObjectsOfType<Neuro>().Select(n => n.gameObject).ToArray();
            }
            
            // 2. –û–±–Ω—É–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            foreach (var agent in agents)
            {
                NullifyAgentParameters(agent);
            }
            
            // 3. –ï—Å–ª–∏ –µ—Å—Ç—å SimulationManager, –æ–±–Ω—É–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ —Ç–∞–º
            if (simulation_manager != null)
            {
                var managerFields = simulation_manager.GetType().GetFields(BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic)
                    .Where(f => f.FieldType == typeof(float) && 
                           (f.Name.ToLower().Contains("reward") || 
                            f.Name.ToLower().Contains("penalty") || 
                            f.Name.ToLower().Contains("bonus") ||
                            f.Name.ToLower().Contains("multiplier")))
                    .ToList();
                
                foreach (var field in managerFields)
                {
                    field.SetValue(simulation_manager, 0.0f);
                    Debug.Log($"üßπ –û–±–Ω—É–ª–µ–Ω–æ –ø–æ–ª–µ {field.Name} –≤ SimulationManager");
                }
            }
            
            // 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            StartCoroutine(MonitorNewAgentsCoroutine());
            
            Debug.Log("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        private void NullifyAgentParameters(GameObject agent)
        {
            if (agent == null) return;
            
            var neuro = agent.GetComponent<Neuro>();
            if (neuro == null) return;
            
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–ª—è —Å –Ω–∞–≥—Ä–∞–¥–∞–º–∏ –∏ —à—Ç—Ä–∞—Ñ–∞–º–∏
            var rewardFields = neuro.GetType().GetFields(BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic)
                .Where(f => f.FieldType == typeof(float) && 
                       (f.Name.ToLower().Contains("reward") || 
                        f.Name.ToLower().Contains("penalty") || 
                        f.Name.ToLower().Contains("bonus") ||
                        f.Name.ToLower().Contains("multiplier")))
                .ToList();
            
            // –û–±–Ω—É–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            foreach (var field in rewardFields)
            {
                field.SetValue(neuro, 0.0f);
                Debug.Log($"üßπ –û–±–Ω—É–ª–µ–Ω–æ –ø–æ–ª–µ {field.Name} –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {agent.name}");
            }
            
            // –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è –ø–æ –∏–º–µ–Ω–∏
            var activityRewardField = neuro.GetType().GetField("activity_reward");
            if (activityRewardField != null) activityRewardField.SetValue(neuro, 0.0f);
            
            var targetRewardField = neuro.GetType().GetField("target_reward");
            if (targetRewardField != null) targetRewardField.SetValue(neuro, 0.0f);
            
            var collisionPenaltyField = neuro.GetType().GetField("collision_penalty");
            if (collisionPenaltyField != null) collisionPenaltyField.SetValue(neuro, 0.0f);
            
            var targetTrackingRewardField = neuro.GetType().GetField("target_tracking_reward");
            if (targetTrackingRewardField != null) targetTrackingRewardField.SetValue(neuro, 0.0f);
            
            var speedChangeRewardField = neuro.GetType().GetField("speed_change_reward");
            if (speedChangeRewardField != null) speedChangeRewardField.SetValue(neuro, 0.0f);
            
            var rotationChangeRewardField = neuro.GetType().GetField("rotation_change_reward");
            if (rotationChangeRewardField != null) rotationChangeRewardField.SetValue(neuro, 0.0f);
            
            var timeBonusMultiplierField = neuro.GetType().GetField("time_bonus_multiplier");
            if (timeBonusMultiplierField != null) timeBonusMultiplierField.SetValue(neuro, 0.0f);
        }

        // –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        private IEnumerator MonitorNewAgentsCoroutine()
        {
            Debug.Log("üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤...");
            
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤
            var currentAgents = new HashSet<int>(FindObjectsOfType<Neuro>().Select(n => n.gameObject.GetInstanceID()));
            
            while (true)
            {
                yield return new WaitForSeconds(0.5f); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
                var newAgentsList = FindObjectsOfType<Neuro>();
                
                foreach (var neuro in newAgentsList)
                {
                    int instanceId = neuro.gameObject.GetInstanceID();
                    
                    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
                    if (!currentAgents.Contains(instanceId))
                    {
                        Debug.Log($"üÜï –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –∞–≥–µ–Ω—Ç {neuro.gameObject.name} - –æ–±–Ω—É–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!");
                        NullifyAgentParameters(neuro.gameObject);
                        currentAgents.Add(instanceId);
                    }
                }
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±–Ω—É–ª–µ–Ω–∏—è ALL_AGENTS –≤ —Å–∏–º—É–ª—è—Ü–∏–∏
        private void EMERGENCY_NullifyAllAgents()
        {
            Debug.Log("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –û–ë–ù–£–õ–ï–ù–ò–ï –í–°–ï–• –ê–ì–ï–ù–¢–û–í –í –ò–ì–†–ï!");
            
            var allNeuro = FindObjectsOfType<Neuro>();
            foreach (var neuro in allNeuro)
            {
                // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –≤ 0 –Ω–∞–ø—Ä—è–º—É—é
                var fields = new string[] 
                { 
                    "activity_reward", 
                    "target_reward", 
                    "collision_penalty", 
                    "target_tracking_reward", 
                    "speed_change_reward", 
                    "rotation_change_reward", 
                    "time_bonus_multiplier" 
                };
                
                foreach (var fieldName in fields)
                {
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
                    var field = neuro.GetType().GetField(fieldName);
                    if (field != null)
                    {
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ 0
                        field.SetValue(neuro, 0.0f);
                        Debug.Log($"üö® –û–±–Ω—É–ª–µ–Ω–æ –ø–æ–ª–µ {fieldName} –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {neuro.gameObject.name}");
                    }
                    else
                    {
                        Debug.LogWarning($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ {fieldName} —É Neuro –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞!");
                    }
                }
            }
            
            ShowError("üö® –í–°–ï –ê–ì–ï–ù–¢–´ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ë–ù–£–õ–ï–ù–´!", 3f);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫—É –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        private void ShowInstructionMessage()
        {
            string message = "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã –≤ –Ω–æ–ª—å!\n\n" +
                            "–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Å–ª–∞–π–¥–µ—Ä–æ–≤.\n" +
                            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –ù–£–õ–ò –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π.";
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
            ShowError(message, 10f);
        }

        // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ GUI
        public float GetCurrentParamValue(string paramName)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —Å–ª–æ–≤–∞—Ä–µ
            if (training_params.ContainsKey(paramName))
            {
                return training_params[paramName];
            }
            
            // –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
            Debug.LogWarning($"‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä {paramName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ GUI - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0");
            return 0f;
        }

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¢–ï–ö–£–©–ò–• –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ GUI –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
        public void ApplyCurrentGUIParamsToAgent(Neuro agent)
        {
            if (agent == null)
            {
                Debug.LogError("ü§¨ –ö–ê–ö–û–ì–û –•–†–ï–ù–ê! –ê–≥–µ–Ω—Ç —Ä–∞–≤–µ–Ω null!");
                return;
            }

            try
            {
                Debug.Log($"üî® –ù–ê–°–ò–õ–¨–ù–û –í–ë–ò–í–ê–ï–ú –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∞–≥–µ–Ω—Ç–∞: {agent.gameObject.name}");
                
                // –°–ª–æ–≤–∞—Ä—å –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å (–∏–º—è_–ø–æ–ª—è -> —Ç–µ–∫—É—â–µ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ_–∏–∑_GUI)
                var fieldsToUpdate = new Dictionary<string, float>()
                {
                    { "activity_reward", GetCurrentParamValue("Activity_reward") },
                    { "target_reward", GetCurrentParamValue("Target_reward") },
                    { "collision_penalty", GetCurrentParamValue("Collision_penalty") },
                    { "target_tracking_reward", GetCurrentParamValue("Target_tracking_reward") },
                    { "speed_change_reward", GetCurrentParamValue("Speed_change_reward") },
                    { "rotation_change_reward", GetCurrentParamValue("Rotation_change_reward") },
                    { "time_bonus_multiplier", GetCurrentParamValue("Time_bonus_multiplier") }
                };
                
                // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                int successCount = 0;
                
                // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—é –∏ –ù–ê–°–ò–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                foreach (var field in fieldsToUpdate)
                {
                    try
                    {
                        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
                        System.Reflection.FieldInfo fieldInfo = agent.GetType().GetField(field.Key, 
                            System.Reflection.BindingFlags.Public | 
                            System.Reflection.BindingFlags.NonPublic | 
                            System.Reflection.BindingFlags.Instance);
                        
                        if (fieldInfo != null)
                        {
                            // –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤ –∞–≥–µ–Ω—Ç–µ
                            float currentValue = (float)fieldInfo.GetValue(agent);
                            
                            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                            fieldInfo.SetValue(agent, field.Value);
                            
                            // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
                            float newValue = (float)fieldInfo.GetValue(agent);
                            
                            // –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                            string changeMsg = Mathf.Abs(currentValue - field.Value) < 0.001f 
                                ? $"üîÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–ª–µ {field.Key}: {newValue}"
                                : $"‚ö° –ó–ê–ú–ï–ù–ï–ù–û –ø–æ–ª–µ {field.Key}: {currentValue} -> {newValue}";
                            
                            Debug.Log(changeMsg);
                            successCount++;
                        }
                        else
                        {
                            Debug.LogError($"üíÄ –ü–æ–ª–µ {field.Key} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∞–≥–µ–Ω—Ç–µ {agent.gameObject.name}!");
                        }
                    }
                    catch (System.Exception ex)
                    {
                        Debug.LogError($"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {field.Key}: {ex.Message}");
                    }
                }
                
                // –¢–∞–∫–∂–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∞–º —Ñ–∏—Ç–Ω–µ—Å—Å –∞–≥–µ–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π
                try 
                {
                    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ —Ñ–∏—Ç–Ω–µ—Å–∞ –Ω–∞–ø—Ä—è–º—É—é
                    var fitnessField = agent.GetType().GetField("fitness",
                        System.Reflection.BindingFlags.Public | 
                        System.Reflection.BindingFlags.NonPublic | 
                        System.Reflection.BindingFlags.Instance);
                        
                    if (fitnessField != null)
                    {
                        float currentFitness = (float)fitnessField.GetValue(agent);
                        if (currentFitness > 0.001f)
                        {
                            Debug.LogWarning($"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å {currentFitness} —É {agent.gameObject.name} - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º!");
                            fitnessField.SetValue(agent, 0f);
                        }
                    }
                }
                catch { }
                
                // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ –∞–≥–µ–Ω—Ç–µ, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                try
                {
                    var updateMethod = agent.GetType().GetMethod("UpdateParameters", 
                        System.Reflection.BindingFlags.Instance | 
                        System.Reflection.BindingFlags.Public | 
                        System.Reflection.BindingFlags.NonPublic);
                        
                    if (updateMethod != null)
                    {
                        updateMethod.Invoke(agent, null);
                        Debug.Log("‚úÖ –í—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ UpdateParameters() –Ω–∞ –∞–≥–µ–Ω—Ç–µ!");
                    }
                }
                catch (System.Exception ex)
                {
                    Debug.LogWarning($"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ UpdateParameters(): {ex.Message}");
                }
                
                Debug.Log($"üéØ –ì–û–¢–û–í–û! –û–±–Ω–æ–≤–ª–µ–Ω–æ {successCount}/{fieldsToUpdate.Count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è {agent.gameObject.name}");
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {ex.Message}");
            }
        }

        // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ª–∞–π–¥–µ—Ä–∞, –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ
        private float GetSliderValue(string paramName)
        {
            if (training_params.ContainsKey(paramName))
            {
                return training_params[paramName];
            }
            return 0f;
        }
        
        // –ü—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏ –ª–∏—à–Ω–µ–≥–æ –∫–æ–¥–∞
        private void SetAgentRewards(
            Neuro agent,
            float activity_reward,
            float target_reward,
            float collision_penalty,
            float target_tracking_reward,
            float speed_change_reward,
            float rotation_change_reward,
            float time_bonus_multiplier)
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞
                if (agent == null || agent.gameObject == null) return;
                
                // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                if (!agent.gameObject.activeInHierarchy)
                {
                    Debug.Log($"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {agent.gameObject.name} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
                }
                
                // –ü—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é - –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                var fields = agent.GetType().GetFields(System.Reflection.BindingFlags.Public | 
                                                     System.Reflection.BindingFlags.NonPublic | 
                                                     System.Reflection.BindingFlags.Instance);
                
                foreach (var field in fields)
                {
                    try
                    {
                        if (field.Name == "activity_reward") field.SetValue(agent, activity_reward);
                        else if (field.Name == "target_reward") field.SetValue(agent, target_reward);
                        else if (field.Name == "collision_penalty") field.SetValue(agent, collision_penalty);
                        else if (field.Name == "target_tracking_reward") field.SetValue(agent, target_tracking_reward);
                        else if (field.Name == "speed_change_reward") field.SetValue(agent, speed_change_reward);
                        else if (field.Name == "rotation_change_reward") field.SetValue(agent, rotation_change_reward);
                        else if (field.Name == "time_bonus_multiplier") field.SetValue(agent, time_bonus_multiplier);
                        
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å
                        else if (field.Name == "fitness" && field.FieldType == typeof(float))
                        {
                            field.SetValue(agent, 0f);
                        }
                    }
                    catch { }
                }
                
                // –í—ã–∑—ã–≤–∞–µ–º UpdateParameters, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                try
                {
                    var updateMethod = agent.GetType().GetMethod("UpdateParameters", 
                        System.Reflection.BindingFlags.Public | 
                        System.Reflection.BindingFlags.NonPublic | 
                        System.Reflection.BindingFlags.Instance);
                    
                    if (updateMethod != null)
                    {
                        updateMethod.Invoke(agent, null);
                    }
                }
                catch { }
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–≥–µ–Ω—Ç–∞ {agent?.gameObject?.name}: {ex.Message}");
            }
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞–≥—Ä–∞–¥
        private void DrawRewardParameters()
        {
            float y_pos = 10f;
            
            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
            foreach (var param in parameter_names.Keys.ToList())
            {
                // –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                string param_display_name = parameter_names[param];
                
                // –†–∏—Å—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                Rect labelRect = new Rect(10f, y_pos, 250f, 30f);
                GUI.Label(labelRect, param_display_name, label_style);
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                float current_value = 0f;
                if (training_params.ContainsKey(param))
                {
                    current_value = training_params[param];
                }
                
                // –†–∏—Å—É–µ–º —Å–ª–∞–π–¥–µ—Ä
                Rect sliderRect = new Rect(10f, y_pos + 30f, 300f, 20f);
                float new_value = GUI.HorizontalSlider(sliderRect, current_value, 0f, 100f);
                
                // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if (Mathf.Abs(new_value - current_value) > 0.01f)
                {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    training_params[param] = new_value;
                    if (training_inputs.ContainsKey(param))
                    {
                        training_inputs[param] = new_value.ToString("F1");
                    }
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    UpdateTrainingParameter(param, new_value);
                }
                
                // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è
                Rect inputRect = new Rect(320f, y_pos + 30f, 80f, 25f);
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                string current_text = "";
                if (training_inputs.ContainsKey(param))
                {
                    current_text = training_inputs[param];
                }
                
                // –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                GUI.backgroundColor = new Color(0.2f, 0.2f, 0.2f);
                string new_text = GUI.TextField(inputRect, current_text, input_style);
                GUI.backgroundColor = Color.white;
                
                // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
                if (new_text != current_text)
                {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    training_inputs[param] = new_text;
                    
                    // –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                    if (float.TryParse(new_text, out float parsed_value))
                    {
                        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                        parsed_value = Mathf.Clamp(parsed_value, 0f, 100f);
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        training_params[param] = parsed_value;
                        
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                        UpdateTrainingParameter(param, parsed_value);
                    }
                }
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É
                y_pos += param_spacing;
            }
        }

        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è (—Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø)
        private void ToggleTraining()
        {
            // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            training_started = !training_started;
            
            if (training_started)
            {
                // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
                Time.timeScale = current_speed;
                Debug.Log($"üöÄ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ! –°–∫–æ—Ä–æ—Å—Ç—å: {current_speed}√ó");
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º
                EMERGENCY_ApplyAllParameters();
            }
            else
            {
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
                Time.timeScale = 0f;
                Debug.Log("‚è∏Ô∏è –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø–∞—É–∑–µ");
            }
        }

        // –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ü–µ–Ω–µ (–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)
        private IEnumerator ContinuousAgentMonitoringCoroutine()
        {
            // –ë–ª—è–¥—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —Å–∫—Ä–∏–ø—Ç—ã —É—Å–ø–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
            yield return new WaitForSeconds(1.5f);
            
            Debug.Log("üß† –û–•–£–ï–ù–ù–´–ô –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≥–µ–Ω—Ç–æ–≤ –ó–ê–ü–£–©–ï–ù! –û—Ç—Å–ª–µ–∂–∏–≤–∞—é –≤—Å–µ—Ö, —Å—É–∫–∏!");
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å, –∫–æ–≥–¥–∞ –æ–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è
            HashSet<int> knownInactiveAgents = new HashSet<int>();
            
            while (true)
            {
                try 
                {
                    // –ò—â–µ–º –í–°–ï–• –∞–≥–µ–Ω—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö! (Resources.FindObjectsOfTypeAll)
                    Neuro[] allAgents = Resources.FindObjectsOfTypeAll<Neuro>();
                    if (allAgents.Length > 0)
                    {
                        Debug.Log($"üß† –ù–∞–π–¥–µ–Ω–æ {allAgents.Length} –∞–≥–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö)! –ü—Ä–∏–º–µ–Ω—è—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—Å–∏–ª—å–Ω–æ!");
                        
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞, –≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö
                        foreach (Neuro agent in allAgents) 
                        {
                            if (agent == null) continue;
                            
                            // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                            int agentID = agent.GetInstanceID();
                            
                            // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                            if (agent.gameObject.activeInHierarchy)
                            {
                                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ GUI –∫ –∞–≥–µ–Ω—Ç—É
                                InitializeAgentParams(agent);
                            }
                            // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ –¥–ª—è –±—É–¥—É—â–µ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                            else if (!knownInactiveAgents.Contains(agentID))
                            {
                                Debug.Log($"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {agent.gameObject.name} –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω! –ë—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –µ–≥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π");
                                knownInactiveAgents.Add(agentID);
                                
                                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ MonitorAgentActivation
                                StartCoroutine(MonitorAgentActivation(agent, agentID));
                            }
                        }
                    }
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≠–ö–°–¢–†–ï–ù–ù–û–ï –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                    if (Time.frameCount % 600 == 0) // –ü—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ 60 FPS
                    {
                        Debug.Log("üî• –≠–ö–°–¢–†–ï–ù–ù–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í –ö–û –í–°–ï–ú –ê–ì–ï–ù–¢–ê–ú!");
                        EMERGENCY_ApplyAllParameters();
                    }
                }
                catch (System.Exception ex)
                {
                    Debug.LogError($"üí• –ü–∏–∑–¥–µ—Ü –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {ex.Message}");
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                yield return new WaitForSeconds(2f);
            }
        }

        // –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        private IEnumerator MonitorAgentActivation(Neuro agent, int agentID)
        {
            if (agent == null) yield break;
            
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ, –ø–æ–∫–∞ –æ–±—ä–µ–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
            while (agent != null && !agent.gameObject.activeInHierarchy)
            {
                yield return new WaitForSeconds(0.5f);
            }
            
            // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å—Ç–∞–ª –∞–∫—Ç–∏–≤–Ω—ã–º
            if (agent != null && agent.gameObject.activeInHierarchy)
            {
                Debug.Log($"üéâ –ï–ë–ê–¢–¨! –ê–≥–µ–Ω—Ç {agent.gameObject.name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è! –ü—Ä–∏–º–µ–Ω—è—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!");
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ GUI –∫ –∞–≥–µ–Ω—Ç—É, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
                InitializeAgentParams(agent);
            }
        }

        // –≠–ö–°–¢–†–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º
        public void EMERGENCY_ApplyAllParameters()
        {
            Debug.Log("‚ò¢Ô∏è –ù–ê–ß–ò–ù–ê–Æ –≠–ö–°–¢–†–ï–ù–ù–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í!");
            
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –í–°–ï–ú–ò –í–û–ó–ú–û–ñ–ù–´–ú–ò –°–ü–û–°–û–ë–ê–ú–ò
                List<Neuro> allAgents = new List<Neuro>();
                
                // 1. –ß–µ—Ä–µ–∑ Resources.FindObjectsOfTypeAll (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ)
                allAgents.AddRange(Resources.FindObjectsOfTypeAll<Neuro>());
                
                // 2. –ß–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π FindObjectsOfType (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
                allAgents.AddRange(FindObjectsOfType<Neuro>());
                
                // 3. –ß–µ—Ä–µ–∑ GetComponentsInChildren –æ—Ç –∫–æ—Ä–Ω—è —Å—Ü–µ–Ω—ã
                foreach (var root in UnityEngine.SceneManagement.SceneManager.GetActiveScene().GetRootGameObjects())
                {
                    allAgents.AddRange(root.GetComponentsInChildren<Neuro>(true)); // true - –≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
                }
                
                // 4. –ß–µ—Ä–µ–∑ —Ç–µ–≥ "Agent", –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                var taggedObjects = GameObject.FindGameObjectsWithTag("Agent");
                foreach (var obj in taggedObjects)
                {
                    var neuro = obj.GetComponent<Neuro>();
                    if (neuro != null) allAgents.Add(neuro);
                }
                
                // 5. –ò–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ SimulationManager
                if (simulation_manager != null) 
                {
                    var activeAgentsField = simulation_manager.GetType().GetField("active_agents", 
                        BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                        
                    if (activeAgentsField != null && activeAgentsField.GetValue(simulation_manager) is List<GameObject> activeAgents)
                    {
                        foreach (var agent in activeAgents)
                        {
                            if (agent != null)
                            {
                                var neuro = agent.GetComponent<Neuro>();
                                if (neuro != null) allAgents.Add(neuro);
                            }
                        }
                    }
                }
                
                // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ null
                List<Neuro> uniqueAgents = new List<Neuro>();
                HashSet<int> seenIds = new HashSet<int>();
                
                foreach (var agent in allAgents)
                {
                    if (agent != null && agent.gameObject != null)
                    {
                        int id = agent.GetInstanceID();
                        if (!seenIds.Contains(id))
                        {
                            seenIds.Add(id);
                            uniqueAgents.Add(agent);
                        }
                    }
                }
                
                Debug.Log($"‚ö° –ù–∞–π–¥–µ–Ω–æ {uniqueAgents.Count} –£–ù–ò–ö–ê–õ–¨–ù–´–• –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–ø—Ä–æ—à–∏–≤–∫–∏");
                int successCount = 0;
                
                // –ö—ç—à–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                float activity = GetCurrentParamValue("Activity_reward");
                float target = GetCurrentParamValue("Target_reward");
                float collision = GetCurrentParamValue("Collision_penalty");
                float tracking = GetCurrentParamValue("Target_tracking_reward");
                float speed = GetCurrentParamValue("Speed_change_reward");
                float rotation = GetCurrentParamValue("Rotation_change_reward");
                float time = GetCurrentParamValue("Time_bonus_multiplier");
                
                Debug.Log($"üìä –ü—Ä–∏–º–µ–Ω—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: act={activity}, tar={target}, col={collision}, " +
                            $"track={tracking}, speed={speed}, rot={rotation}, time={time}");
                
                foreach (Neuro agent in uniqueAgents)
                {
                    if (agent == null) continue;
                    
                    try 
                    {
                        // –°–ü–û–°–û–ë 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                        InitializeAgentParams(agent);
                        
                        // –°–ü–û–°–û–ë 2: –ü—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
                        ApplyCurrentGUIParamsToAgent(agent);
                        
                        // –°–ü–û–°–û–ë 3: –ë–†–£–¢–ê–õ–¨–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ø–æ–ª–µ–π –Ω–∞–ø—Ä—è–º—É—é
                        if (agent != null)
                        {
                            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
                            var activityField = agent.GetType().GetField("activity_reward", 
                                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                            var targetField = agent.GetType().GetField("target_reward", 
                                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                            var collisionField = agent.GetType().GetField("collision_penalty", 
                                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                            var trackingField = agent.GetType().GetField("target_tracking_reward", 
                                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                            var speedField = agent.GetType().GetField("speed_change_reward", 
                                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                            var rotationField = agent.GetType().GetField("rotation_change_reward", 
                                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                            var timeField = agent.GetType().GetField("time_bonus_multiplier", 
                                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                            
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                            if (activityField != null) activityField.SetValue(agent, activity);
                            if (targetField != null) targetField.SetValue(agent, target);
                            if (collisionField != null) collisionField.SetValue(agent, collision);
                            if (trackingField != null) trackingField.SetValue(agent, tracking);
                            if (speedField != null) speedField.SetValue(agent, speed);
                            if (rotationField != null) rotationField.SetValue(agent, rotation);
                            if (timeField != null) timeField.SetValue(agent, time);
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                        bool parametersApplied = VerifyAgentParameters(agent);
                        
                        if (parametersApplied)
                        {
                            successCount++;
                            Debug.Log($"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {agent.gameObject.name}");
                        }
                        else 
                        {
                            Debug.LogWarning($"‚ö†Ô∏è –ù–ï –£–î–ê–õ–û–°–¨ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è {agent.gameObject.name}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–¥–µ–∂–¥—ã");
                            
                            try
                            {
                                // –°–ü–û–°–û–ë 4: –ü–£–ë–õ–ò–ß–ù–û–ï –ü–û–õ–ï –ù–ê–ü–†–Ø–ú–£–Æ
                                agent.activity_reward = activity;
                                agent.target_reward = target;
                                agent.collision_penalty = collision;
                                agent.target_tracking_reward = tracking;
                                agent.speed_change_reward = speed;
                                agent.rotation_change_reward = rotation;
                                agent.time_bonus_multiplier = time;
                                
                                successCount++;
                                Debug.Log($"üî• –ú–ï–¢–û–î –ü–û–°–õ–ï–î–ù–ï–ô –ù–ê–î–ï–ñ–î–´ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {agent.gameObject.name}!");
                            }
                            catch (Exception ex)
                            {
                                Debug.LogError($"üí• –í–°–ï –ú–ï–¢–û–î–´ –ù–ï –°–†–ê–ë–û–¢–ê–õ–ò: {ex.Message}");
                            }
                        }
                    }
                    catch (System.Exception ex)
                    {
                        Debug.LogError($"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ {agent.gameObject.name}: {ex.Message}");
                    }
                }
                
                Debug.Log($"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –û–±–Ω–æ–≤–ª–µ–Ω–æ {successCount}/{uniqueAgents.Count} –∞–≥–µ–Ω—Ç–æ–≤");
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
                if (successCount < uniqueAgents.Count)
                {
                    ShowError($"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ù–µ –≤—Å–µ –∞–≥–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {successCount}/{uniqueAgents.Count}", 3f);
                }
                else
                {
                    ShowError($"‚úÖ –ó–ê–ï–ë–ò–°–¨! –í—Å–µ {successCount} –∞–≥–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!", 2f);
                }
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ EMERGENCY_ApplyAllParameters: {ex.Message}\n{ex.StackTrace}");
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≥–µ–Ω—Ç–∞
        private bool VerifyAgentParameters(Neuro agent)
        {
            if (agent == null) return false;
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ —Ä–∞–≤–Ω–æ –Ω—É–ª—é
                float activityReward = 0f;
                float targetReward = 0f;
                
                // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
                var activityField = agent.GetType().GetField("activity_reward", 
                    System.Reflection.BindingFlags.Public | 
                    System.Reflection.BindingFlags.Instance);
                    
                var targetField = agent.GetType().GetField("target_reward", 
                    System.Reflection.BindingFlags.Public | 
                    System.Reflection.BindingFlags.Instance);
                    
                if (activityField != null) activityReward = (float)activityField.GetValue(agent);
                if (targetField != null) targetReward = (float)targetField.GetValue(agent);
                
                // –ï—Å–ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã –Ω—É–ª—é, –∑–Ω–∞—á–∏—Ç —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
                bool valuesOK = !(Mathf.Approximately(activityReward, 0f) && Mathf.Approximately(targetReward, 0f));
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å GUI-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                float expectedActivity = GetCurrentParamValue("Activity_reward");
                float expectedTarget = GetCurrentParamValue("Target_reward");
                
                bool matchesExpected = Mathf.Approximately(activityReward, expectedActivity) && 
                                     Mathf.Approximately(targetReward, expectedTarget);
                                     
                return valuesOK && matchesExpected;
            }
            catch
            {
                return false;
            }
        }

        // –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ –∏–∑ SimulationManager
        private int GetCurrentGeneration()
        {
            if (simulation_manager == null) return 0;
            
            try
            {
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
                var generationField = simulation_manager.GetType().GetField("current_generation", 
                    BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                    
                if (generationField != null)
                {
                    return (int)generationField.GetValue(simulation_manager);
                }
            }
            catch (Exception ex)
            {
                Debug.LogError($"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è: {ex.Message}");
            }
            
            return 0;
        }

        // –§–æ—Ä—Å–∏–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
        private void ForceApplyParametersToNewGeneration()
        {
            Debug.Log("üöÄ –§–û–†–°–ò–ú –ü–ê–†–ê–ú–ï–¢–†–´ –î–õ–Ø –ù–û–í–û–ì–û –ü–û–ö–û–õ–ï–ù–ò–Ø!");
            
            // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∞–≥–µ–Ω—Ç—ã —É—Å–ø–µ–ª–∏ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
            StartCoroutine(DelayedParameterApplication());
        }

        // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —á—Ç–æ–±—ã –∞–≥–µ–Ω—Ç—ã —É—Å–ø–µ–ª–∏ —Å–æ–∑–¥–∞—Ç—å—Å—è
        private IEnumerator DelayedParameterApplication()
        {
            // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∞–≥–µ–Ω—Ç—ã —É—Å–ø–µ–ª–∏ —Å–æ–∑–¥–∞—Ç—å—Å—è
            yield return new WaitForSeconds(0.5f);
            
            // –ü–µ—Ä–≤–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
            EMERGENCY_ApplyAllParameters();
            
            // –ï—â—ë –æ–¥–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            yield return new WaitForSeconds(1.0f);
            
            // –ò –µ—â—ë —Ä–∞–∑–æ–∫, —á—Ç–æ–±—ã –Ω–∞–≤–µ—Ä–Ω—è–∫–∞
            EMERGENCY_ApplyAllParameters();
            
            Debug.Log("‚úÖ –ü–ê–†–ê–ú–ï–¢–†–´ –ù–û–í–û–ì–û –ü–û–ö–û–õ–ï–ù–ò–Ø –û–ë–ù–û–í–õ–ï–ù–´ –¢–†–ò–ñ–î–´!");
        }

        void Update()
        {
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏—è –∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –æ–±—É—á–µ–Ω–∏—è
            if (simulation_manager != null && training_started)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
                int currentGeneration = GetCurrentGeneration();
                
                // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å (–Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ)
                if (currentGeneration > lastKnownGeneration)
                {
                    Debug.Log($"üîÑ –ü–ò–ó–î–ï–¶! –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ! {lastKnownGeneration} ‚Üí {currentGeneration}");
                    lastKnownGeneration = currentGeneration;
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º –≤ –Ω–æ–≤–æ–º –ø–æ–∫–æ–ª–µ–Ω–∏–∏
                    ForceApplyParametersToNewGeneration();
                }
                
                // –£–õ–¨–¢–†–ê –ê–ì–†–ï–°–°–ò–í–ù–´–ô –ú–û–î: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä
                if (Time.frameCount % 10 == 0) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 –∫–∞–¥—Ä–æ–≤ —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É
                {
                    ForceAggressiveParameterCheck();
                }
            }
        }

        // –£–ª—å—Ç—Ä–∞-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ö–ê–ñ–î–û–ì–û –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –ö–ê–ñ–î–´–ô –ö–ê–î–†
        private void ForceAggressiveParameterCheck()
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ê–ö–¢–ò–í–ù–´–ï –∞–≥–µ–Ω—Ç—ã
                var activeAgents = FindObjectsOfType<Neuro>();
                if (activeAgents.Length == 0) return;
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                float activity = GlobalTrainingParams.ActivityReward;
                float target = GlobalTrainingParams.TargetReward;
                float collision = GlobalTrainingParams.CollisionPenalty;
                float tracking = GlobalTrainingParams.TargetTrackingReward;
                float speed = GlobalTrainingParams.SpeedChangeReward;
                float rotation = GlobalTrainingParams.RotationChangeReward;
                float time = GlobalTrainingParams.TimeBonusMultiplier;
                
                // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
                int incorrectAgents = 0;
                
                // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                foreach (var agent in activeAgents)
                {
                    if (agent == null || agent.gameObject == null) continue;
                    
                    bool needsUpdate = false;
                    
                    // –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ –ø–æ–ª—è
                    if (Mathf.Abs(agent.activity_reward - activity) > 0.01f || 
                        Mathf.Abs(agent.target_reward - target) > 0.01f)
                    {
                        needsUpdate = true;
                        incorrectAgents++;
                        
                        // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
                        Debug.LogWarning($"üö® –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ —É {agent.gameObject.name}! " +
                            $"activity: {agent.activity_reward} vs {activity}, " +
                            $"target: {agent.target_reward} vs {target}");
                    }
                    
                    if (needsUpdate)
                    {
                        // –ü—Ä—è–º–æ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ –ø–æ–ª—è - —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π —Å–ø–æ—Å–æ–±
                        agent.activity_reward = activity;
                        agent.target_reward = target;
                        agent.collision_penalty = collision;
                        agent.target_tracking_reward = tracking;
                        agent.speed_change_reward = speed;
                        agent.rotation_change_reward = rotation;
                        agent.time_bonus_multiplier = time;
                    }
                }
                
                // –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã, –ª–æ–≥–∏—Ä—É–µ–º
                if (incorrectAgents > 0)
                {
                    if (incorrectAgents > 5)
                    {
                        Debug.LogError($"üî•üî•üî• –í–°–ï –ü–†–û–ü–ê–õ–û! {incorrectAgents} –ê–ì–ï–ù–¢–û–í –° –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò!");
                    }
                    else
                    {
                        Debug.LogWarning($"üî• –û–ë–ù–ê–†–£–ñ–ï–ù–û {incorrectAgents} –ê–ì–ï–ù–¢–û–í –° –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò! –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú!");
                    }
                    
                    // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
                    if (incorrectAgents > 3)
                    {
                        EMERGENCY_ApplyAllParameters();
                    }
                }
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"üí• –û—à–∏–±–∫–∞ –≤ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {ex.Message}");
            }
        }

        // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º —Ö—É–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ SimulationManager —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ–ª—è
        private void HookIntoSimulationManager()
        {
            if (simulation_manager == null) return;
            
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            var activeAgentsField = simulation_manager.GetType().GetField("active_agents", 
                BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                
            if (activeAgentsField != null && activeAgentsField.GetValue(simulation_manager) is List<GameObject> activeAgents)
            {
                // –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                Debug.Log($"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {activeAgents.Count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ SimulationManager!");
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∞–≥–µ–Ω—Ç–∞–º
                foreach (var agent in activeAgents)
                {
                    if (agent != null)
                    {
                        var neuro = agent.GetComponent<Neuro>();
                        if (neuro != null)
                        {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                            ApplyParametersDirect(neuro);
                        }
                    }
                }
            }
        }

        // –°–≤–µ—Ä—Ö–ø—Ä—è–º–æ–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–µ –ø–æ–ª—è
        private void ApplyParametersDirect(Neuro agent)
        {
            if (agent == null) return;
            
            try
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                agent.activity_reward = GlobalTrainingParams.ActivityReward;
                agent.target_reward = GlobalTrainingParams.TargetReward;
                agent.collision_penalty = GlobalTrainingParams.CollisionPenalty;
                agent.target_tracking_reward = GlobalTrainingParams.TargetTrackingReward;
                agent.speed_change_reward = GlobalTrainingParams.SpeedChangeReward;
                agent.rotation_change_reward = GlobalTrainingParams.RotationChangeReward;
                agent.time_bonus_multiplier = GlobalTrainingParams.TimeBonusMultiplier;
                
                Debug.Log($"‚úÖ –ü—Ä—è–º–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è {agent.gameObject.name}");
            }
            catch (System.Exception ex)
            {
                Debug.LogError($"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {ex.Message}");
            }
        }

        // –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Ö—É–∫–∞ –≤ –º–µ—Ö–∞–Ω–∏–∑–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏–π
        private void InjectGenerationChangeHook()
        {
            Debug.LogWarning("üîÑ –í–ù–ï–î–†–Ø–ï–ú–°–Ø –í –ú–ï–•–ê–ù–ò–ó–ú –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ü–û–ö–û–õ–ï–ù–ò–ô!");
            
            try
            {
                // –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç–æ–¥—ã –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è
                var startGenMethod = simulation_manager.GetType().GetMethod("StartNewGeneration", 
                    BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                
                var endGenMethod = simulation_manager.GetType().GetMethod("EndGeneration", 
                    BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                
                if (startGenMethod != null)
                {
                    Debug.Log($"‚úÖ –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –Ω–∞—á–∞–ª–∞ –ø–æ–∫–æ–ª–µ–Ω–∏—è: {startGenMethod.Name}");
                    
                    // –ü–†–Ø–ú–û–ô –ü–ï–†–ï–•–í–ê–¢: –¥–µ–ª–∞–µ–º –¥–µ–ª–µ–≥–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–æ–≤–µ—Ç –Ω–∞—à –º–µ—Ç–æ–¥ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ
                    StartCoroutine(PostGenerationHook());
                }
                
                if (endGenMethod != null)
                {
                    Debug.Log($"‚úÖ –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏—è: {endGenMethod.Name}");
                    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤ Update
                }
                
                // –ö–†–ê–ô–ù–Ø–Ø –ú–ï–†–ê - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ spawnSingleAgent
                var spawnSingleAgent = simulation_manager.GetType().GetMethod("SpawnSingleAgent", 
                    BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                
                if (spawnSingleAgent != null)
                {
                    Debug.Log($"üî• –ù–ê–ô–î–ï–ù –ú–ï–¢–û–î –°–ü–ê–í–ù–ê! {spawnSingleAgent.Name}");
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–ø–∞–≤–Ω–∞
                    StartCoroutine(PostSpawnMonitoring());
                }
                
                // –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏—è
                StartCoroutine(GenerationStateMonitoringCoroutine());
            }
            catch (Exception ex)
            {
                Debug.LogError($"üí• –û—à–∏–±–∫–∞ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –≤ –º–µ—Ö–∞–Ω–∏–∑–º –ø–æ–∫–æ–ª–µ–Ω–∏–π: {ex.Message}");
            }
        }

        // –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –ø–æ—Å–ª–µ StartNewGeneration
        private IEnumerator PostGenerationHook()
        {
            Debug.Log("üîÑ –ó–∞–ø—É—â–µ–Ω —Ö—É–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ StartNewGeneration");
            
            int lastGeneration = 0;
            bool initialCheck = true;
            
            while (true)
            {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
                int currentGeneration = GetCurrentGeneration();
                
                // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                if (currentGeneration != lastGeneration || initialCheck)
                {
                    initialCheck = false;
                    lastGeneration = currentGeneration;
                    
                    Debug.Log($"üîÑ Post-Generation Hook: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–∫–æ–ª–µ–Ω–∏–µ {currentGeneration}");
                    
                    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∞–≥–µ–Ω—Ç—ã —É—Å–ø–µ–ª–∏ —Å–æ–∑–¥–∞—Ç—å—Å—è
                    yield return new WaitForSeconds(0.2f);
                    
                    // –ü–æ–ª–Ω–æ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    EMERGENCY_ApplyAllParameters();
                    
                    // –ò –µ—â–µ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                    yield return new WaitForSeconds(0.5f);
                    
                    // –ò –µ—â–µ —Ä–∞–∑
                    ForceAggressiveParameterCheck();
                    HookIntoSimulationManager();
                }
                
                yield return new WaitForSeconds(0.5f);
            }
        }

        // –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ SpawnSingleAgent
        private IEnumerator PostSpawnMonitoring()
        {
            Debug.Log("üîÑ –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ SpawnSingleAgent");
            
            int lastAgentCount = 0;
            
            while (true)
            {
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤
                Neuro[] currentAgents = FindObjectsOfType<Neuro>();
                
                // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if (currentAgents.Length != lastAgentCount)
                {
                    Debug.Log($"üîÑ Post-Spawn Monitor: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≥–µ–Ω—Ç–æ–≤: {lastAgentCount} ‚Üí {currentAgents.Length}");
                    lastAgentCount = currentAgents.Length;
                    
                    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –∞–≥–µ–Ω—Ç—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å
                    yield return new WaitForSeconds(0.1f);
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º
                    foreach (var agent in currentAgents)
                    {
                        if (agent != null)
                        {
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                            ApplyParametersDirect(agent);
                        }
                    }
                }
                
                yield return new WaitForSeconds(0.2f);
            }
        }

        // –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏—è
        private IEnumerator GenerationStateMonitoringCoroutine()
        {
            Debug.Log("üîç –ó–∞–ø—É—â–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏—è!");
            
            float lastGenerationTimer = 0f;
            int lastGeneration = 0;
            bool isSpawning = false;
            
            while (true)
            {
                try
                {
                    if (simulation_manager != null)
                    {
                        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä –ø–æ–∫–æ–ª–µ–Ω–∏—è
                        float currentTimer = 0f;
                        int currentGen = 0;
                        bool currentSpawning = false;
                        
                        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
                        var timerField = simulation_manager.GetType().GetField("generation_timer", 
                            BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                        
                        var genField = simulation_manager.GetType().GetField("current_generation", 
                            BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                        
                        var spawningField = simulation_manager.GetType().GetField("is_spawning", 
                            BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
                        
                        if (timerField != null) currentTimer = (float)timerField.GetValue(simulation_manager);
                        if (genField != null) currentGen = (int)genField.GetValue(simulation_manager);
                        if (spawningField != null) currentSpawning = (bool)spawningField.GetValue(simulation_manager);
                        
                        // –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∫–æ–ª–µ–Ω–∏—è (—Å–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞)
                        if ((lastGenerationTimer > 5f && currentTimer < 1f) || currentGen > lastGeneration)
                        {
                            Debug.Log($"üîÑ –ù–û–í–û–ï –ü–û–ö–û–õ–ï–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û! –¢–∞–π–º–µ—Ä: {lastGenerationTimer} ‚Üí {currentTimer}, " +
                                     $"–ü–æ–∫–æ–ª–µ–Ω–∏–µ: {lastGeneration} ‚Üí {currentGen}");
                            
                            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                            StartCoroutine(DelayedParameterApplication());
                            
                            lastGeneration = currentGen;
                        }
                        
                        // –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—É—Å–∫ —Å–ø–∞–≤–Ω–∞
                        if (!isSpawning && currentSpawning)
                        {
                            Debug.Log("üê£ –û–ë–ù–ê–†–£–ñ–ï–ù –ó–ê–ü–£–°–ö –°–ü–ê–í–ù–ê –ê–ì–ï–ù–¢–û–í!");
                            
                            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø–æ—Å–ª–µ —Å–ø–∞–≤–Ω–∞
                            StartCoroutine(DelayedParameterApplicationAfterSpawn());
                        }
                        
                        // –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–ø–∞–≤–Ω–∞
                        if (isSpawning && !currentSpawning)
                        {
                            Debug.Log("‚úÖ –û–ë–ù–ê–†–£–ñ–ï–ù–û –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–ü–ê–í–ù–ê –ê–ì–ï–ù–¢–û–í!");
                            
                            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ø–∞–≤–Ω–∞
                            StartCoroutine(DelayedParameterApplicationAfterSpawn());
                        }
                        
                        lastGenerationTimer = currentTimer;
                        isSpawning = currentSpawning;
                    }
                }
                catch (Exception ex)
                {
                    Debug.LogWarning($"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ–∫–æ–ª–µ–Ω–∏—è: {ex.Message}");
                }
                
                yield return new WaitForSeconds(0.5f);
            }
        }

        // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—Å–ª–µ —Å–ø–∞–≤–Ω–∞
        private IEnumerator DelayedParameterApplicationAfterSpawn()
        {
            // –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∞–≥–µ–Ω—Ç—ã –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å
            yield return new WaitForSeconds(0.2f);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑
            Debug.Log("üîÑ –ü–†–ò–ú–ï–ù–Ø–ï–ú –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–°–õ–ï –°–ü–ê–í–ù–ê (1/3)");
            EMERGENCY_ApplyAllParameters();
            
            // –ï—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã
            yield return new WaitForSeconds(0.5f);
            Debug.Log("üîÑ –ü–†–ò–ú–ï–ù–Ø–ï–ú –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–°–õ–ï –°–ü–ê–í–ù–ê (2/3)");
            EMERGENCY_ApplyAllParameters();
            
            // –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
            yield return new WaitForSeconds(0.5f);
            Debug.Log("üîÑ –§–ò–ù–ê–õ–¨–ù–û–ï –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í –ü–û–°–õ–ï –°–ü–ê–í–ù–ê (3/3)");
            EMERGENCY_ApplyAllParameters();
        }
    }
}

