using UnityEngine;
using System.Collections.Generic;
using System.Linq;
using System;
using System.Collections;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Globalization;

namespace Game.Scripts.GamePlay
{
    public class SimulationManager : MonoBehaviour
    {
        [Header("Simulation Settings")]
        [SerializeField] private float generation_time = 30f;
        [SerializeField] private int population_size = 20;
        [SerializeField] private float mutation_rate = 0.1f;
        [SerializeField] private float mutation_strength = 0.5f;
        [SerializeField] private bool elite_selection = true;
        [SerializeField] private int elite_count = 2;
        
        [Header("Population Settings")]
        [Tooltip("–ü—É—Ç—å –∫ –ø—Ä–µ—Ñ–∞–±—É –∞–≥–µ–Ω—Ç–∞ –≤ Resources")]
        [SerializeField] private string agent_prefab_path = "Agents/Human";
        [Tooltip("–¢–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞ –∞–≥–µ–Ω—Ç–æ–≤")]
        public Transform spawn_point;
        [Tooltip("–†–∞–¥–∏—É—Å —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞–∑–±—Ä–æ—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤ –æ—Ç —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞")]
        public float spawn_radius = 5f;
        [Tooltip("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –ø—Ä–∏ —Å–ø–∞–≤–Ω–µ")]
        public bool useRandomRotation = true;
        [Tooltip("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≤ —Ñ–æ—Ä–º–µ —Å–µ—Ç–∫–∏ (–º–µ—Ç—Ä—ã)")]
        [SerializeField] private float agent_spacing = 2.0f;
        [Tooltip("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É —Å–µ—Ç–∫–∏")]
        [SerializeField] private int agents_per_row = 5;
        
        [Header("Agent Appearance")]
        [Tooltip("–ü–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å —Ü–≤–µ—Ç–æ–º –¢–û–ü-5 –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è")]
        public bool highlight_top_agents = true;
        [Tooltip("–ò–º—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞/—à–µ–π–¥–µ—Ä–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞")]
        public string agent_material_property = "_Color";
        [Tooltip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∏–ª–∞ (–º–æ—â–Ω–æ—Å—Ç—å) –∞–≥–µ–Ω—Ç–∞")]
        public float max_agent_force = 500000f;
        
        [Header("Time Control")]
        [Tooltip("–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏")]
        public float[] time_speed_presets = new float[] { 1f, 2f, 3f, 4f, 5f };
        [Tooltip("–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏")]
        private int current_speed_index = 0;
        
        [Header("Simulation Settings")]
        public float time_scale = 1f;
        [Tooltip("–°–∏–ª–∞ –º–æ—Ç–æ—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")]
        public float default_motor_force = 500f;
        
        [Header("Debug")]
        public bool draw_gizmos = true;
        
        [Header("Neural Network Configuration")]
        [SerializeField] private int[] neural_layers = new int[] { 10, 16, 8 };
        
        [Header("File Management")]
        [Tooltip("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏")]
        public string best_model_filename = "best_model.json";
        [Tooltip("–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")]
        public string models_directory = "Game/Game/snapshots";
        
        [Header("Debug Statistics")]
        [SerializeField] private bool show_detailed_logs = true;
        [SerializeField] private string stats_log_prefix = "üß†üë£";
        
        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        private List<NeuroHuman> agents = new List<NeuroHuman>();
        private List<NeuralNetwork> population = new List<NeuralNetwork>();
        private int current_generation = 0;
        private float generation_timer = 0f;
        private bool simulation_running = false;
        private int successful_agents = 0;
        private float best_fitness_ever = 0f;
        private NeuralNetwork best_network;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        private List<int> success_history = new List<int>();
        private List<float> fitness_history = new List<float>();
        
        // –¶–≤–µ—Ç–∞ –¥–ª—è –¢–û–ü-5 –∞–≥–µ–Ω—Ç–æ–≤
        private Color[] top_agent_colors = new Color[] {
            Color.green,  // 1-–π - –∑–µ–ª–µ–Ω—ã–π
            Color.blue,   // 2-–π - —Å–∏–Ω–∏–π
            Color.red,    // 3-–π - –∫—Ä–∞—Å–Ω—ã–π
            Color.yellow, // 4-–π - –∂–µ–ª—Ç—ã–π
            new Color(1f, 0.5f, 0.7f)  // 5-–π - —Ä–æ–∑–æ–≤—ã–π
        };
        
        // –¢–û–ü-5 –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
        private List<int> previous_top_agents = new List<int>();
        
        // Start is called before the first frame update
        void Start()
        {
            Debug.Log("üß† SimulationManager –∑–∞–ø—É—â–µ–Ω! –ì–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π, –µ–ø—Ç–∞!");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ª–æ—ë–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            if (neural_layers == null || neural_layers.Length < 2)
            {
                Debug.LogWarning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–ª–æ—ë–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é (10-16-8).");
                neural_layers = new int[] { 10, 16, 8 };
            }
            
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–¥–µ–ª–µ–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            string fullSnapshotPath = Path.Combine(Application.dataPath, models_directory);
            if (!Directory.Exists(fullSnapshotPath))
            {
                try
                {
                    Directory.CreateDirectory(fullSnapshotPath);
                    Debug.Log($"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –º–æ–¥–µ–ª–µ–π: {fullSnapshotPath}");
                }
                catch (Exception e)
                {
                    Debug.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–¥–µ–ª–µ–π: {e.Message}");
                }
            }
            else
            {
                Debug.Log($"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–Ω–∞–ø—à–æ—Ç–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {fullSnapshotPath}");
            }
            
            // –í–∞–∂–Ω–æ–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            network_loaded_at_start = false;
            best_fitness_ever = 0f;
            
            // *********************************************************
            // –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ü–û–õ–ù–û–°–¢–¨–Æ –û–¢–ö–õ–Æ–ß–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£ –ò–ó –§–ê–ô–õ–ê
            // *********************************************************
            Debug.Log("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ó–ê–ì–†–£–ó–ö–ê –ù–ï–ô–†–û–°–ï–¢–ï–ô –ò–ó –§–ê–ô–õ–ê –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–ê!");
            /*
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –∏–∑ —Ñ–∞–π–ª–∞
            if (!LoadBestNetworkFromFile())
            {
                Debug.Log("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å –Ω—É–ª—è.");
            }
            else
            {
                Debug.Log("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å –∏–∑ —Ñ–∞–π–ª–∞!");
            }
            */
            
            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ü–µ–Ω–µ
            FindAllAgents();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é
            InitializePopulation();
            
            // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å –≤—Å–µ—Ö —Å–µ—Ç–µ–π –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
            foreach (var net in population)
            {
                if (net != null) net.fitness = 0f;
            }
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä–∏–º —Ñ–∏—Ç–Ω–µ—Å—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            for (int i = 0; i < Mathf.Min(5, population.Count); i++)
            {
                Debug.Log($"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê Start(): —Ñ–∏—Ç–Ω–µ—Å —Å–µ—Ç–∏ #{i}: {population[i].fitness}");
            }
            
            // –£—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–∞—Å—à—Ç–∞–± —Å–∏–º—É–ª—è—Ü–∏–∏
            Time.timeScale = time_scale;
            
            // –°–æ–∑–¥–∞–¥–∏–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–ø—É–ª—è—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤
            SpawnAgents();
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            Debug.Log("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ!");
            StartSimulation();
        }
        
        void Update()
        {
            if (!simulation_running)
                return;
                
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –ø–æ–∫–æ–ª–µ–Ω–∏—è
            generation_timer += Time.deltaTime;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –ø–æ–∫–æ–ª–µ–Ω–∏—è
            if (generation_timer >= generation_time)
            {
                EndGeneration();
                StartNextGeneration();
            }
            
            // –ù–û–í–ê–Ø –§–ò–ß–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É–ø–∞–ª–∏ –ª–∏ –≤—Å–µ –∞–≥–µ–Ω—Ç—ã (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å)
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É, –∞ –Ω–µ –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É
            if (Time.frameCount % 30 == 0 && generation_timer > minimum_generation_time)
            {
                CheckForEarlyTermination();
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–∞—Å—à—Ç–∞–± —Å–∏–º—É–ª—è—Ü–∏–∏ (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω)
            Time.timeScale = time_scale;
        }
        
        [Header("Early Termination")]
        [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–æ–∫–æ–ª–µ–Ω–∏—è –¥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥–æ—Å—Ä–æ—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (—Å–µ–∫)")]
        [SerializeField] private float minimum_generation_time = 5f;
        [Tooltip("–ó–∞–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ, –µ—Å–ª–∏ –≤—Å–µ –∞–≥–µ–Ω—Ç—ã —É–ø–∞–ª–∏ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å)")]
        [SerializeField] private bool enable_early_termination = true;
        [Tooltip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–≤—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–≤ %)")]
        [Range(0.1f, 1.0f)]
        [SerializeField] private float max_fallen_percentage = 0.8f;
        
        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫–æ–ª–µ–Ω–∏—è
        private void CheckForEarlyTermination()
        {
            if (!enable_early_termination) return;
            
            int fallenAgents = 0;
            int totalAgents = 0;
            
            float firstFitnessValue = float.MinValue;
            bool allSameFitness = true;
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–≤—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤–æ—Å—Ç—å —Ñ–∏—Ç–Ω–µ—Å–∞
            foreach (var agent in agents)
            {
                if (agent == null) continue;
                
                totalAgents++;
                float fitness = agent.GetFitness();
                
                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                if (firstFitnessValue == float.MinValue)
                {
                    firstFitnessValue = fitness;
                }
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ
                else if (Math.Abs(fitness - firstFitnessValue) > 0.01f)
                {
                    allSameFitness = false;
                }
                
                // –°—á–∏—Ç–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —É–ø–∞–≤—à–∏–º, –µ—Å–ª–∏ –µ–≥–æ —Ñ–∏—Ç–Ω–µ—Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π
                if (fitness < 0f)
                {
                    fallenAgents++;
                }
            }
            
            // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
            if (totalAgents == 0) return;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É–ø–∞–≤—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
            float fallenPercentage = (float)fallenAgents / totalAgents;
            
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ —É–ø–∞–ª–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏–µ –¥–æ—Å—Ä–æ—á–Ω–æ
            if (fallenPercentage >= max_fallen_percentage)
            {
                Debug.Log($"üö® –î–û–°–†–û–ß–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï! –£–ø–∞–ª–æ {fallenAgents}/{totalAgents} –∞–≥–µ–Ω—Ç–æ–≤ ({fallenPercentage:P2})");
                EndGeneration();
                StartNextGeneration();
            }
            
            // –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ —É –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ñ–∏—Ç–Ω–µ—Å, –≤–æ–∑–º–æ–∂–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
            if (allSameFitness && totalAgents > 1 && generation_timer > 5.0f)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–æ—Ç —Å–∞–º—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å 200.02
                if (Math.Abs(firstFitnessValue - 200.02f) < 0.1f)
                {
                    Debug.LogWarning($"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –§–∏—Ç–Ω–µ—Å —É –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π: {firstFitnessValue:F2}! –í–æ–∑–º–æ–∂–Ω–æ, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–Ω–æ!");
                    
                    // –ù–∞—Å–∏–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å –≤—Å–µ—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
                    Debug.Log("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º —Ñ–∏—Ç–Ω–µ—Å –≤—Å–µ—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ!");
                    foreach (var net in population)
                    {
                        if (net != null) net.fitness = 0f;
                    }
                    
                    EndGeneration();
                    StartNextGeneration();
                }
            }
        }
        
        // –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ü–µ–Ω–µ
        private void FindAllAgents()
        {
            agents.Clear();
            var foundAgents = FindObjectsOfType<NeuroHuman>();
            
            if (foundAgents != null && foundAgents.Length > 0)
            {
                agents.AddRange(foundAgents);
                Debug.Log($"üîç –ù–∞–π–¥–µ–Ω–æ {agents.Count} –∞–≥–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ü–µ–Ω–µ.");
            }
            else
            {
                Debug.Log("‚ö†Ô∏è –ù–∞ —Å—Ü–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.");
            }
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤
        private void SpawnAgents()
        {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞
            if (spawn_point == null)
            {
                spawn_point = transform;
                Debug.LogWarning("‚ö†Ô∏è –ù–µ –∑–∞–¥–∞–Ω–∞ —Ç–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞ –∞–≥–µ–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–∫—Ç.");
            }
            
            // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤
            foreach (var agent in agents)
            {
                if (agent != null)
                {
                    Destroy(agent.gameObject);
                }
            }
            
            agents.Clear();
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–µ —Å–µ—Ç–∫–∏
            Vector3 centerPosition = spawn_point.position;
            
            int total_rows = Mathf.CeilToInt((float)population_size / agents_per_row);
            
            for (int i = 0; i < population_size; i++)
            {
                // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å–µ—Ç–∫–µ
                int row = i / agents_per_row;
                int col = i % agents_per_row;
                
                // –°–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
                Vector3 offset = new Vector3(
                    col * agent_spacing - (agents_per_row-1) * agent_spacing / 2f,
                    0f,
                    row * agent_spacing - (total_rows-1) * agent_spacing / 2f
                );
                
                // –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
                NeuroHuman agent = SpawnSingleAgent(i, centerPosition + offset);
                
                if (agent != null)
                {
                    agents.Add(agent);
                }
            }
            
            Debug.Log($"üè≠ –°–æ–∑–¥–∞–Ω–æ {agents.Count} –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–µ —Å–µ—Ç–∫–∏.");
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
        private void InitializePopulation()
        {
            population.Clear();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ª–æ—ë–≤
            if (neural_layers == null || neural_layers.Length < 2)
            {
                Debug.LogWarning("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–ª–æ—ë–≤. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é (10-16-8).");
                neural_layers = new int[] { 10, 16, 8 };
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å–ª–æ–µ–≤
            bool validLayers = true;
            for (int i = 0; i < neural_layers.Length; i++)
            {
                if (neural_layers[i] <= 0)
                {
                    Debug.LogError($"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–ª–æ—è {i}: {neural_layers[i]}. –î–æ–ª–∂–µ–Ω –±—ã—Ç—å > 0!");
                    validLayers = false;
                    break;
                }
            }
            
            // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã —Å–ª–æ–µ–≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
            if (!validLayers)
            {
                Debug.LogWarning("‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å–ª–æ–µ–≤ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ (10-16-8).");
                neural_layers = new int[] { 10, 16, 8 };
            }
            
            Debug.Log($"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Å–ª–æ–µ–≤: {string.Join("-", neural_layers)}");
            
            // –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º best_network, –Ω–æ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Ñ–∏—Ç–Ω–µ—Å –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏!
            bool useBestNetworkAsBase = best_network != null && best_network.layers != null && 
                                       best_network.layers.Length >= 2 && network_loaded_at_start;
                                       
            // –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ç–∏, –Ω–æ —Å –Ω—É–ª–µ–≤—ã–º —Ñ–∏—Ç–Ω–µ—Å–æ–º
            NeuralNetwork baseNetworkTemplate = null;
            
            if (useBestNetworkAsBase)
            {
                try
                {
                    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –ª—É—á—à—É—é —Å–µ—Ç—å
                    baseNetworkTemplate = best_network.Clone();
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å –¥–ª—è –∫–ª–æ–Ω–∞
                    baseNetworkTemplate.fitness = 0f;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–æ–Ω –≤ –ø–µ—Ä–≤—É—é –ø–æ–∑–∏—Ü–∏—é (–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —ç–ª–∏—Ç–∞—Ä–Ω–æ—Å—Ç—å)
                    population.Add(baseNetworkTemplate);
                    
                    Debug.Log("‚úÖ –õ—É—á—à–∞—è —Å–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–ø—É–ª—è—Ü–∏—é –∫–∞–∫ —ç–ª–∏—Ç–Ω–∞—è –æ—Å–æ–±—å.");
                }
                catch (Exception e)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª—É—á—à–µ–π —Å–µ—Ç–∏: {e.Message}");
                    useBestNetworkAsBase = false;
                }
            }
            
            // –°–æ–∑–¥–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –≤ –ø–æ–ø—É–ª—è—Ü–∏–∏
            int remaining = population_size - population.Count;
            for (int i = 0; i < remaining; i++)
            {
                try
                {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ç—å —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
                    NeuralNetwork network = new NeuralNetwork(neural_layers);
                    network.Randomize();
                    population.Add(network);
                }
                catch (Exception e)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ {i}: {e.Message}");
                    i--; // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
                }
            }
            
            Debug.Log($"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ø—É–ª—è—Ü–∏—è –∏–∑ {population.Count} –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.");
        }
        
        // –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–µ—Ç–∏ –∞–≥–µ–Ω—Ç–∞–º
        private void AssignNetworksToAgents()
        {
            for (int i = 0; i < agents.Count && i < population.Count; i++)
            {
                NeuralNetwork networkToAssign = population[i];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ç—å –Ω–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ —Ñ–∏—Ç–Ω–µ—Å–∞
                if (Math.Abs(networkToAssign.fitness - 200.02f) < 0.01f)
                {
                    Debug.LogWarning($"‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–ê –°–ï–¢–¨ –°–û –°–¢–ê–¢–ò–ß–ù–´–ú –§–ò–¢–ù–ï–°–û–ú 200.02 (–∞–≥–µ–Ω—Ç #{i})! –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å!");
                    networkToAssign.fitness = 0f;
                }
                
                agents[i].SetNeuralNetwork(networkToAssign);
                agents[i].SetStartTime(Time.time);
                
                // –ü—Ä–æ–≤–µ—Ä–∏–º —Ñ–∏—Ç–Ω–µ—Å –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
                Debug.Log($"üîç –ê–≥–µ–Ω—Ç—É #{i} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Å–µ—Ç—å —Å —Ñ–∏—Ç–Ω–µ—Å–æ–º: {networkToAssign.fitness:F2}");
            }
        }
        
        // –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
        public void StartSimulation()
        {
            if (agents.Count == 0)
            {
                FindAllAgents();
            }
            
            if (population.Count == 0)
            {
                InitializePopulation();
            }
            
            // –ï—Å–ª–∏ –ø–æ–ø—É–ª—è—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –º–µ–Ω—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≥–µ–Ω—Ç–æ–≤, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ—ë
            if (population.Count < agents.Count)
            {
                Debug.Log($"‚ö†Ô∏è –ü–æ–ø—É–ª—è—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π ({population.Count}) –º–µ–Ω—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–≥–µ–Ω—Ç–æ–≤ ({agents.Count}). –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏.");
                
                int initialCount = population.Count;
                for (int i = 0; i < agents.Count - initialCount; i++)
                {
                    GeneticAlgorithm genetic = new GeneticAlgorithm();
                    genetic.neural_layers = neural_layers;
                    NeuralNetwork network = genetic.CreateRandomNetwork();
                    network.fitness = 0f; // –Ø–í–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å –≤ 0
                    population.Add(network);
                }
                
                Debug.Log($"‚úÖ –ü–æ–ø—É–ª—è—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {population.Count}.");
            }
            
            current_generation = 0;
            generation_timer = 0f; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–æ–∫–æ–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏–º—É–ª—è—Ü–∏–∏
            simulation_running = true;
            successful_agents = 0;
            
            // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º best_fitness_ever, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
            // –ù–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            success_history.Clear();
            fitness_history.Clear();
            
            // –Ø–í–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            foreach (var net in population)
            {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å 200.02
                if (Math.Abs(net.fitness - 200.02f) < 0.01f)
                {
                    Debug.LogWarning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å 200.02! –°–±—Ä–∞—Å—ã–≤–∞–µ–º.");
                    net.fitness = 0f;
                }
            }
            
            StartNextGeneration();
            
            Debug.Log("üöÄ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! –ü–æ–∫–æ–ª–µ–Ω–∏–µ 1, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤: " + agents.Count);
        }
        
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏
        public void StopSimulation()
        {
            simulation_running = false;
            Debug.Log("‚õî –°–∏–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
        }
        
        // –ù–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
        private void StartNextGeneration()
        {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã —Ç–æ–ø-5 –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            previous_top_agents.Clear();
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –ª—É—á—à–∏—Ö
            var sortedIndices = Enumerable.Range(0, population.Count)
                .OrderByDescending(i => population[i].fitness)
                .Take(5)
                .ToList();
            
            previous_top_agents.AddRange(sortedIndices);
            
            current_generation++;
            generation_timer = 0f;
            successful_agents = 0;
            
            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ, —Ç–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–µ–ª–µ–∫—Ü–∏—é –∏ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
            if (current_generation > 1)
            {
                population = EvolvePoplation();
            }
            
            // –ö–∞–∂–¥—ã–µ 10 –ø–æ–∫–æ–ª–µ–Ω–∏–π –¥–µ–ª–∞–µ–º —Å–ª–µ–ø–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if (current_generation % 10 == 0)
            {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é —Å–µ—Ç—å —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –ø–æ–∫–æ–ª–µ–Ω–∏—è
                int roundedFitness = Mathf.RoundToInt(best_fitness_ever);
                string snapshotFilename = $"snapshot_gen{current_generation}_fit{roundedFitness}.json";
                SaveBestNetwork(snapshotFilename);
                Debug.Log($"üìä –°–æ–∑–¥–∞–Ω —Å–ª–µ–ø–æ–∫ –ø–æ–∫–æ–ª–µ–Ω–∏—è {current_generation} —Å —Ñ–∏—Ç–Ω–µ—Å–æ–º {roundedFitness}");
            }
            
            // –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–µ—Ç–∏ –∞–≥–µ–Ω—Ç–∞–º
            AssignNetworksToAgents();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            ResetAgents();
            
            // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –ø–æ–∫–æ–ª–µ–Ω–∏–∏
            Debug.Log($"{stats_log_prefix} üöÄ –ü–æ–∫–æ–ª–µ–Ω–∏–µ {current_generation} –∑–∞–ø—É—â–µ–Ω–æ! –ê–≥–µ–Ω—Ç–æ–≤: {agents.Count}");
        }
        
        // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
        private void EndGeneration()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—Å–µ –ª–∏ —Ñ–∏—Ç–Ω–µ—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞)
            bool allSameFitness = true;
            float firstFitness = float.MinValue;
            
            // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å-—Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
            foreach (var agent in agents)
            {
                if (agent == null) continue;
                
                float fitness = agent.GetFitness();
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ñ–∏—Ç–Ω–µ—Å—ã
                if (firstFitness == float.MinValue)
                {
                    firstFitness = fitness;
                }
                else if (Math.Abs(fitness - firstFitness) > 0.01f)
                {
                    allSameFitness = false;
                }
                
                // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏—Ç–Ω–µ—Å –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                Debug.Log($"üîç –ê–≥–µ–Ω—Ç {agent.name}: —Ñ–∏—Ç–Ω–µ—Å = {fitness:F2}");
                
                int agent_index = agents.IndexOf(agent);
                
                if (agent_index < population.Count)
                {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å 200.02
                    if (Math.Abs(fitness - 200.02f) < 0.01f)
                    {
                        Debug.LogWarning($"‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô –§–ò–¢–ù–ï–° 200.02 —É –∞–≥–µ–Ω—Ç–∞ {agent.name}!");
                        
                        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏—Ç–Ω–µ—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∞–≥–µ–Ω—Ç–∞
                        try 
                        {
                            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å
                            float realFitness = agent.transform.position.magnitude; // –ö–∞–∫–æ–π-—Ç–æ –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π, –Ω–æ —Ä–∞–±–æ—á–∏–π —Ñ–∏—Ç–Ω–µ—Å
                            Debug.Log($"üîß –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å: {realFitness:F2}");
                            population[agent_index].fitness = realFitness;
                        }
                        catch (Exception e)
                        {
                            Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏—Ç–Ω–µ—Å–∞: {e.Message}");
                            // –ï—Å–ª–∏ –≤—Å—ë —Å–æ–≤—Å–µ–º –ø–ª–æ—Ö–æ, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å
                            population[agent_index].fitness = UnityEngine.Random.Range(0f, 100f);
                        }
                    }
                    else
                    {
                        // –ï—Å–ª–∏ —Ñ–∏—Ç–Ω–µ—Å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                        population[agent_index].fitness = fitness;
                    }
                }
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤—Å–µ —Ñ–∏—Ç–Ω–µ—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            if (allSameFitness && agents.Count > 1)
            {
                Debug.LogWarning($"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ñ–∏—Ç–Ω–µ—Å {firstFitness:F2}! –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –æ—à–∏–±–∫–∞!");
                
                // –ï—Å–ª–∏ –≤—Å–µ —Ñ–∏—Ç–Ω–µ—Å—ã —Ä–∞–≤–Ω—ã 200.02, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ–º –∏—Ö
                if (Math.Abs(firstFitness - 200.02f) < 0.01f)
                {
                    Debug.LogWarning("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù –ú–ê–ì–ò–ß–ï–°–ö–ò–ô –§–ò–¢–ù–ï–° 200.02! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–Ω–¥–æ–º–∏–∑–∏—Ä—É–µ–º —Ñ–∏—Ç–Ω–µ—Å—ã!");
                    for (int i = 0; i < population.Count; i++)
                    {
                        if (population[i] != null)
                        {
                            population[i].fitness = UnityEngine.Random.Range(0f, 100f);
                        }
                    }
                }
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É
            population = population.OrderByDescending(n => n.fitness).ToList();
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –≤—ã–≤–æ–¥–∏–º —Ñ–∏—Ç–Ω–µ—Å—ã –ø–µ—Ä–≤—ã—Ö 5 —Å–µ—Ç–µ–π –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            for (int i = 0; i < Mathf.Min(5, population.Count); i++)
            {
                Debug.Log($"üîç –ü–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, —Å–µ—Ç—å #{i} –∏–º–µ–µ—Ç —Ñ–∏—Ç–Ω–µ—Å: {population[i].fitness:F2}");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ –ø–æ–ø—É–ª—è—Ü–∏–∏
            if (population.Count > 0)
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª—É—á—à–µ–π —Å–µ—Ç–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
                if (population[0] != null && population[0].layers != null && population[0].layers.Length >= 2)
                {
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é —Å–µ—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –ª—É—á—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π
                    if (population[0].fitness > best_fitness_ever)
                    {
                        float oldBest = best_fitness_ever;
                        best_fitness_ever = population[0].fitness;
                        // –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                        best_network = population[0].Clone();
                        
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∏
                        if (best_network != null && best_network.layers != null && best_network.layers.Length >= 2)
                        {
                            Debug.Log($"{stats_log_prefix} üèÜ –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥! –§–∏—Ç–Ω–µ—Å —É–ª—É—á—à–µ–Ω —Å {oldBest:F2} –¥–æ {best_fitness_ever:F2}");
                            
                            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–æ–≤–æ–º —Ä–µ–∫–æ—Ä–¥–µ
                            int roundedFitness = Mathf.RoundToInt(best_fitness_ever);
                            string bestFilename = $"best_gen{current_generation}_fit{roundedFitness}.json";
                            SaveBestNetwork(bestFilename);
                            Debug.Log($"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª—É—á—à–∞—è —Å–µ—Ç—å —Å —Ñ–∏—Ç–Ω–µ—Å–æ–º {best_fitness_ever:F2}");
                        }
                        else
                        {
                            Debug.LogError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª—É—á—à–µ–π —Å–µ—Ç–∏! –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.");
                            best_network = new NeuralNetwork(neural_layers);
                            best_network.fitness = best_fitness_ever;
                        }
                    }
                    
                    // –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –ª—É—á—à–µ–π —Å–µ—Ç–∏, —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ª—É—á—à–µ–π –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
                    if (best_network == null)
                    {
                        if (population[0] != null && population[0].layers != null && population[0].layers.Length >= 2)
                        {
                            best_network = population[0].Clone();
                        }
                        else
                        {
                            // –ï—Å–ª–∏ –¥–∞–∂–µ –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Å–µ—Ç–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                            Debug.LogWarning("‚ö†Ô∏è –í –ø–æ–ø—É–ª—è—Ü–∏–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Å–µ—Ç–∏! –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.");
                            best_network = new NeuralNetwork(neural_layers);
                        }
                    }
                }
                else
                {
                    Debug.LogError("‚ùå –õ—É—á—à–∞—è —Å–µ—Ç—å –≤ –ø–æ–ø—É–ª—è—Ü–∏–∏ –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É! –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é.");
                    best_network = new NeuralNetwork(neural_layers);
                }
            }
            else
            {
                Debug.LogError("‚ùå –ü–æ–ø—É–ª—è—Ü–∏—è –ø—É—Å—Ç–∞! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ª—É—á—à—É—é —Å–µ—Ç—å.");
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Ç—å, –µ—Å–ª–∏ –ø–æ–ø—É–ª—è—Ü–∏—è –ø—É—Å—Ç–∞
                best_network = new NeuralNetwork(neural_layers);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            float avgFitness = population.Count > 0 ? population.Average(n => n.fitness) : 0;
            fitness_history.Add(avgFitness);
            success_history.Add(successful_agents);
            
            // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –ø–æ–∫–æ–ª–µ–Ω–∏–∏
            if (show_detailed_logs)
            {
                // –°–æ–±–∏—Ä–∞–µ–º —Ç–æ–ø-3 —Ñ–∏—Ç–Ω–µ—Å-–∑–Ω–∞—á–µ–Ω–∏—è
                string topFitnesses = "";
                for (int i = 0; i < Mathf.Min(3, population.Count); i++)
                {
                    topFitnesses += $"#{i+1}: {population[i].fitness:F2}; ";
                }
                
                // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                float fitnessImprovement = fitness_history.Count > 1 
                    ? avgFitness - fitness_history[fitness_history.Count - 2] 
                    : 0;
                    
                string fitnessChange = fitnessImprovement > 0 
                    ? $"‚ÜóÔ∏è +{fitnessImprovement:F2}" 
                    : fitnessImprovement < 0 
                        ? $"‚ÜòÔ∏è {fitnessImprovement:F2}" 
                        : "‚Üí 0.00";
                
                Debug.Log($"{stats_log_prefix} üìä –ò–¢–û–ì–ò –ü–û–ö–û–õ–ï–ù–ò–Ø {current_generation}" +
                    $"\n‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {successful_agents}/{agents.Count} ({(float)successful_agents/agents.Count:P1})" +
                    $"\nüìà –°—Ä–µ–¥–Ω–∏–π —Ñ–∏—Ç–Ω–µ—Å: {avgFitness:F2} {fitnessChange}" + 
                    $"\nü•á –¢–æ–ø —Ñ–∏—Ç–Ω–µ—Å: {topFitnesses}" +
                    $"\nüèÜ –†–µ–∫–æ—Ä–¥ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {best_fitness_ever:F2}" +
                    $"\n‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–æ–ª–µ–Ω–∏—è: {generation_timer:F1} —Å–µ–∫" +
                    $"\nüíæ –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {Path.Combine(Application.dataPath, models_directory)}");
            }
            else
            {
                Debug.Log($"{stats_log_prefix} –ü–æ–∫–æ–ª–µ–Ω–∏–µ {current_generation} –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—Ö–æ–≤: {successful_agents}, –°—Ä–µ–¥–Ω–∏–π —Ñ–∏—Ç–Ω–µ—Å: {fitness_history.Last():F2}");
            }
        }
        
        // –≠–≤–æ–ª—é—Ü–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        private List<NeuralNetwork> EvolvePoplation()
        {
            List<NeuralNetwork> new_population = new List<NeuralNetwork>();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–≤–æ–ª—é—Ü–∏–∏
            AdaptEvolutionParameters();
            
            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ñ–∏—Ç–Ω–µ—Å –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–µ—Ä–µ–¥ —ç–≤–æ–ª—é—Ü–∏–µ–π
            float avgFitnessBefore = population.Average(n => n.fitness);
            float diversityBefore = CalculatePopulationDiversity();
            Debug.Log($"üß¨ –≠–≤–æ–ª—é—Ü–∏—è: —Å—Ä–µ–¥–Ω–∏–π —Ñ–∏—Ç–Ω–µ—Å –¥–æ = {avgFitnessBefore:F2}, —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ = {diversityBefore:F2}");
            
            // –≠–ª–∏—Ç–∞—Ä–Ω—ã–π –æ—Ç–±–æ—Ä - –ª—É—á—à–∏–µ —Å–µ—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥—è—Ç –Ω–∞–ø—Ä—è–º—É—é
            if (elite_selection && elite_count > 0)
            {
                int actual_elite = Mathf.Min(elite_count, population.Count);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–∏—Ö –æ—Å–æ–±–µ–π –≤ –Ω–æ–≤—É—é –ø–æ–ø—É–ª—è—Ü–∏—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                for (int i = 0; i < actual_elite; i++)
                {
                    new_population.Add(population[i].Clone());
                    Debug.Log($"üèÜ –≠–ª–∏—Ç–Ω–∞—è –æ—Å–æ–±—å #{i+1} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –§–∏—Ç–Ω–µ—Å: {population[i].fitness:F2}");
                }
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ–ø—É–ª—è—Ü–∏–∏ –Ω–æ–≤—ã–º–∏ –æ—Å–æ–±—è–º–∏ —á–µ—Ä–µ–∑ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä –∏ –º—É—Ç–∞—Ü–∏—é
            while (new_population.Count < population_size)
            {
                try
                {
                    // –í—ã–±–∏—Ä–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ–ª–µ–∫—Ü–∏—é
                    NeuralNetwork parent1 = TournamentSelection();
                    NeuralNetwork parent2 = TournamentSelection();
                    
                    // –°–∫—Ä–µ—â–∏–≤–∞–µ–º
                    NeuralNetwork child = NeuralNetwork.Crossover(parent1, parent2);
                    
                    // –ú—É—Ç–∏—Ä—É–µ–º —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    child.Mutate(mutation_rate, mutation_strength);
                    
                    // –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –º—É—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è, –µ—Å–ª–∏ –ø–æ–ø—É–ª—è—Ü–∏—è –∑–∞—Å—Ç—Ä—è–ª–∞
                    if (UnityEngine.Random.value < 0.1f)
                    {
                        // –ë–æ–ª–µ–µ —Å–∏–ª—å–Ω–∞—è –º—É—Ç–∞—Ü–∏—è –¥–ª—è 10% –æ—Å–æ–±–µ–π
                        child.Mutate(mutation_rate * 2f, mutation_strength * 1.5f);
                    }
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å –Ω–æ–≤–æ–π –æ—Å–æ–±–∏ –¥–æ 0, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–ª —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π
                    child.fitness = 0f;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤—É—é –ø–æ–ø—É–ª—è—Ü–∏—é
                    new_population.Add(child);
                }
                catch (Exception e)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–º–∫–∞: {e.Message}");
                    
                    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å–µ—Ç—å –≤–º–µ—Å—Ç–æ –ø–æ—Ç–æ–º–∫–∞
                    GeneticAlgorithm genetic = new GeneticAlgorithm();
                    genetic.neural_layers = neural_layers;
                    NeuralNetwork randomNetwork = genetic.CreateRandomNetwork();
                    randomNetwork.fitness = 0f; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å –Ω–æ–≤–æ–π —Å–ª—É—á–∞–π–Ω–æ–π —Å–µ—Ç–∏
                    new_population.Add(randomNetwork);
                }
            }
            
            // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–π –ø–æ–ø—É–ª—è—Ü–∏–∏
            Debug.Log($"üß¨ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ #{current_generation}. " +
                      $"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –º—É—Ç–∞—Ü–∏—è = {mutation_rate:F2}, —Å–∏–ª–∞ –º—É—Ç–∞—Ü–∏–∏ = {mutation_strength:F2}");
            
            // –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—ã–≤–æ–¥–∏–º —Ñ–∏—Ç–Ω–µ—Å—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–æ–≤
            for (int i = 0; i < Mathf.Min(5, new_population.Count); i++)
            {
                Debug.Log($"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ñ–∏—Ç–Ω–µ—Å–∞: –°–µ—Ç—å #{i} = {new_population[i].fitness:F2}");
            }
            
            return new_population;
        }
        
        // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —ç–≤–æ–ª—é—Ü–∏–∏
        private void AdaptEvolutionParameters()
        {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π –ø–æ–ø—É–ª—è—Ü–∏–∏
            float avgFitness = population.Average(n => n.fitness);
            float maxFitness = population.Max(n => n.fitness);
            float diversityScore = CalculatePopulationDiversity();
            
            // –õ–æ–≥–∏–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –º—É—Ç–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (diversityScore < 0.1f) // –ù–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
            {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º—É—Ç–∞—Ü–∏—é –¥–ª—è —Å—Ç–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                mutation_rate = Mathf.Min(mutation_rate * 1.2f, 0.3f);
                mutation_strength = Mathf.Min(mutation_strength * 1.1f, 0.7f);
                Debug.Log($"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∏–∑–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ ({diversityScore:F2})! " +
                          $"–ü–æ–≤—ã—à–∞–µ–º –º—É—Ç–∞—Ü–∏—é –¥–æ {mutation_rate:F2}");
            }
            else if (diversityScore > 0.4f) // –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
            {
                // –°–Ω–∏–∂–∞–µ–º –º—É—Ç–∞—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
                mutation_rate = Mathf.Max(mutation_rate * 0.9f, 0.05f);
                mutation_strength = Mathf.Max(mutation_strength * 0.95f, 0.3f);
                Debug.Log($"‚ÑπÔ∏è –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–æ–ø—É–ª—è—Ü–∏–∏ ({diversityScore:F2}). " +
                          $"–°–Ω–∏–∂–∞–µ–º –º—É—Ç–∞—Ü–∏—é –¥–æ {mutation_rate:F2}");
            }
            
            // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–∫–æ–ª–µ–Ω–∏—è
            int tournament_size = 3; // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
            if (current_generation > 10)
            {
                tournament_size = 4; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ–ª–µ–∫—Ü–∏–æ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
            }
            if (current_generation > 20)
            {
                tournament_size = 5; // –ï—â—ë —Å–∏–ª—å–Ω–µ–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ü–∏–∏
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ–ª–µ–∫—Ü–∏–∏
            tournament_selection_size = tournament_size;
        }
        
        // –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –ø–æ–ø—É–ª—è—Ü–∏–∏
        private float CalculatePopulationDiversity()
        {
            if (population.Count <= 1) return 0;
            
            float totalDifference = 0;
            int comparisons = 0;
            
            // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ—Ç—å —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –¥—Ä—É–≥–∏–º–∏ (–Ω–µ —Å–æ –≤—Å–µ–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
            for (int i = 0; i < population.Count; i++)
            {
                for (int j = i + 1; j < Mathf.Min(i + 5, population.Count); j++)
                {
                    totalDifference += CalculateNetworkDifference(population[i], population[j]);
                    comparisons++;
                }
            }
            
            if (comparisons == 0) return 0;
            return totalDifference / comparisons;
        }
        
        // –†–∞—Å—á–µ—Ç —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏
        private float CalculateNetworkDifference(NeuralNetwork net1, NeuralNetwork net2)
        {
            if (net1 == null || net2 == null) return 1.0f; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑–ª–∏—á–∏–µ
            
            // –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Ä–∞–∑–ª–∏—á–∏—è - –¥–æ–ª—è —Ä–∞–∑–ª–∏—á–∞—é—â–∏—Ö—Å—è –≤–µ—Å–æ–≤
            int totalWeights = 0;
            int differentWeights = 0;
            float differenceThreshold = 0.1f; // –ü–æ—Ä–æ–≥, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –≤–µ—Å–∞ —Å—á–∏—Ç–∞—é—Ç—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏
            
            // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–ª–æ—è–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å–∞ (—Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ [—Å–ª–æ–π][–Ω–µ–π—Ä–æ–Ω][–≤–µ—Å])
            for (int i = 0; i < net1.weights.Length && i < net2.weights.Length; i++)
            {
                for (int j = 0; j < net1.weights[i].Length && j < net2.weights[i].Length; j++)
                {
                    for (int k = 0; k < net1.weights[i][j].Length && k < net2.weights[i][j].Length; k++)
                    {
                        totalWeights++;
                        if (Mathf.Abs(net1.weights[i][j][k] - net2.weights[i][j][k]) > differenceThreshold)
                        {
                            differentWeights++;
                        }
                    }
                }
            }
            
            if (totalWeights == 0) return 1.0f;
            return (float)differentWeights / totalWeights;
        }
        
        // –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ–ª–µ–∫—Ü–∏—è
        private int tournament_selection_size = 3; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        
        private NeuralNetwork TournamentSelection(int tournament_size = -1)
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –±–∞–∑–æ–≤—ã–π
            if (tournament_size <= 0)
            {
                tournament_size = tournament_selection_size;
            }
            
            NeuralNetwork best = null;
            float best_fitness = float.MinValue;
            
            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–¥–≥—Ä—É–ø–ø—É —Å–µ—Ç–µ–π –∏ –Ω–∞—Ö–æ–¥–∏–º –ª—É—á—à—É—é
            for (int i = 0; i < tournament_size; i++)
            {
                int random_index = UnityEngine.Random.Range(0, population.Count);
                if (best == null || population[random_index].fitness > best_fitness)
                {
                    best = population[random_index];
                    best_fitness = best.fitness;
                }
            }
            
            return best;
        }
        
        // –°–±—Ä–æ—Å –∞–≥–µ–Ω—Ç–æ–≤ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ
        private void ResetAgents()
        {
            Vector3 spawnPosition = spawn_point != null ? spawn_point.position : Vector3.zero;
            
            // –ù–û–í–´–ô –ü–û–î–•–û–î: –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö
            Debug.Log($"üîÑ –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫–æ–ª–µ–Ω–∏—è {current_generation}. –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ...");
            
            // –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –ø—Ä–µ—Ñ–∞–±
            GameObject prefab = Resources.Load<GameObject>(agent_prefab_path);
            if (prefab == null)
            {
                Debug.LogError($"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Ñ–∞–± –ø–æ –ø—É—Ç–∏ 'Resources/{agent_prefab_path}'");
                StopSimulation();
                return;
            }
            
            // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            var allAgentsInScene = FindObjectsOfType<NeuroHuman>();
            Debug.Log($"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {allAgentsInScene.Length} –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã—Ö)");
            
            foreach (var agent in allAgentsInScene)
            {
                if (agent != null)
                {
                    Destroy(agent.gameObject);
                }
            }
            
            // –î–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            StartCoroutine(DelayedAgentRespawn());
        }
        
        // –ö–æ—Ä—É—Ç–∏–Ω–∞ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Ä–µ—Å–ø–∞–≤–Ω–∞ –∞–≥–µ–Ω—Ç–æ–≤ - –¥–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö
        private IEnumerator DelayedAgentRespawn()
        {
            // –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–¥—Ä–æ–≤, —á—Ç–æ–±—ã —Å—Ç–∞—Ä—ã–µ –∞–≥–µ–Ω—Ç—ã —Ç–æ—á–Ω–æ –±—ã–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã
            yield return new WaitForEndOfFrame();
            yield return new WaitForEndOfFrame();
            
            Vector3 spawnPosition = spawn_point != null ? spawn_point.position : Vector3.zero;
            
            // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
            agents.Clear();
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
            for (int i = 0; i < population_size; i++)
            {
                try
                {
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ —Ç–æ—á–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Å–ø–∞–≤–Ω–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    NeuroHuman agent = SpawnSingleAgent(i, spawnPosition);
                    
                if (agent != null)
                {
                        agents.Add(agent);
                        agent.SetSimulationManager(this);
                        
                        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∏–∑ –ø–æ–ø—É–ª—è—Ü–∏–∏
                        if (i < population.Count)
                        {
                            agent.SetNeuralNetwork(population[i]);
                            agent.SetStartTime(Time.time);
                            
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∏–ª—É –∞–≥–µ–Ω—Ç—É
                            SetAgentMaxForce(agent, max_agent_force);
                        }
                    }
                    else
                    {
                        Debug.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞ #{i} –ø—Ä–∏ —Å–±—Ä–æ—Å–µ!");
                    }
                }
                catch (Exception e)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–≥–µ–Ω—Ç–∞ #{i}: {e.Message}");
                }
            }
            
            Debug.Log($"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–Ω–æ–≤–æ {agents.Count} –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∫–æ–ª–µ–Ω–∏—è {current_generation}");
            
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –¢–û–ü-5 –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
            HighlightTopAgents();
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        private NeuroHuman SpawnSingleAgent(int index, Vector3 centerPosition)
        {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Ñ–∞–± –∏–∑ Resources
            GameObject prefab = Resources.Load<GameObject>(agent_prefab_path);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ—Ñ–∞–±–∞
            if (prefab == null)
            {
                Debug.LogError($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ—Ñ–∞–± –∞–≥–µ–Ω—Ç–∞ –ø–æ –ø—É—Ç–∏ 'Resources/{agent_prefab_path}'!");
                return null;
            }
            
            // –í–º–µ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è, –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º —Å—Ç—Ä–æ–π –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Å–µ—Ç–∫—É
            int agentsPerRow = agents_per_row; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
            int row = index / agentsPerRow;
            int col = index % agentsPerRow;
            
            // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
            float spacing = agent_spacing;
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞, —á—Ç–æ–±—ã —Å—Ç—Ä–æ–π –±—ã–ª —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            float totalWidth = (agentsPerRow - 1) * spacing;
            float startX = -totalWidth / 2; // –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ X
            
            // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Å—Ç—Ä–æ—é
            Vector3 formationOffset = new Vector3(
                startX + col * spacing,  // X –ø–æ–∑–∏—Ü–∏—è (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
                0,                       // Y –ø–æ–∑–∏—Ü–∏—è (–≤—ã—Å–æ—Ç–∞)
                row * spacing            // Z –ø–æ–∑–∏—Ü–∏—è (—Å–ø–µ—Ä–µ–¥–∏ –Ω–∞–∑–∞–¥)
            );
            
            // –ò—Ç–æ–≥–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è = —Ü–µ–Ω—Ç—Ä + —Å–º–µ—â–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ—é
            Vector3 spawnPosition = centerPosition + formationOffset;
            
            // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–≤–æ—Ä–æ—Ç –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ - –ª–∏—Ü–æ–º –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
            Quaternion spawnRotation = Quaternion.Euler(0, 0, 0); // –°–º–æ—Ç—Ä—è—Ç –≤–ø–µ—Ä–µ–¥ –ø–æ Z
            
            // –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
            GameObject agentObject = Instantiate(prefab, spawnPosition, spawnRotation);
            agentObject.name = $"Agent_{index:D3}";
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç NeuroHuman
            NeuroHuman neuroHuman = agentObject.GetComponent<NeuroHuman>();
            if (neuroHuman == null)
            {
                Debug.LogWarning($"‚ö†Ô∏è –£ –ø—Ä–µ—Ñ–∞–±–∞ {prefab.name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç NeuroHuman!");
            }
            
            return neuroHuman;
        }
        
        // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–∑–≤–Ω–µ
        
        // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        public int[] GetNeuralLayers()
        {
            return neural_layers;
        }
        
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏–∑ NeuroHuman
        public void UpdateNetworkStructure(int[] newLayers)
        {
            if (newLayers == null || newLayers.Length < 2)
            {
                Debug.LogError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏! –ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –≤—Ö–æ–¥–Ω–æ–π –∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π!");
                return;
            }

            neural_layers = new int[newLayers.Length];
            for (int i = 0; i < newLayers.Length; i++)
            {
                neural_layers[i] = newLayers[i];
            }
            
            Debug.Log($"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {string.Join(", ", neural_layers)}");
            
            // –ï—Å–ª–∏ —Å–∏–º—É–ª—è—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            if (simulation_running)
            {
                Debug.Log("‚ö†Ô∏è –°–∏–º—É–ª—è—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞, –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π...");
                InitializePopulation();
                ResetAgents();
            }
        }
        
        // –û—Ç—á–µ—Ç –æ–± —É—Å–ø–µ—Ö–µ –æ—Ç –∞–≥–µ–Ω—Ç–∞
        public void ReportSuccess(NeuroHuman agent)
        {
            if (agent == null) return;
            
            try 
            {
                successful_agents++;
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å –∞–≥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏
                float currentFitness = agent.GetFitness();
                currentFitness += 100f; // –ë–æ–Ω—É—Å –∑–∞ —É—Å–ø–µ—Ö
                agent.SetFitness(currentFitness);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏—Ç–Ω–µ—Å –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∞–≥–µ–Ω—Ç–∞
                NeuralNetwork agentBrain = agent.GetBrain();
                if (agentBrain != null) 
                {
                    agentBrain.fitness = currentFitness;
                    
                    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –∞–≥–µ–Ω—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
                    int agentIndex = agents.IndexOf(agent);
                    if (agentIndex >= 0 && agentIndex < population.Count)
                    {
                        population[agentIndex] = agentBrain; // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤ –ø–æ–ø—É–ª—è—Ü–∏–∏
                    }
                }
                
                // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –∞–≥–µ–Ω—Ç–µ
                Debug.Log($"üèÜ –£–°–ü–ï–• #{successful_agents} –í –ü–û–ö–û–õ–ï–ù–ò–ò {current_generation}!" +
                    $"\nüë§ –ê–≥–µ–Ω—Ç: {agent.name}" +
                    $"\n‚≠ê –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∏—Ç–Ω–µ—Å: {currentFitness:F2}" + 
                    $"\n‚è±Ô∏è –í—Ä–µ–º—è –∂–∏–∑–Ω–∏: {Time.time - agent.GetStartTime():F2} —Å–µ–∫" +
                    $"\nüß† –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏: [{string.Join(", ", GetNeuralLayers())}]");
                
                // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—Ö –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é —Å–µ—Ç—å
                if (successful_agents == 1)
                {
                    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–µ—Ä–µ–¥ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ç–∏
                    if (agentBrain != null && agentBrain.layers != null && agentBrain.layers.Length >= 2)
                    {
                        best_network = agentBrain.Clone();
                        best_fitness_ever = currentFitness;
                        
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é —Å–µ—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                        SaveBestNetwork($"best_network_gen{current_generation}.json");
                        
                        Debug.Log($"üíæ –õ—É—á—à–∞—è —Å–µ—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–ø–æ–∫–æ–ª–µ–Ω–∏–µ {current_generation})");
                    }
                    else
                    {
                        Debug.LogError($"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Ç—å –æ—Ç –∞–≥–µ–Ω—Ç–∞ {agent.name}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!");
                    }
                }
                
                // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –ø–æ–ª–æ–≤–∏–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–∫–æ–ª–µ–Ω–∏—é
                if (successful_agents >= agents.Count * 0.5f)
                {
                    Debug.Log($"üöÄ –£—Å–ø–µ—à–Ω–æ –±–æ–ª–µ–µ –ø–æ–ª–æ–≤–∏–Ω—ã –∞–≥–µ–Ω—Ç–æ–≤ ({successful_agents}/{agents.Count})! –î–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–æ–∫–æ–ª–µ–Ω–∏–µ.");
                    EndGeneration();
                    StartNextGeneration();
                }
            }
            catch (Exception e)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ ReportSuccess: {e.Message}\n{e.StackTrace}");
            }
        }
        
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ç–∏–ø–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        public void ReportSuccess(Neuro agent)
        {
            // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
            Debug.Log("üë¥ –í—ã–∑–≤–∞–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ ReportSuccess –¥–ª—è Neuro");
            successful_agents++;
        }
        
        // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
        public int GetCurrentGeneration()
        {
            return current_generation;
        }
        
        // –ü–æ–ª—É—á–∏—Ç—å –ª—É—á—à—É—é —Å–µ—Ç—å
        public NeuralNetwork GetBestNetwork()
        {
            return best_network?.Clone();
        }
        
        // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É—Å–ø–µ—Ö–æ–≤
        public List<int> GetSuccessHistory()
        {
            return new List<int>(success_history);
        }
        
        // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ñ–∏—Ç–Ω–µ—Å–∞
        public List<float> GetFitnessHistory()
        {
            return new List<float>(fitness_history);
        }
        
        // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å TrainingUI
        public List<GameObject> GetActiveAgents()
        {
            List<GameObject> result = new List<GameObject>();
            foreach (var agent in agents)
            {
                if (agent != null)
                {
                    result.Add(agent.gameObject);
                }
            }
            return result;
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—É—á—à–µ–π —Å–µ—Ç–∏ –≤ —Ñ–∞–π–ª
        public void SaveBestNetwork(string filename = null)
        {
            if (best_network == null)
            {
                Debug.LogWarning("‚ö†Ô∏è –ù–µ—Ç –ª—É—á—à–µ–π —Å–µ—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!");
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ç–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            if (best_network.layers == null || best_network.layers.Length < 2)
            {
                Debug.LogError($"‚ö†Ô∏è –õ—É—á—à–∞—è —Å–µ—Ç—å –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ª–æ—ë–≤! Layers: {(best_network.layers == null ? "null" : best_network.layers.Length.ToString())}");
                
                // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if (neural_layers != null && neural_layers.Length >= 2)
                {
                    Debug.Log("üõ†Ô∏è –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ç–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...");
                    best_network = new NeuralNetwork(neural_layers);
                    best_network.Randomize();
                    best_network.fitness = 0;
                }
                else
                {
                    Debug.LogError("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ç–∏! –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.");
                    return;
                }
            }

            if (string.IsNullOrEmpty(filename))
            {
                filename = best_model_filename;
            }

            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                string directoryPath = Path.Combine(Application.dataPath, models_directory);
                
                Debug.Log($"üîç –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {directoryPath}");
                
                // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                if (!Directory.Exists(directoryPath))
                {
                    Debug.Log($"üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {directoryPath}");
                    Directory.CreateDirectory(directoryPath);
                }
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                string filePath = Path.Combine(directoryPath, filename);
                
                // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤ JSON
                string jsonData = SerializeNetworkToJson(best_network);
                
                if (string.IsNullOrEmpty(jsonData))
                {
                    Debug.LogError($"‚ùå –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∏ –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É! –û—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.");
                    return;
                }
                
                // –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä JSON –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                Debug.Log($"üìä –†–∞–∑–º–µ—Ä —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ç–∏: {jsonData.Length} –±–∞–π—Ç");
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
                File.WriteAllText(filePath, jsonData);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
                if (File.Exists(filePath))
                {
                    Debug.Log($"üíæ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤: {filePath}");
                    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ GUI
                    last_saved_file = filename;
                    last_saved_time = Time.time;
                }
                else
                {
                    Debug.LogError($"‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–ø–∏—Å–∏: {filePath}");
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º Flush, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –¥–∏—Å–∫
                // (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö)
                var fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Write);
                fileStream.Flush(true);
                fileStream.Close();
            }
            catch (Exception e)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ—Ç–∏: {e.Message}\n{e.StackTrace}");
            }
        }
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–∑–∞–≥—Ä—É–∑–∫–µ
        private string last_saved_file = "";
        private float last_saved_time = 0;
        private string last_loaded_file = "";
        private bool network_loaded_at_start = false;
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ª—É—á—à–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞ (–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞)
        private bool LoadBestNetworkFromFile()
        {
            if (network_loaded_at_start)
            {
                // –ï—Å–ª–∏ —Å–µ—Ç—å —É–∂–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë —Å–Ω–æ–≤–∞
                Debug.Log("‚ö†Ô∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å —É–∂–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Ä–∞–Ω–µ–µ, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.");
                return true;
            }
            
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ç—å –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç
            NeuralNetwork network = null;
            
            // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ snapshots
            string snapshotsPath = Path.Combine(Application.dataPath, models_directory);
            if (Directory.Exists(snapshotsPath))
            {
                // –ò—â–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                string[] files = Directory.GetFiles(snapshotsPath, "*.json");
                
                Debug.Log($"üìÅ –ù–∞–π–¥–µ–Ω–æ {files.Length} —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π –≤ {snapshotsPath}");
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π (—Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –¥–∞—Ç–æ–π –∏–∑–º–µ–Ω–µ–Ω–∏—è)
                if (files.Length > 0)
                {
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
                    Array.Sort(files, (a, b) => File.GetLastWriteTime(b).CompareTo(File.GetLastWriteTime(a)));
                    
                    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                    string latestFile = files[0];
                    Debug.Log($"üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª: {Path.GetFileName(latestFile)}");
                    
                    try
                    {
                        string json = File.ReadAllText(latestFile);
                        network = DeserializeNetworkFromJson(json);
                        
                        if (network != null)
                        {
                            Debug.Log($"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å–µ—Ç—å –∏–∑ {Path.GetFileName(latestFile)}");
                            best_network = network;
                            last_loaded_file = Path.GetFileName(latestFile);
                            network_loaded_at_start = true;
                            return true;
                        }
                    }
                    catch (Exception e)
                    {
                        Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {latestFile}: {e.Message}");
                    }
                }
            }
            
            // 2. –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ snapshots, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
            network = LoadBestNetwork();
            
            if (network != null)
            {
                best_network = network;
                last_loaded_file = "best_network.json";
                network_loaded_at_start = true;
                return true;
            }
            
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞
            network_loaded_at_start = false;
            return false;
        }
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ª—É—á—à–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
        public NeuralNetwork LoadBestNetwork()
        {
            string filePath = Application.dataPath + "/Resources/Agents/best_network.json";
            
            if (!File.Exists(filePath))
            {
                Debug.LogWarning($"–§–∞–π–ª —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω: {filePath}");
                return null;
            }

            try
            {
                // –ß–∏—Ç–∞–µ–º JSON –∏–∑ —Ñ–∞–π–ª–∞
                string json = File.ReadAllText(filePath);
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                NeuralNetwork network = DeserializeNetworkFromJson(json);
                
                if (network != null)
                {
                    Debug.Log($"–õ—É—á—à–∞—è —Å–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {filePath}: {network}");
                    return network;
                }
            }
            catch (Exception e)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ç–∏: {e.Message}\n{e.StackTrace}");
            }

            return null;
        }
        
        // –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ç–∏ –∏–∑ JSON
        private NeuralNetwork DeserializeNetworkFromJson(string json)
        {
            try
            {
                // –ü–∞—Ä—Å–∏–º JSON
                Dictionary<string, object> data = ParseJSONObject(json);
                
                if (data == null)
                {
                    Debug.LogError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON —Ñ–∞–π–ª–∞!");
                    return null;
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–ª–æ–µ–≤
                List<object> layersObj = data["layers"] as List<object>;
                if (layersObj == null)
                {
                    Debug.LogError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ—è—Ö –≤ JSON —Ñ–∞–π–ª–µ!");
                    return null;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ (–º–∏–Ω–∏–º—É–º 2)
                if (layersObj.Count < 2)
                {
                    Debug.LogError("–í –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–π —Å–µ—Ç–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–µ–≤ (–º–∏–Ω–∏–º—É–º 2)!");
                    return null;
                }

                int[] layers = new int[layersObj.Count];
                for (int i = 0; i < layersObj.Count; i++)
                {
                    layers[i] = Convert.ToInt32(layersObj[i]);
                    if (layers[i] <= 0)
                    {
                        Debug.LogError($"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–ª–æ—è {i}: {layers[i]} (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º)");
                        return null;
                    }
                }

                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å
                NeuralNetwork network = new NeuralNetwork(layers);

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å–∞
                List<object> weightsObj = data["weights"] as List<object>;
                if (weightsObj != null && weightsObj.Count == network.weights.Length)
                {
                    for (int i = 0; i < weightsObj.Count; i++)
                    {
                        List<object> layerWeights = weightsObj[i] as List<object>;
                        if (layerWeights != null && layerWeights.Count == network.weights[i].Length)
                        {
                            for (int j = 0; j < layerWeights.Count; j++)
                            {
                                List<object> neuronWeights = layerWeights[j] as List<object>;
                                if (neuronWeights != null && neuronWeights.Count == network.weights[i][j].Length)
                                {
                                    for (int k = 0; k < neuronWeights.Count; k++)
                                    {
                                        network.weights[i][j][k] = Convert.ToSingle(neuronWeights[k]);
                                    }
                }
                else
                {
                                    Debug.LogWarning($"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–µ—Å–æ–≤ –Ω–µ–π—Ä–æ–Ω–∞ {j} –≤ —Å–ª–æ–µ {i} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π!");
                                }
                            }
                        }
                        else
                        {
                            Debug.LogWarning($"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–µ—Å–æ–≤ —Å–ª–æ—è {i} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π!");
                        }
                    }
                }
                else
                {
                    Debug.LogWarning("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–µ—Å–æ–≤ –≤ JSON –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π!");
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–º–µ—â–µ–Ω–∏—è
                List<object> biasesObj = data["biases"] as List<object>;
                if (biasesObj != null && biasesObj.Count == network.biases.Length)
                {
                    for (int i = 0; i < biasesObj.Count; i++)
                    {
                        List<object> layerBiases = biasesObj[i] as List<object>;
                        if (layerBiases != null && layerBiases.Count == network.biases[i].Length)
                        {
                            for (int j = 0; j < layerBiases.Count; j++)
                            {
                                network.biases[i][j] = Convert.ToSingle(layerBiases[j]);
                }
            }
            else
            {
                            Debug.LogWarning($"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–º–µ—â–µ–Ω–∏–π –≤ —Å–ª–æ–µ {i} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π!");
                        }
                    }
                }
                else
                {
                    Debug.LogWarning("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–º–µ—â–µ–Ω–∏–π –≤ JSON –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π!");
                }

                // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å
                if (data.ContainsKey("fitness"))
                {
                    network.fitness = Convert.ToSingle(data["fitness"]);
                }

                return network;
            }
            catch (Exception e)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏: {e.Message}");
                return null;
            }
        }
        
        // –ü–∞—Ä—Å–µ—Ä JSON
        private Dictionary<string, object> ParseJSONObject(string json)
        {
            try
            {
                int index = 0;
                return ParseJSONObject(json, ref index);
            }
            catch (Exception e)
            {
                Debug.LogError($"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON: {e.Message}");
                return null;
            }
        }
        
        private Dictionary<string, object> ParseJSONObject(string json, ref int index)
        {
            Dictionary<string, object> result = new Dictionary<string, object>();
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –æ–±—ä–µ–∫—Ç–∞
            SkipWhitespace(json, ref index);
            
            if (index >= json.Length || json[index] != '{')
            {
                throw new Exception($"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Ñ–∏–≥—É—Ä–Ω–∞—è —Å–∫–æ–±–∫–∞ '{{', –ø–æ–ª—É—á–µ–Ω–æ: {(index < json.Length ? json[index].ToString() : "–∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏")}");
            }
            
            index++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {
            
            SkipWhitespace(json, ref index);
            
            // –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {}
            if (index < json.Length && json[index] == '}')
            {
                index++;
                return result;
            }
            
            while (index < json.Length)
            {
                SkipWhitespace(json, ref index);
                
                // –û–∂–∏–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ –∫–∞–≤—ã—á–∫–∞—Ö (–∫–ª—é—á)
                if (json[index] != '"')
                {
                    throw new Exception($"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –∫–∞–≤—ã—á–∫–∞ –¥–ª—è –∫–ª—é—á–∞, –ø–æ–ª—É—á–µ–Ω–æ: {json[index]}");
                }
                
                index++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "
                int startKey = index;
                
                // –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É
                while (index < json.Length && (json[index] != '"' || IsEscaped(json, index)))
                {
                    index++;
                }
                
                if (index >= json.Length)
                {
                    throw new Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–ª—é—á–∞");
                }
                
                string key = json.Substring(startKey, index - startKey);
                index++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "
                
                SkipWhitespace(json, ref index);
                
                // –û–∂–∏–¥–∞–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ
                if (index >= json.Length || json[index] != ':')
                {
                    throw new Exception($"–û–∂–∏–¥–∞–ª–æ—Å—å –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–æ—Å–ª–µ –∫–ª—é—á–∞, –ø–æ–ª—É—á–µ–Ω–æ: {(index < json.Length ? json[index].ToString() : "–∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏")}");
                }
                
                index++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º :
                
                // –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                object value = ParseJSONValue(json, ref index);
                result[key] = value;
                
                SkipWhitespace(json, ref index);
                
                // –ü–æ—Å–ª–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                if (index >= json.Length)
                {
                    throw new Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞");
                }
                
                if (json[index] == ',')
                {
                    index++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ,
                    continue;
                }
                else if (json[index] == '}')
                {
                    index++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º }
                    break;
                }
                else
                {
                    throw new Exception($"–û–∂–∏–¥–∞–ª–∞—Å—å –∑–∞–ø—è—Ç–∞—è –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Ñ–∏–≥—É—Ä–Ω–∞—è —Å–∫–æ–±–∫–∞, –ø–æ–ª—É—á–µ–Ω–æ: {json[index]}");
                }
            }
            
            return result;
        }
        
        private List<object> ParseJSONArray(string json, ref int index)
        {
            List<object> result = new List<object>();
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
            SkipWhitespace(json, ref index);
            
            if (index >= json.Length || json[index] != '[')
            {
                throw new Exception($"–û–∂–∏–¥–∞–ª–∞—Å—å –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è —Å–∫–æ–±–∫–∞ '[', –ø–æ–ª—É—á–µ–Ω–æ: {(index < json.Length ? json[index].ToString() : "–∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏")}");
            }
            
            index++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º [
            
            SkipWhitespace(json, ref index);
            
            // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ []
            if (index < json.Length && json[index] == ']')
            {
                index++;
                return result;
            }
            
            while (index < json.Length)
            {
                // –ß—Ç–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞
                object value = ParseJSONValue(json, ref index);
                result.Add(value);
                
                SkipWhitespace(json, ref index);
                
                // –ü–æ—Å–ª–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                if (index >= json.Length)
                {
                    throw new Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –º–∞—Å—Å–∏–≤–∞");
                }
                
                if (json[index] == ',')
                {
                    index++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ,
                    continue;
                }
                else if (json[index] == ']')
                {
                    index++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ]
                    break;
                }
                else
                {
                    throw new Exception($"–û–∂–∏–¥–∞–ª–∞—Å—å –∑–∞–ø—è—Ç–∞—è –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è —Å–∫–æ–±–∫–∞, –ø–æ–ª—É—á–µ–Ω–æ: {json[index]}");
                }
            }
            
            return result;
        }

        private object ParseJSONValue(string json, ref int index)
        {
            SkipWhitespace(json, ref index);
            
            if (index >= json.Length)
            {
                throw new Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è");
            }
            
            char c = json[index];
            
            if (c == '{')
            {
                return ParseJSONObject(json, ref index);
            }
            else if (c == '[')
            {
                return ParseJSONArray(json, ref index);
            }
            else if (c == '"')
            {
                index++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "
                int start = index;
                
                // –ò—â–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É
                while (index < json.Length && (json[index] != '"' || IsEscaped(json, index)))
                {
                    index++;
                }
                
                if (index >= json.Length)
                {
                    throw new Exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏");
                }
                
                string value = json.Substring(start, index - start);
                index++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "
                
                return value;
            }
            else if (char.IsDigit(c) || c == '-' || c == '+' || c == '.')
            {
                return ParseJSONNumber(json, ref index);
            }
            else if (json.Length - index >= 4 && json.Substring(index, 4) == "true")
            {
                index += 4;
                return true;
            }
            else if (json.Length - index >= 5 && json.Substring(index, 5) == "false")
            {
                index += 5;
                return false;
            }
            else if (json.Length - index >= 4 && json.Substring(index, 4) == "null")
            {
                index += 4;
                return null;
            }
            else
            {
                throw new Exception($"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è: {c}");
            }
        }

        private object ParseJSONNumber(string json, ref int index)
        {
            int start = index;
            bool isFloat = false;
            
            // –ß–∏—Ç–∞–µ–º —á–∏—Å–ª–æ
            while (index < json.Length)
            {
                char c = json[index];
                
                if (char.IsDigit(c) || c == '-' || c == '+' || c == 'e' || c == 'E')
                {
                    index++;
                }
                else if (c == '.')
                {
                    isFloat = true;
                    index++;
                }
                else
                {
                    break;
                }
            }
            
            string numStr = json.Substring(start, index - start);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ
            if (isFloat)
            {
                if (float.TryParse(numStr, NumberStyles.Float, CultureInfo.InvariantCulture, out float floatVal))
                {
                    return floatVal;
                }
            }
            else
            {
                if (int.TryParse(numStr, out int intVal))
                {
                    return intVal;
                }
            }
            
            throw new Exception($"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —á–∏—Å–ª–æ: {numStr}");
        }

        private void SkipWhitespace(string json, ref int index)
        {
            while (index < json.Length && char.IsWhiteSpace(json[index]))
            {
                index++;
            }
        }

        private bool IsEscaped(string json, int index)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–≤—ã—á–∫–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞
            int count = 0;
            int i = index - 1;
            
            while (i >= 0 && json[i] == '\\')
            {
                count++;
                i--;
            }
            
            return count % 2 != 0; // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–µ—à–µ–π –Ω–µ—á–µ—Ç–Ω–æ–µ, –∫–∞–≤—ã—á–∫–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞
        }

        // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ JSON
        private string SerializeNetworkToJson(NeuralNetwork network)
        {
            if (network == null || network.layers == null || network.layers.Length < 2)
            {
                Debug.LogError($"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–ª–æ—ë–≤. Network: {(network == null ? "null" : "not null")}, Layers: {(network?.layers == null ? "null" : network.layers.Length.ToString())}");
                return null;
            }

            try
            {
                // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–æ–∫–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON –≤—Ä—É—á–Ω—É—é
                System.Text.StringBuilder sb = new System.Text.StringBuilder();
                sb.Append("{\n");
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∏
                sb.Append("\"layers\": [");
                for (int i = 0; i < network.layers.Length; i++)
                {
                    sb.Append(network.layers[i]);
                    if (i < network.layers.Length - 1)
                        sb.Append(", ");
                }
                sb.Append("],\n");
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏—Ç–Ω–µ—Å
                sb.Append($"\"fitness\": {network.fitness.ToString(System.Globalization.CultureInfo.InvariantCulture)},\n");
                
                // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤–µ—Å–∞ (—Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤)
                sb.Append("\"weights\": [\n");
                for (int i = 0; i < network.weights.Length; i++)
                {
                    sb.Append("  [\n");
                    
                    for (int j = 0; j < network.weights[i].Length; j++)
                    {
                        sb.Append("    [");
                        
                        for (int k = 0; k < network.weights[i][j].Length; k++)
                        {
                            sb.Append(network.weights[i][j][k].ToString(System.Globalization.CultureInfo.InvariantCulture));
                            if (k < network.weights[i][j].Length - 1)
                                sb.Append(", ");
                        }
                        
                        sb.Append("]");
                        if (j < network.weights[i].Length - 1)
                            sb.Append(",");
                        sb.Append("\n");
                    }
                    
                    sb.Append("  ]");
                    if (i < network.weights.Length - 1)
                        sb.Append(",");
                    sb.Append("\n");
                }
                sb.Append("],\n");
                
                // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–º–µ—â–µ–Ω–∏—è (–¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤)
                sb.Append("\"biases\": [\n");
                for (int i = 0; i < network.biases.Length; i++)
                {
                    sb.Append("  [");
                    
                    for (int j = 0; j < network.biases[i].Length; j++)
                    {
                        sb.Append(network.biases[i][j].ToString(System.Globalization.CultureInfo.InvariantCulture));
                        if (j < network.biases[i].Length - 1)
                            sb.Append(", ");
                    }
                    
                    sb.Append("]");
                    if (i < network.biases.Length - 1)
                        sb.Append(",");
                    sb.Append("\n");
                }
                sb.Append("]\n");
                
                sb.Append("}");
                
                return sb.ToString();
            }
            catch (Exception e)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ç–∏: {e.Message}");
                return null;
            }
        }

        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –¢–û–ü-5 –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
        private void HighlightTopAgents()
        {
            if (!highlight_top_agents || previous_top_agents.Count == 0)
                return;
                
            for (int i = 0; i < Mathf.Min(5, previous_top_agents.Count); i++)
            {
                int agentIndex = previous_top_agents[i];
                if (agentIndex < agents.Count && agents[agentIndex] != null)
                {
                    NeuroHuman agent = agents[agentIndex];
                    
                    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ü–≤–µ—Ç–æ–º
                    SetAgentColor(agent, top_agent_colors[i]);
                    
                    Debug.Log($"üé® –ü–æ–¥—Å–≤–µ—á–µ–Ω –¢–û–ü-{i+1} –∞–≥–µ–Ω—Ç #{agentIndex} —Ü–≤–µ—Ç–æ–º {top_agent_colors[i]}");
                }
            }
        }
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –∞–≥–µ–Ω—Ç–∞
        private void SetAgentColor(NeuroHuman agent, Color color)
        {
            if (agent == null)
                return;
                
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–Ω–¥–µ—Ä–µ—Ä—ã –≤ –∞–≥–µ–Ω—Ç–µ –∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
                Renderer[] renderers = agent.GetComponentsInChildren<Renderer>();
                
                if (renderers.Length == 0)
                {
                    Debug.LogWarning($"‚ö†Ô∏è –ê–≥–µ–Ω—Ç {agent.name} –Ω–µ –∏–º–µ–µ—Ç Renderer –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤!");
                    return;
                }
                
                foreach (Renderer renderer in renderers)
                {
                    if (renderer == null || renderer.material == null) continue;
                    
                    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
                    Material newMaterial = new Material(renderer.material);
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ü–≤–µ—Ç –∏ —ç–º–∏—Å—Å–∏—é –¥–ª—è –±–æ–ª—å—à–µ–π –∑–∞–º–µ—Ç–Ω–æ—Å—Ç–∏
                    newMaterial.SetColor(agent_material_property, color);
                    
                    // –¢–∞–∫–∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º–∏—Å—Å–∏–æ–Ω–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –±–æ–ª—å—à–µ–π –∑–∞–º–µ—Ç–Ω–æ—Å—Ç–∏
                    if (newMaterial.HasProperty("_EmissionColor"))
                    {
                        newMaterial.EnableKeyword("_EMISSION");
                        newMaterial.SetColor("_EmissionColor", color * 0.5f); // –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 0.5 –¥–ª—è –º–µ–Ω–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ —Å–≤–µ—á–µ–Ω–∏—è
                    }
                    
                    // –î–ª—è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —à–µ–π–¥–µ—Ä–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–µ—Ç–∞–ª–ª–∏—á–Ω–æ—Å—Ç—å –∏ —Å–≥–ª–∞–∂–µ–Ω–Ω–æ—Å—Ç—å
                    if (newMaterial.HasProperty("_Metallic"))
                    {
                        newMaterial.SetFloat("_Metallic", 0.8f);
                    }
                    if (newMaterial.HasProperty("_Glossiness"))
                    {
                        newMaterial.SetFloat("_Glossiness", 0.9f);
                    }
                    
                    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
                    renderer.material = newMaterial;
                }
                
                // –ü–æ–º–µ—Ç–∏–º –∞–≥–µ–Ω—Ç –∏–º–µ–Ω–µ–º —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ –ø–æ –Ω–æ–º–µ—Ä—É
                agent.gameObject.name = $"TOP_{previous_top_agents.IndexOf(agents.IndexOf(agent)) + 1}_AGENT";
                
                Debug.Log($"üé® –ò–∑–º–µ–Ω–µ–Ω –º–∞—Ç–µ—Ä–∏–∞–ª –∞–≥–µ–Ω—Ç–∞ {agent.name} –Ω–∞ —Ü–≤–µ—Ç {color}");
            }
            catch (Exception e)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e.Message}");
            }
        }

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∏–ª—ã –¥–ª—è –∞–≥–µ–Ω—Ç–∞
        private void SetAgentMaxForce(NeuroHuman agent, float force)
        {
            if (agent == null)
                return;
                
            // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã ConfigurableJoint –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º —Å–∏–ª—É
            ConfigurableJoint[] joints = agent.GetComponentsInChildren<ConfigurableJoint>();
            foreach (var joint in joints)
            {
                JointDrive drive = joint.angularXDrive;
                drive.maximumForce = force;
                joint.angularXDrive = drive;
                
                drive = joint.angularYZDrive;
                drive.maximumForce = force;
                joint.angularYZDrive = drive;
            }
        }

#if UNITY_EDITOR
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–ø–∞–≤–Ω–∞ –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–∞
    [UnityEngine.ContextMenu("–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–æ–≤")]
    public void EditorSpawnAgents()
    {
        Debug.Log($"üè≠ –°–æ–∑–¥–∞–µ–º {population_size} –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ –ø—Ä–µ—Ñ–∞–±–∞ (–≤—ã–∑–≤–∞–Ω–æ –∏–∑ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞)...");
        SpawnAgents();
    }
    
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ —Å—Ü–µ–Ω—ã
    [UnityEngine.ContextMenu("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤")]
    public void EditorDeleteAllAgents()
    {
        int count = 0;
        foreach (var agent in FindObjectsOfType<NeuroHuman>())
        {
            if (UnityEditor.EditorUtility.DisplayCancelableProgressBar("–£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤", 
                $"–£–¥–∞–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞ {agent.name}...", count / (float)agents.Count))
            {
                break;
            }
            
            UnityEditor.EditorApplication.delayCall += () => {
                DestroyImmediate(agent.gameObject);
            };
            count++;
        }
        
        UnityEditor.EditorUtility.ClearProgressBar();
        agents.Clear();
        Debug.Log($"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {count} –∞–≥–µ–Ω—Ç–æ–≤ –∏–∑ —Å—Ü–µ–Ω—ã.");
    }
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–æ—Ç–Ω–æ–π –∫—É—á–∏ –∞–≥–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ
    [UnityEngine.ContextMenu("–¢–ï–°–¢: –°–æ–∑–¥–∞—Ç—å —Ç–æ–ª–ø—É –∞–≥–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ")]
    public void TestSpawnHundredAgents()
    {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        float oldRadius = spawn_radius;
        bool oldRandomRotation = useRandomRotation;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        spawn_radius = 0.5f; // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–¥–∏—É—Å
        useRandomRotation = false; // –ë–µ–∑ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞
        
        Debug.Log($"üß™ –¢–ï–°–¢: –°–æ–∑–¥–∞–µ–º —Ç–æ–ª–ø—É –∏–∑ {population_size} –∞–≥–µ–Ω—Ç–æ–≤ –≤ –ø–ª–æ—Ç–Ω–æ–π –∫—É—á–µ...");
        SpawnAgents();
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        spawn_radius = oldRadius;
        useRandomRotation = oldRandomRotation;
        
        Debug.Log("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ç–æ–ª–ø–∞ —Å–æ–∑–¥–∞–Ω–∞! –í—Å–µ –∞–≥–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ–π —Ç–æ—á–∫–µ.");
    }
#endif

    // GUI –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
    private void OnGUI()
    {
        // –í—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º GUI, –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∑–∞–ø—É—â–µ–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Å —Ñ–æ–Ω–æ–º
        GUI.backgroundColor = new Color(0, 0, 0, 0.8f);
        GUI.Box(new Rect(10, 10, 300, 410), "");
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
        GUI.backgroundColor = Color.white;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫—Ä—É–ø–Ω—ã–π, –∂–∏—Ä–Ω—ã–π, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Å—Ç–∏–ª—å
        GUIStyle textStyle = new GUIStyle();
        textStyle.fontSize = 18;
        textStyle.fontStyle = FontStyle.Bold;
        textStyle.normal.textColor = Color.yellow; // –Ø—Ä–∫–∏–π –∂—ë–ª—Ç—ã–π –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        textStyle.alignment = TextAnchor.MiddleLeft;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º—É–ª—è—Ü–∏–∏
        GUI.Label(new Rect(20, 20, 290, 25), $"–ü–û–ö–û–õ–ï–ù–ò–ï: {current_generation}", textStyle);
        GUI.Label(new Rect(20, 45, 290, 25), $"–¢–ê–ô–ú–ï–†: {generation_timer:F1} / {generation_time:F1}", textStyle);
        GUI.Label(new Rect(20, 70, 290, 25), simulation_running ? "–°–¢–ê–¢–£–°: –ó–ê–ü–£–©–ï–ù–û" : "–°–¢–ê–¢–£–°: –û–°–¢–ê–ù–û–í–õ–ï–ù–û", textStyle);
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        textStyle.normal.textColor = Color.cyan;
        GUI.Label(new Rect(20, 95, 290, 25), "–ó–ê–ì–†–£–ó–ö–ê/–°–û–•–†–ê–ù–ï–ù–ò–ï:", textStyle);
        
        textStyle.fontSize = 14;
        textStyle.normal.textColor = network_loaded_at_start ? Color.green : Color.red;
        GUI.Label(new Rect(20, 120, 290, 20), 
            network_loaded_at_start ? 
            $"‚úÖ –ó–ê–ì–†–£–ñ–ï–ù–û: {last_loaded_file}" : 
            "‚ùå –°–ï–¢–¨ –ù–ï –ó–ê–ì–†–£–ñ–ï–ù–ê", textStyle);
            
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
        if (!string.IsNullOrEmpty(last_saved_file))
        {
            textStyle.normal.textColor = Color.green;
            GUI.Label(new Rect(20, 140, 290, 20), 
                $"üíæ –°–û–•–†–ê–ù–ï–ù–û: {last_saved_file}", textStyle);
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–Ω–∞–ø—à–æ—Ç–æ–≤
        textStyle.fontSize = 12;
        textStyle.normal.textColor = Color.white;
        string savePath = Path.Combine(Application.dataPath, models_directory);
        GUI.Label(new Rect(20, 160, 290, 20), 
            $"üìÅ –ü–£–¢–¨: {savePath}", textStyle);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç–æ–ø-5
        textStyle.fontSize = 18;
        textStyle.normal.textColor = Color.cyan;
        GUI.Label(new Rect(20, 185, 290, 25), "–¢–û–ü-5 –§–ò–¢–ù–ï–°–û–í:", textStyle);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∂—ë–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞
        textStyle.normal.textColor = Color.yellow;
        textStyle.fontSize = 16;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ø—É–ª—è—Ü–∏—é –ø–æ —Ñ–∏—Ç–Ω–µ—Å—É (–µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        if (population != null && population.Count > 0)
        {
            var sortedPopulation = new List<NeuralNetwork>(population);
            sortedPopulation.Sort((a, b) => b.fitness.CompareTo(a.fitness));
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ø-5 (–∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –ø–æ–ø—É–ª—è—Ü–∏—è –º–µ–Ω—å—à–µ)
            for (int i = 0; i < Mathf.Min(5, sortedPopulation.Count); i++)
            {
                // –ü–æ–¥–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–æ–ø-–∞–≥–µ–Ω—Ç–∞–º
                textStyle.normal.textColor = top_agent_colors[i];
                
                string rank = (i + 1).ToString();
                GUI.Label(new Rect(20, 210 + (i * 20), 290, 20), 
                    $"{rank}. –§–ò–¢–ù–ï–°: {sortedPopulation[i].fitness:F2}", textStyle);
            }
        }
        else
        {
            GUI.Label(new Rect(20, 210, 290, 20), "–ù–ï–¢ –î–ê–ù–ù–´–•", textStyle);
        }
        
        // –°–¢–ê–¢–£–° –ü–†–û–ë–õ–ï–ú–´ –° –§–ò–¢–ù–ï–°–û–ú 200.02
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ñ–∏—Ç–Ω–µ—Å–æ–º
        bool has200Problem = false;
        int count200 = 0;
        
        if (population != null && population.Count > 0)
        {
            foreach (var net in population)
            {
                if (net != null && Math.Abs(net.fitness - 200.02f) < 0.01f)
                {
                    count200++;
                }
            }
            
            if (count200 > population.Count / 2)
            {
                has200Problem = true;
            }
        }
        
        // –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if (has200Problem)
        {
            textStyle.normal.textColor = Color.red;
            textStyle.fontSize = 14;
            GUI.Label(new Rect(20, 320, 290, 20), 
                $"‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –§–ò–¢–ù–ï–° 200.02 —É {count200} —Å–µ—Ç–µ–π!", textStyle);
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        textStyle.fontSize = 16;
        textStyle.normal.textColor = Color.white;
        
        // –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
        GUIStyle buttonStyle = new GUIStyle(GUI.skin.button);
        buttonStyle.fontSize = 16;
        buttonStyle.fontStyle = FontStyle.Bold;
        
        string buttonText = simulation_running ? "–û–°–¢–ê–ù–û–í–ò–¢–¨ –°–ò–ú–£–õ–Ø–¶–ò–Æ" : "–ó–ê–ü–£–°–¢–ò–¢–¨ –°–ò–ú–£–õ–Ø–¶–ò–Æ";
        GUI.backgroundColor = simulation_running ? Color.red : Color.green;
        
        if (GUI.Button(new Rect(20, 340, 260, 30), buttonText, buttonStyle))
        {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏
            if (simulation_running)
            {
                StopSimulation();
            }
            else
            {
                // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - —Å–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤
                if (agents.Count == 0 || population.Count == 0)
                {
                    FindAllAgents();
                    if (agents.Count == 0)
                    {
                        SpawnAgents();
                    }
                    InitializePopulation();
                }
                StartSimulation();
            }
        }
        
        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç—å—é
        GUI.backgroundColor = Color.blue;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏
        GUI.Box(new Rect(20, 375, 260, 30), "");
        
        // –î–µ–ª–∞–µ–º 5 –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç–µ–π
        for (int i = 0; i < time_speed_presets.Length; i++)
        {
            float speed = time_speed_presets[i];
            
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
            GUI.backgroundColor = (i == current_speed_index) ? Color.yellow : Color.gray;
            
            if (GUI.Button(new Rect(20 + i * 52, 375, 52, 30), $"{speed}x", buttonStyle))
            {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
                time_scale = speed;
                Time.timeScale = speed;
                current_speed_index = i;
                Debug.Log($"‚è© –°–∫–æ—Ä–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {speed}x");
            }
        }
    }
} 