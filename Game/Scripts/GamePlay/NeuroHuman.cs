using UnityEngine;
using System.Collections.Generic;
using System.Linq; // Needed for LINQ queries later
using System;
using System.Text;

namespace Game.Scripts.GamePlay
{
    // Making sure this namespace has access to the Neural Network classes
    // If NeuralNetwork is in another namespace, add a 'using' statement here.

    public class NeuroHuman : MonoBehaviour
    {
        [Header("Neural Network")]
        [SerializeField] private bool use_neural_control = true;
        [SerializeField] private Transform target_transform; // GO_Aim
        [SerializeField] private float max_lifetime = 30f;
        
        [Header("HingeJoint Settings")]
        [SerializeField] private float max_motor_force = 500f;
        [Tooltip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –º–æ—Ç–æ—Ä–∞ –¥–ª—è —Å—É—Å—Ç–∞–≤–æ–≤")]
        [SerializeField] private float max_velocity = 20f; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 5f –¥–æ 20f –¥–ª—è –±–æ–ª–µ–µ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π
        [Tooltip("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –ª–∏–º–∏—Ç–æ–≤ —É–≥–ª–æ–≤ —Å—É—Å—Ç–∞–≤–æ–≤ (1.0 = —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–∏–º–∏—Ç—ã)")]
        [SerializeField] private float angle_limit_multiplier = 1.0f;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ–Ω–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ—Ç–æ—Ä–æ–≤
        [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–∞–≤–∞–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –º–æ—Ç–æ—Ä–∞ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –º–∏–∫—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–π)")]
        [SerializeField] private float min_motor_velocity_threshold = 0.01f; // –†–∞–¥–∏–∫–∞–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ–º —Å 0.05f –¥–æ 0.01f
        [Tooltip("–£—Å–∏–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –º–æ—Ç–æ—Ä–æ–≤ –Ω–æ–≥ (–º–Ω–æ–∂–∏—Ç–µ–ª—å)")]
        [SerializeField] private float leg_motor_multiplier = 20.0f; // –ë—ã–ª–æ –º–µ–Ω—å—à–µ
        [Tooltip("–£—Å–∏–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –º–æ—Ç–æ—Ä–æ–≤ —Ä—É–∫ (–º–Ω–æ–∂–∏—Ç–µ–ª—å)")]
        [SerializeField] private float arm_motor_multiplier = 8.0f;
        [Tooltip("–ü—Ä–∏–º–µ–Ω—è—Ç—å —Ä–∞–∑–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø —Å—É—Å—Ç–∞–≤–æ–≤")]
        [SerializeField] private bool use_differential_motor_control = true;
        [Tooltip("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –º–æ—Ç–æ—Ä–æ–≤ (—Å–µ–∫)")]
        [SerializeField] private float motor_update_interval = 0.01f; // –ë—ã–ª–æ 0.1f –∏–ª–∏ –±–æ–ª—å—à–µ
        
        [Header("Body Parts")]
        [SerializeField] private Transform head;
        [SerializeField] private Transform r_bot; // Right foot
        [SerializeField] private Transform l_bot; // Left foot
        
        [Header("Rewards")]
        [SerializeField] private float head_height_reward = 1f;
        [SerializeField] private float required_head_height = 0.5f;
        [SerializeField] private float target_reward = 100f;
        [SerializeField] private float movement_reward = 0.1f;
        [SerializeField] private float fall_penalty = 50f;
        
        // –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É—Å–∏–ª–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—é
        [Header("Enhanced Movement Rewards")]
        [Tooltip("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É —Ü–µ–ª–∏")]
        [SerializeField] private float target_direction_multiplier = 5.0f;
        [Tooltip("–ú–Ω–æ–∂–∏—Ç–µ–ª—å –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–æ—è")]
        [SerializeField] private float standing_bonus_multiplier = 2.0f;
        [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ (—Å–µ–∫)")]
        [SerializeField] private float min_standing_time = 1.0f;
        [Tooltip("–ë–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥—ã–π –º–µ—Ç—Ä —Å–º–µ—â–µ–Ω–∏—è –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏")]
        [SerializeField] private float distance_from_start_reward = 2.0f;
        [Tooltip("–®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è")]
        [SerializeField] private float no_movement_penalty = 0.5f;
        [Tooltip("–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –æ–±—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞")]
        [SerializeField] private float global_activity_reward = 0.2f;
        [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è —É—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")]
        [SerializeField] private float min_activity_threshold = 0.1f;
        
        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—É—Å—Ç–∞–≤–æ–≤
        [SerializeField] private List<HingeJoint> joints = new List<HingeJoint>();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ç–∏
        [Header("Auto-Generated Network Structure")]
        [SerializeField] private int input_size = 0;
        [SerializeField] private int output_size = 0;
        [SerializeField] private int[] network_structure;
        
        // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        private NeuralNetwork neural_network;
        private SimulationManager simulation_manager;
        private float lifetime = 0f;
        private float fitness = 0f;
        private Vector3 last_position;
        private Vector3 initial_position; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        private float standing_time = 0f; // –í—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –∞–≥–µ–Ω—Ç —Å—Ç–æ–∏—Ç
        private float last_moved_time = 0f; // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –∞–≥–µ–Ω—Ç –¥–≤–∏–≥–∞–ª—Å—è
        private bool is_training = true;
        private bool is_disabled = false;
        private float generation_start_time;
        private int instance_id;
        private bool success_reported = false;
        private Transform spawn_point; // –¢–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –∞–Ω–æ–º–∞–ª–∏—è—Ö —Ñ–∏–∑–∏–∫–∏
        
        // –ò—Å—Ç–æ—Ä–∏—é –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –≤—Ö–æ–¥—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        private float[] last_actions;
        
        // –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –º–æ—Ç–æ—Ä–æ–≤
        private float last_motor_update_time = 0f;
        private Dictionary<HingeJoint, string> joint_types = new Dictionary<HingeJoint, string>();
        
        // –ù–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏—Ç–Ω–µ—Å–∞
        [Header("Basic Rewards")]
        [Tooltip("–ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–∞–∂–¥—ã–π —Ç–∏–∫ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è")]
        [SerializeField] private float survival_reward = 0.0001f;
        [Tooltip("–ë–æ–Ω—É—Å –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ (—É–º–Ω–æ–∂–∏—Ç–µ–ª—å)")]
        [SerializeField] private float forward_movement_reward = 5.0f;
        [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –≥–æ–ª–æ–≤—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã")]
        [SerializeField] private float min_head_height = 0.7f;

        [Header("Anti-Fall Rewards")]
        [Tooltip("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ –ø–∞–¥–µ–Ω–∏–µ (–∫–æ–≥–¥–∞ –∞–≥–µ–Ω—Ç –ª–µ–∂–∏—Ç –Ω–∞ –∑–µ–º–ª–µ)")]
        [SerializeField] private float max_fall_penalty = -2.0f;
        [Tooltip("–í—ã—Å–æ—Ç–∞, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è —á—Ç–æ –∞–≥–µ–Ω—Ç —É–ø–∞–ª")]
        [SerializeField] private float fall_height_threshold = 0.3f;

        [Header("Early Success Rewards")]
        [Tooltip("–ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ)")]
        [SerializeField] private float early_steps_bonus = 0.2f;
        [Tooltip("–ß–∏—Å–ª–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã—Ö –¥–µ–π—Å—Ç–≤—É–µ—Ç –±–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏")]
        [SerializeField] private int early_bonus_generations = 10;
        [Tooltip("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –∑–∞ –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏")]
        [SerializeField] private float min_distance_for_early_bonus = 0.5f;

        [Header("Balance Rewards")]
        [Tooltip("–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ (—É–º–Ω–æ–∂–∏—Ç–µ–ª—å)")]
        [SerializeField] private float balance_reward = 0.3f;
        [Tooltip("–®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (—É–º–Ω–æ–∂–∏—Ç–µ–ª—å)")]
        [SerializeField] private float tilt_penalty = 0.2f;

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        private float total_distance_moved = 0f;
        private float best_distance = 0f;
        private float time_upright = 0f;
        private bool has_fallen = false;
        private float consecutive_upright_time = 0f;
        
        // –ú–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö —Å—É—Å—Ç–∞–≤–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        #if UNITY_EDITOR
        private void OnValidate()
        {
            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—É—Å—Ç–∞–≤—ã (HingeJoint) –∏–∑ –≤—Å–µ—Ö –¥–æ—á–µ—Ä–Ω–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
            HingeJoint[] foundJoints = GetComponentsInChildren<HingeJoint>(true);
            
            // –£–±–∏—Ä–∞–µ–º –∏–∑–ª–∏—à–Ω–µ–µ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
            // Debug.Log($"ü¶æ –ù–∞–π–¥–µ–Ω–æ {foundJoints.Length} —Å—É—Å—Ç–∞–≤–æ–≤! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π —Å–∫–µ–ª–µ—Ç...");
            
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—É—Å—Ç–∞–≤—ã
            joints.Clear();
            joint_types.Clear(); // –û—á–∏—â–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é —Å—É—Å—Ç–∞–≤–æ–≤
            
            foreach (HingeJoint joint in foundJoints)
            {
                joints.Add(joint);
                
                // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—É—Å—Ç–∞–≤ –ø–æ –∏–º–µ–Ω–∏
                string jointName = joint.name.ToLower();
                string jointType = "torso"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                if (jointName.Contains("leg") || jointName.Contains("foot") || 
                    jointName.Contains("knee") || jointName.Contains("noga") || 
                    jointName.Contains("hip") || jointName.Contains("ankle"))
                {
                    jointType = "leg";
                }
                else if (jointName.Contains("arm") || jointName.Contains("hand") || 
                         jointName.Contains("wrist") || jointName.Contains("elbow") || 
                         jointName.Contains("finger") || jointName.Contains("ruka"))
                {
                    jointType = "arm";
                }
                else if (jointName.Contains("head") || jointName.Contains("neck") || 
                         jointName.Contains("spine") || jointName.Contains("back"))
                {
                    jointType = "spine";
                }
                
                joint_types[joint] = jointType;
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ—Ç–æ—Ä–∞
                JointMotor motor = joint.motor;
                motor.force = max_motor_force; // –Ø–í–ù–û —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–∏–ª—É
                motor.targetVelocity = 0;
                motor.freeSpin = false;
                joint.motor = motor;
                
                // –í–∫–ª—é—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ—Ç–æ—Ä–∞
                joint.useMotor = true;
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
                JointLimits limits = joint.limits;
                if (limits.min == 0 && limits.max == 0)
                {
                    limits.min = -45 * angle_limit_multiplier;
                    limits.max = 45 * angle_limit_multiplier;
                    joint.limits = limits;
                }
                else
                {
                    // –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
                    limits.min *= angle_limit_multiplier;
                    limits.max *= angle_limit_multiplier;
                    joint.limits = limits;
                }
                
                // –í–∫–ª—é—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
                joint.useLimits = true;
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            DetermineNetworkStructureAdvanced();
        }
        
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        private void DetermineNetworkStructureAdvanced()
        {
            // –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—Å—Ç–∞–≤–æ–≤
            output_size = joints.Count;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø –¥–∞–Ω–Ω—ã—Ö
            int bodyPositionInputsCount = 4; // –ü–æ–ª–æ–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã + –Ω–æ–≥ + —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–æ–≥–∞–º–∏
            int velocityInputsCount = 4;     // –õ–∏–Ω–µ–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (xyz) + —É–≥–ª–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            int jointAngleInputsCount = joints.Count; // –ü–æ –æ–¥–Ω–æ–º—É –≤—Ö–æ–¥—É –Ω–∞ –∫–∞–∂–¥—ã–π —Å—É—Å—Ç–∞–≤
            int jointPositionInputsCount = joints.Count * 4; // –ü–æ 4 –≤—Ö–æ–¥–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —Å—É—Å—Ç–∞–≤ (x, y, z, magnitude)
            int targetInputsCount = 3;       // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (x, z) + –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
            int memoryInputsCount = joints.Count + 1; // –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è + –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
            
            // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤
            input_size = bodyPositionInputsCount + 
                         velocityInputsCount + 
                         jointAngleInputsCount + 
                         jointPositionInputsCount + 
                         targetInputsCount + 
                         memoryInputsCount;
            
            // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ç–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–∫—Ä—ã—Ç—ã–º–∏ —Å–ª–æ—è–º–∏
            int layer1Size = Mathf.Max(32, input_size); // –ü–µ—Ä–≤—ã–π —Å–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π - –Ω–µ –º–µ–Ω—å—à–µ 32 –Ω–µ–π—Ä–æ–Ω–æ–≤
            int layer2Size = output_size * 4; // –í—Ç–æ—Ä–æ–π —Å–∫—Ä—ã—Ç—ã–π —Å–ª–æ–π - –≤ 4 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ
            
            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ç–∏ —Å —á–µ—Ç—ã—Ä—å–º—è —Å–ª–æ—è–º–∏: –≤—Ö–æ–¥–Ω–æ–π, –¥–≤–∞ —Å–∫—Ä—ã—Ç—ã—Ö, –≤—ã—Ö–æ–¥–Ω–æ–π
            network_structure = new int[4];
            network_structure[0] = input_size;
            network_structure[1] = layer1Size;
            network_structure[2] = layer2Size;
            network_structure[3] = output_size;
            
            // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è
            Debug.Log($"üî¢ –°–¢–†–£–ö–¢–£–†–ê –í–•–û–î–û–í –ù–ï–ô–†–û–°–ï–¢–ò:" +
                $"\n- –ü–æ–∑–∏—Ü–∏–∏ —Ç–µ–ª–∞: {bodyPositionInputsCount}" +
                $"\n- –°–∫–æ—Ä–æ—Å—Ç–∏: {velocityInputsCount}" +
                $"\n- –£–≥–ª—ã —Å—É—Å—Ç–∞–≤–æ–≤: {jointAngleInputsCount}" +
                $"\n- –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—É—Å—Ç–∞–≤–æ–≤: {jointPositionInputsCount}" +
                $"\n- –¶–µ–ª—å: {targetInputsCount}" +
                $"\n- –ü–∞–º—è—Ç—å: {memoryInputsCount}" +
                $"\n= –í–°–ï–ì–û –í–•–û–î–û–í: {input_size}" +
                $"\n= –í–°–ï–ì–û –í–´–•–û–î–û–í: {output_size}");
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∏–≤—à–µ–π—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–µ—Ç–∏
            Debug.Log($"üß† –°–¢–†–£–ö–¢–£–†–ê –°–ï–¢–ò: {input_size}-{layer1Size}-{layer2Size}-{output_size}");
            
            // –ï—Å–ª–∏ –≥–¥–µ-—Ç–æ –µ—Å—Ç—å SimulationManager, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            SimulationManager sim = FindObjectOfType<SimulationManager>();
            if (sim != null)
            {
                // –ú—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –æ–±–Ω–æ–≤–∏—Ç—å SimulationManager –∏–∑ OnValidate,
                // –Ω–æ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                Debug.Log($"‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏. –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–∏—Ç–µ SimulationManager —Å–æ —Å–ª–æ—è–º–∏: [{string.Join(", ", network_structure.Select(x => x.ToString()))}]");
            }
        }
        
        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SimulationManager —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Å–µ—Ç–∏
        [UnityEngine.ContextMenu("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ç–∏ –≤ SimulationManager")]
        public void UpdateSimulationManagerNetwork()
        {
            if (network_structure == null || network_structure.Length < 2)
            {
                Debug.LogError("‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ OnValidate!");
                return;
            }
            
            SimulationManager sim = FindObjectOfType<SimulationManager>();
            if (sim == null)
            {
                Debug.LogError("‚ùå SimulationManager –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ü–µ–Ω–µ! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞!");
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ç–∏ –≤ SimulationManager
            sim.UpdateNetworkStructure(network_structure);
            Debug.Log($"ü§ò –ó–∞–µ–±–∏—Å—å! –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ SimulationManager!");
        }
        #endif

        void Start()
        {
            // CRITICAL: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –º–æ—Ç–æ—Ä—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            ResetAllMotors();
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            instance_id = GetInstanceID();
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ SimulationManager
            if (simulation_manager == null)
            {
                simulation_manager = FindObjectOfType<SimulationManager>();
                if (simulation_manager == null)
                {
                    Debug.LogError("‚ùå SimulationManager –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ü–µ–Ω–µ!");
                    enabled = false;
                    return;
                }
            }
            
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
            generation_start_time = Time.time;
            
            // –ü–æ–∏—Å–∫ —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
            if (head == null)
            {
                Transform foundHead = transform.Find("Head");
                if (foundHead != null)
                {
                    head = foundHead;
                    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π –ª–æ–≥
                    // Debug.Log($"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–∞ –≥–æ–ª–æ–≤–∞: {head.name}");
                }
                else
                {
                    // –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
                    foreach (Transform child in GetComponentsInChildren<Transform>())
                    {
                        if (child.name.ToLower().Contains("head") || 
                            child.name.ToLower().Contains("golova"))
                        {
                            head = child;
                            // Debug.Log($"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–∞ –≥–æ–ª–æ–≤–∞ –ø–æ –∏–º–µ–Ω–∏: {head.name}");
                            break;
                        }
                    }
                    
                    if (head == null)
                    {
                        Debug.LogWarning("‚ö†Ô∏è –ì–æ–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ú–Ω–æ–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!");
                    }
                }
            }
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–æ–≥, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã
            if (r_bot == null || l_bot == null)
            {
                List<Transform> feet = new List<Transform>();
                
                // –ò—â–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –∏–º–µ–Ω–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ "foot", "leg", "–Ω–æ–≥–∞" –∏ —Ç.–¥.
                foreach (Transform child in GetComponentsInChildren<Transform>())
                {
                    string name = child.name.ToLower();
                    if (name.Contains("foot") || name.Contains("leg") || 
                        name.Contains("–Ω–æ–≥–∞") || name.Contains("—Å—Ç—É–ø–Ω—è"))
                    {
                        feet.Add(child);
                    }
                }
                
                // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –Ω–æ–≥—É
                if (feet.Count > 0)
                {
                    // Debug.Log($"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–æ {feet.Count} –Ω–∏–∂–Ω–∏—Ö –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–µ–π");
                    
                    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–≤–µ –Ω–æ–≥–∏ - —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤—É—é –∏ –ª–µ–≤—É—é
                    if (feet.Count >= 2)
                    {
                        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ (—Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–∞–≤–∞—è –Ω–æ–≥–∞ –∏–º–µ–µ—Ç –±–æ–ª—å—à—É—é X-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É)
                        feet.Sort((a, b) => a.position.x.CompareTo(b.position.x));
                        
                        l_bot = feet[0]; // –õ–µ–≤–∞—è (–º–µ–Ω—å—à–∞—è X)
                        r_bot = feet[feet.Count - 1]; // –ü—Ä–∞–≤–∞—è (–±–æ–ª—å—à–∞—è X)
                        
                        // Debug.Log($"‚úÖ –ù–æ–≥–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: L={l_bot.name}, R={r_bot.name}");
                    }
                    else
                    {
                        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –Ω–æ–≥—É - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–ª—è –æ–±–µ–∏—Ö —Å—Å—ã–ª–æ–∫
                        r_bot = l_bot = feet[0];
                        Debug.LogWarning("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –Ω–æ–≥–∞! –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë –¥–ª—è –æ–±–µ–∏—Ö —Å—Å—ã–ª–æ–∫.");
                    }
                }
                else
                {
                    Debug.LogWarning("‚ö†Ô∏è –ù–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ú–Ω–æ–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã!");
                }
            }
            
            // –ï—Å–ª–∏ —Å—É—Å—Ç–∞–≤—ã –µ—â—ë –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –¥–µ–ª–∞–µ–º —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if (joints == null || joints.Count == 0)
            {
                HingeJoint[] foundJoints = GetComponentsInChildren<HingeJoint>();
                if (foundJoints != null && foundJoints.Length > 0)
                {
                    foreach (HingeJoint joint in foundJoints)
                    {
                        if (joint != null)
                        {
                            joints.Add(joint);
                            
                            // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—É—Å—Ç–∞–≤ –ø–æ –∏–º–µ–Ω–∏
                            string jointName = joint.name.ToLower();
                            string jointType = "torso"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            
                            if (jointName.Contains("leg") || jointName.Contains("foot") || 
                                jointName.Contains("knee") || jointName.Contains("noga") || 
                                jointName.Contains("hip") || jointName.Contains("ankle"))
                            {
                                jointType = "leg";
                            }
                            else if (jointName.Contains("arm") || jointName.Contains("hand") || 
                                     jointName.Contains("wrist") || jointName.Contains("elbow") || 
                                     jointName.Contains("finger") || jointName.Contains("ruka"))
                            {
                                jointType = "arm";
                            }
                            else if (jointName.Contains("head") || jointName.Contains("neck") || 
                                     jointName.Contains("spine") || jointName.Contains("back"))
                            {
                                jointType = "spine";
                            }
                            
                            joint_types[joint] = jointType;
                            
                            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—É—Å—Ç–∞–≤
                            JointMotor motor = joint.motor;
                            motor.force = max_motor_force;
                            motor.targetVelocity = 0;
                            joint.motor = motor;
                            joint.useMotor = true;
                            
                            // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫ –ª–∏–º–∏—Ç–∞–º —Å—É—Å—Ç–∞–≤–æ–≤
                            JointLimits limits = joint.limits;
                            limits.min *= angle_limit_multiplier;
                            limits.max *= angle_limit_multiplier;
                            joint.limits = limits;
                            joint.useLimits = true;
                        }
                    }

                    Debug.Log($"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–æ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ {joints.Count} —Å—É—Å—Ç–∞–≤–æ–≤!");
                }
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å–º–µ—â–µ–Ω–∏—è
            initial_position = transform.position;
            last_position = transform.position;
            
            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ—Ç–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ç–µ–∫—É—â–∏–º–∏ —Å—É—Å—Ç–∞–≤–∞–º–∏
            if (network_structure == null || network_structure.Length < 2) 
            {
                DetermineNetworkStructureAdvanced();
                Debug.Log($"üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏ –≤ Start(): [{string.Join(", ", network_structure.Select(x => x.ToString()))}]");
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–ª–æ–µ–≤ –∏–∑ SimulationManager
             int[] layers = simulation_manager.GetNeuralLayers();
            if (layers == null || layers.Length < 2)
            {
                Debug.LogError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ª–æ–µ–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!");
                 enabled = false;
                return;
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
            if (last_actions == null || last_actions.Length != joints.Count)
            {
                last_actions = new float[joints.Count];
                for (int i = 0; i < last_actions.Length; i++)
                {
                    last_actions[i] = 0f;
                }
                Debug.Log($"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–∞—Å—Å–∏–≤ last_actions —Å —Ä–∞–∑–º–µ—Ä–æ–º {joints.Count}");
            }
            
            // –°–æ–∑–¥–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
            if (neural_network == null)
            {
                try
                {
                    // –°–æ–∑–¥–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è GeneticAlgorithm
                    neural_network = new NeuralNetwork(layers);
                    // neural_network.InitializeWeights(); // –≠—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –Ω–µ—Ç, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —É–∂–µ –≤—Å—ë –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç!
                    
                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ –≤–µ—Å–∞–º–∏ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
                    ForceNonZeroInitialization();
                    
                    is_training = true;
                    Debug.Log($"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ª—É—á–∞–π–Ω–∞—è —Å–µ—Ç—å –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ {instance_id}!");
                }
                catch (Exception e)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏: {e.Message}");
                    enabled = false;
                    return;
                }
            }
            
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            last_position = transform.position;
            
            // –ò—â–µ–º —Ü–µ–ª—å, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–∞
            if (target_transform == null)
            {
                GameObject target = GameObject.FindGameObjectWithTag("AIM");
                if (target != null)
                {
                    target_transform = target.transform;
                    Debug.Log("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ü–µ–ª—å —Å —Ç–µ–≥–æ–º AIM");
                }
                else
                {
                    Debug.LogWarning("‚ö†Ô∏è –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ê–≥–µ–Ω—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–ª—å.");
                }
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏—Ç–Ω–µ—Å–∞
        public float GetFitness()
        {
            if (neural_network == null) 
                return 0f;
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –≤—ã—Å–æ—Ç—É –≥–æ–ª–æ–≤—ã
            Vector3 current_position = transform.position;
            float head_height = head != null ? head.position.y - transform.position.y : 0f;
            
            // –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ –∏ –≤—ã—Å–æ—Ç—É –≥–æ–ª–æ–≤—ã
            float fitness = survival_reward * Time.time;
            
            // 1. –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—ã—Å–æ—Ç—É –≥–æ–ª–æ–≤—ã (–±–∞–∑–æ–≤–æ–µ —Å—Ç–æ—è–Ω–∏–µ)
            if (head_height > min_head_height)
            {
                fitness += head_height * head_height_reward;
                consecutive_upright_time += Time.deltaTime;
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è
                if (consecutive_upright_time > 3.0f)
                {
                    fitness += balance_reward * consecutive_upright_time * 0.1f;
                }
            }
            else
            {
                consecutive_upright_time = 0f;
                
                // –®—Ç—Ä–∞—Ñ –∑–∞ –ø–∞–¥–µ–Ω–∏–µ, –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–º—É, –Ω–∞—Å–∫–æ–ª—å–∫–æ –Ω–∏–∑–∫–æ –æ–ø—É—Å—Ç–∏–ª–∞—Å—å –≥–æ–ª–æ–≤–∞
                float fall_ratio = Mathf.Clamp01((min_head_height - head_height) / min_head_height);
                float current_fall_penalty = Mathf.Lerp(fall_penalty, max_fall_penalty, fall_ratio);
                
                fitness += current_fall_penalty;
                
                if (!has_fallen && head_height < fall_height_threshold)
                {
                    has_fallen = true;
                    Debug.Log($"üëé –ê–≥–µ–Ω—Ç {name} —É–ø–∞–ª! –í—ã—Å–æ—Ç–∞ –≥–æ–ª–æ–≤—ã: {head_height:F2}");
                }
            }
            
            // 2. –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
            float distance_moved = Vector3.Distance(current_position, last_position);
            
            // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ (–≤–¥–æ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Å–∏ Z)
            Vector3 local_movement = transform.InverseTransformDirection(current_position - last_position);
            float forward_distance = local_movement.z;
            
            if (forward_distance > 0)
            {
                // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
                fitness += forward_distance * forward_movement_reward;
                
                // –û–±—â–µ–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                total_distance_moved += forward_distance;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                if (total_distance_moved > best_distance)
                {
                    best_distance = total_distance_moved;
                }
                
                // –ë–æ–Ω—É—Å –∑–∞ –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏ –≤ —Ä–∞–Ω–Ω–∏—Ö –ø–æ–∫–æ–ª–µ–Ω–∏—è—Ö
                if (simulation_manager != null && 
                    simulation_manager.GetCurrentGeneration() < early_bonus_generations && 
                    total_distance_moved > min_distance_for_early_bonus)
                {
                    fitness += early_steps_bonus;
                }
            }
            
            // 3. –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–∞–∫–ª–æ–Ω (–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª–∏)
            float upright_dot = Vector3.Dot(transform.up, Vector3.up);
            float tilt_factor = 1f - upright_dot; // 0 = –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ, 1 = –ª–µ–∂–∏—Ç
            
            fitness -= tilt_factor * tilt_penalty;
            
            // 4. –ë–æ–Ω—É—Å –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ª–µ–¥–æ–≤ (–æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –∞–≥–µ–Ω—Ç –∏–¥–µ—Ç)
            // –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–æ, –¥–æ–±–∞–≤—å –∑–¥–µ—Å—å –ª–æ–≥–∏–∫—É
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞
            last_position = current_position;
            
            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –∑–∞—â–∏—Ç–∞ –æ—Ç –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∏—Ç–Ω–µ—Å–∞
            if (Math.Abs(fitness - 200.02f) < 0.1f)
            {
                Debug.LogWarning($"‚ö†Ô∏è –ü–ï–†–ï–•–í–ê–ß–ï–ù –ú–ê–ì–ò–ß–ï–°–ö–ò–ô –§–ò–¢–ù–ï–° {fitness} –≤ GetFitness! –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ –Ω—É–ª—è.");
                fitness = 0f;
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏—Ç–Ω–µ—Å –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
            if (neural_network != null)
            {
                neural_network.fitness = fitness;
            }
            
            return fitness;
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ä–∞—Å—á–µ—Ç—ã –ø—Ä–∏ —Ä–µ—Å–ø–∞–≤–Ω–µ
        public void ResetFitness()
        {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è
            initial_position = transform.position;
            last_position = transform.position;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏
            total_distance_moved = 0f;
            best_distance = 0f;
            time_upright = 0f;
            has_fallen = false;
            consecutive_upright_time = 0f;
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            if (neural_network != null)
            {
                neural_network.fitness = 0f;
            }
            
            Debug.Log($"üîÑ –°–±—Ä–æ—à–µ–Ω —Ñ–∏—Ç–Ω–µ—Å –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {name}");
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
        public void SetNeuralNetwork(NeuralNetwork network)
        {
            // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–ò–¢–ù–ï–°–ê –ü–ï–†–ï–î –£–°–¢–ê–ù–û–í–ö–û–ô
            float oldFitness = neural_network != null ? neural_network.fitness : 0f;
            Debug.Log($"üëâ SetNeuralNetwork –¥–ª—è {name}: –°—Ç–∞—Ä—ã–π —Ñ–∏—Ç–Ω–µ—Å = {oldFitness}");
            
            neural_network = network;
            
            // –ü–†–û–í–ï–†–ö–ê –ù–ê –ú–ê–ì–ò–ß–ï–°–ö–ò–ô –§–ò–¢–ù–ï–° (–µ—â–µ –æ–¥–∏–Ω –±–∞—Ä—å–µ—Ä)
            if (network != null && Math.Abs(network.fitness - 200.02f) < 0.1f)
            {
                Debug.LogWarning($"‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù –ú–ê–ì–ò–ß–ï–°–ö–ò–ô –§–ò–¢–ù–ï–° {network.fitness} –≤ SetNeuralNetwork! –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ 0.");
                network.fitness = 0f;
            }
            
            // –í–°–ï–ì–î–ê —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏—Ç–Ω–µ—Å –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–æ–≤–æ–π —Å–µ—Ç–∏
            if (network != null)
            {
                network.fitness = 0f;
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ñ–∏—Ç–Ω–µ—Å–µ
            ResetFitness();
            
            // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –§–ò–¢–ù–ï–°–ê –ü–û–°–õ–ï –£–°–¢–ê–ù–û–í–ö–ò
            float newFitness = neural_network != null ? neural_network.fitness : 0f;
            Debug.Log($"üëå SetNeuralNetwork –¥–ª—è {name}: –ù–æ–≤—ã–π —Ñ–∏—Ç–Ω–µ—Å = {newFitness}");
        }

        void Update()
        {
            if (use_neural_control && is_training && !is_disabled)
            {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
            lifetime = Time.time - generation_start_time;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∑–∏–∫—É –Ω–∞ –∞–Ω–æ–º–∞–ª–∏–∏ –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥
                if (Time.frameCount % 30 == 0) // ~0.5 —Å–µ–∫ –ø—Ä–∏ 60 FPS
                {
                    CheckForPhysicsAnomalies();
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã –¥–ª—è –Ω–∞–≥—Ä–∞–¥—ã
                CheckHeadHeight();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
                CheckTargetReached();
            }
        }

        void FixedUpdate()
        {
            if (is_disabled || neural_network == null || !use_neural_control)
                return;
                
            // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ –º–æ—Ç–æ—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã
            EnsureMotorsEnabled();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É –∫–∞–∂–¥—ã–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∫–∞–¥—Ä
            FixedUpdatePhysicsChecks();
                
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
            lifetime += Time.fixedDeltaTime;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏
            if (lifetime >= max_lifetime)
            {
                DisableAgent("–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏");
                return;
            }
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            UseNeuralNetworkControl();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É –≥–æ–ª–æ–≤—ã –∏ –¥—Ä—É–≥–∏–µ —É—Å–ª–æ–≤–∏—è
            CheckHeadHeight();
            CheckTargetReached();
            CheckFallen();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ —Ä–µ–∂–µ
            if (Time.frameCount % 30 == 0)
            {
                CheckForPhysicsAnomalies();
            }
        }
        
        private void UseNeuralNetworkControl()
        {
            if (neural_network == null) return;
            
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –º–æ—Ç–æ—Ä—ã
                if (Time.time - last_motor_update_time < motor_update_interval)
                {
                    return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –∞–ø–¥–µ–π—Ç
                }
                
                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ—Ç–æ—Ä–æ–≤
                last_motor_update_time = Time.time;
                
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ last_actions –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                if (last_actions == null || last_actions.Length != joints.Count) 
                {
                    last_actions = new float[joints.Count];
                    // –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º ID –∞–≥–µ–Ω—Ç–∞
                    // –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
                    Debug.LogWarning($"üîÑ [ID:{instance_id}] –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–∞—Å—Å–∏–≤ last_actions —Å —Ä–∞–∑–º–µ—Ä–æ–º {joints.Count}");
                }
                
                // –ß–ï–¢–ö–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –î–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ä–∞–∑–±–∏–≤–∞–µ–º –≤—Ö–æ–¥—ã –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –≥—Ä—É–ø–ø—ã
                List<float> bodyPositionInputs = new List<float>();
                List<float> velocityInputs = new List<float>();
                List<float> jointAngleInputs = new List<float>();
                List<float> jointPositionInputs = new List<float>();
                List<float> targetInputs = new List<float>();
                List<float> memoryInputs = new List<float>();
                
                // –ü–æ–ª—É—á–∞–µ–º —Å—ã–ª–∫–∏ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                Rigidbody rb = GetComponent<Rigidbody>();
                
                // === –ì–†–£–ü–ü–ê 1: –î–ê–ù–ù–´–ï –û –ü–û–õ–û–ñ–ï–ù–ò–ò –û–°–ù–û–í–ù–´–• –ß–ê–°–¢–ï–ô –¢–ï–õ–ê ===
                // –ü–æ–ª–æ–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –º–∞—Å—Å
                bodyPositionInputs.Add(head.position.y - transform.position.y);
                
                // –ü–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≥ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –º–∞—Å—Å
                bodyPositionInputs.Add(r_bot.position.y - transform.position.y);
                bodyPositionInputs.Add(l_bot.position.y - transform.position.y);
                
                // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –Ω–æ–≥–∞–º–∏
                bodyPositionInputs.Add(Vector3.Distance(r_bot.position, l_bot.position));
                
                // === –ì–†–£–ü–ü–ê 2: –î–ê–ù–ù–´–ï –û –°–ö–û–†–û–°–¢–ò –ò –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ò ===
                if (rb != null)
                {
                    velocityInputs.Add(rb.linearVelocity.x);
                    velocityInputs.Add(rb.linearVelocity.z);
                    velocityInputs.Add(rb.linearVelocity.y); // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
                    velocityInputs.Add(rb.angularVelocity.magnitude);
            }
            else
            {
                    velocityInputs.Add(0f); velocityInputs.Add(0f); velocityInputs.Add(0f); velocityInputs.Add(0f);
                }
                
                // === –ì–†–£–ü–ü–ê 3: –î–ê–ù–ù–´–ï –û –°–£–°–¢–ê–í–ê–• ===
                // –£–≥–ª—ã —Å—É—Å—Ç–∞–≤–æ–≤
                if (joints != null)
                {
                    foreach (HingeJoint joint in joints)
                    {
                        if (joint != null)
                        {
                            // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–æ–∫ —Å HingeJoint –ª–∏–º–∏—Ç–∞–º–∏
                            float min = joint.limits.min;
                            float max = joint.limits.max;
                            if (min == max) // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
                            {
                                jointAngleInputs.Add(0f);
                            }
                            else
                            {
                                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≥–æ–ª —Å—É—Å—Ç–∞–≤–∞ –æ—Ç -1 –¥–æ 1, —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
                                float normalizedAngle = Mathf.Clamp01(Mathf.InverseLerp(min, max, joint.angle)) * 2f - 1f;
                                jointAngleInputs.Add(normalizedAngle);
                            }
                        }
                        else
                        {
                            jointAngleInputs.Add(0f);
                        }
                    }
                }
                
                // === –ì–†–£–ü–ü–ê 4: –ü–û–õ–û–ñ–ï–ù–ò–Ø –°–£–°–¢–ê–í–û–í –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–û –ì–û–õ–û–í–´ ===
                if (head != null && joints != null)
                {
                    foreach (HingeJoint joint in joints)
                    {
                        if (joint != null)
                        {
                            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—É—Å—Ç–∞–≤–∞
                            Vector3 jointPosition = joint.transform.position;
                            
                            // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Å—É—Å—Ç–∞–≤–æ–º –∏ –≥–æ–ª–æ–≤–æ–π
                            Vector3 relativePosition = jointPosition - head.position;
                            
                            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                            jointPositionInputs.Add(relativePosition.x / 2.0f); // –î–µ–ª–∏–º –Ω–∞ 2, —á—Ç–æ–±—ã –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø—Ä–∏–º–µ—Ä–Ω–æ [-1, 1]
                            jointPositionInputs.Add(relativePosition.y / 2.0f);
                            jointPositionInputs.Add(relativePosition.z / 2.0f);
                            
                            // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é (–¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)
                            jointPositionInputs.Add(relativePosition.magnitude / 3.0f); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–ª–∏—á–∏–Ω—É
                        }
                        else
                        {
                            // –ó–∞–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                            jointPositionInputs.Add(0f); jointPositionInputs.Add(0f); 
                            jointPositionInputs.Add(0f); jointPositionInputs.Add(0f);
                        }
                    }
                }
                
                // === –ì–†–£–ü–ü–ê 5: –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¶–ï–õ–ò ===
                if (target_transform != null)
                {
                    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
                    Vector3 dirToTarget = target_transform.position - transform.position;
                    Vector3 localDir = transform.InverseTransformDirection(dirToTarget.normalized);
                    
                    targetInputs.Add(localDir.x);
                    targetInputs.Add(localDir.z);
                    
                    // –î–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ —Ü–µ–ª–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è)
                    float distToTarget = dirToTarget.magnitude;
                    targetInputs.Add(Mathf.Clamp01(distToTarget / 10f));
            }
            else
            {
                    targetInputs.Add(0f); targetInputs.Add(0f); targetInputs.Add(0f);
                }
                
                // === –ì–†–£–ü–ü–ê 6: –ü–ê–ú–Ø–¢–¨ –û –ü–†–ï–î–´–î–£–©–ò–• –î–ï–ô–°–¢–í–ò–Ø–• –ò –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï ===
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
                if (last_actions != null)
                {
                    for (int i = 0; i < last_actions.Length; i++)
                    {
                        memoryInputs.Add(last_actions[i]);
                    }
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ)
                memoryInputs.Add(Mathf.Clamp01(lifetime / max_lifetime));
                
                // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –≤—Ö–æ–¥–æ–≤ –≤ –æ–¥–∏–Ω –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                List<float> inputs = new List<float>();
                inputs.AddRange(bodyPositionInputs);    // ~4 –≤—Ö–æ–¥–∞
                inputs.AddRange(velocityInputs);        // ~4 –≤—Ö–æ–¥–∞
                inputs.AddRange(jointAngleInputs);      // ~joints.Count –≤—Ö–æ–¥–æ–≤
                inputs.AddRange(jointPositionInputs);   // ~joints.Count * 4 –≤—Ö–æ–¥–æ–≤
                inputs.AddRange(targetInputs);          // 3 –≤—Ö–æ–¥–∞
                inputs.AddRange(memoryInputs);          // ~joints.Count + 1 –≤—Ö–æ–¥–æ–≤
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∏–ª–∏ NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                for (int i = 0; i < inputs.Count; i++)
                {
                    if (float.IsInfinity(inputs[i]) || float.IsNaN(inputs[i]))
                    {
                        Debug.LogWarning($"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ/NaN –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (–∏–Ω–¥–µ–∫—Å {i}): {inputs[i]}. –ó–∞–º–µ–Ω—è–µ–º –Ω–∞ 0.");
                        inputs[i] = 0f;
                    }
                    
                    // –ñ–µ—Å—Ç–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤–∑—Ä—ã–≤–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
                    if (Mathf.Abs(inputs[i]) > 10f)
                    {
                        Debug.LogWarning($"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (–∏–Ω–¥–µ–∫—Å {i}): {inputs[i]}. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º.");
                        inputs[i] = Mathf.Clamp(inputs[i], -10f, 10f);
                    }
                }
                
                // –ó–∞–ø–æ–º–Ω–∏–º —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –û–ì–†–ê–ù–ò–ß–ò–í–ê–ï–ú –ß–ê–°–¢–û–¢–£ –õ–û–ì–û–í
                if (Time.frameCount % 5000 == 0 && instance_id % 10 == 0) // –õ–æ–≥–∏—Ä—É–µ–º –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è 10% –∞–≥–µ–Ω—Ç–æ–≤
                {
                    string inputStructure = $"[ID:{instance_id}] –°–¢–†–£–ö–¢–£–†–ê –í–•–û–î–û–í: " +
                        $"–ü–æ–∑–∏—Ü–∏–∏ —Ç–µ–ª–∞: {bodyPositionInputs.Count}, " +
                        $"–°–∫–æ—Ä–æ—Å—Ç–∏: {velocityInputs.Count}, " +
                        $"–£–≥–ª—ã —Å—É—Å—Ç–∞–≤–æ–≤: {jointAngleInputs.Count}, " +
                        $"–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—É—Å—Ç–∞–≤–æ–≤: {jointPositionInputs.Count}, " +
                        $"–¶–µ–ª—å: {targetInputs.Count}, " +
                        $"–ü–∞–º—è—Ç—å: {memoryInputs.Count}, " +
                        $"–í–°–ï–ì–û: {inputs.Count}";
                    Debug.Log(inputStructure);
                }
                
                // –ó–∞—â–∏—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è neural_network –∏ –µ–≥–æ —Å–ª–æ–µ–≤
                if (neural_network == null || neural_network.layers == null || neural_network.layers.Length < 2)
                {
                    Debug.LogError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!");
                    return;
                }
                
                // –ê–î–ê–ü–¢–ò–í–ù–´–ô –ü–û–î–•–û–î: –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—Ö–æ–¥–Ω–æ–π –≤–µ–∫—Ç–æ—Ä –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∏
                float[] inputArray = inputs.ToArray();
                float[] adjustedInputs;
                
                if (neural_network.layers[0] < inputArray.Length)
                {
                    // –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π –º–µ–Ω—å—à–µ, —á–µ–º –Ω–∞—à–∏ –¥–∞–Ω–Ω—ã–µ - –æ–±—Ä–µ–∑–∞–µ–º –ª–∏—à–Ω–µ–µ
                    adjustedInputs = new float[neural_network.layers[0]];
                    Array.Copy(inputArray, adjustedInputs, neural_network.layers[0]);
                    if (Time.frameCount % 5000 == 0 && instance_id % 10 == 0) // –õ–æ–≥–∏—Ä—É–µ–º –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ
                    {
                        Debug.LogWarning($"‚ö†Ô∏è [ID:{instance_id}] –û–±—Ä–µ–∑–∞–Ω—ã –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {inputArray.Length} -> {neural_network.layers[0]}");
                    }
                }
                else if (neural_network.layers[0] > inputArray.Length)
                {
                    // –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π –±–æ–ª—å—à–µ –Ω–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö - –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏
                    adjustedInputs = new float[neural_network.layers[0]];
                    Array.Copy(inputArray, adjustedInputs, inputArray.Length);
                    if (Time.frameCount % 5000 == 0 && instance_id % 10 == 0) // –õ–æ–≥–∏—Ä—É–µ–º –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ
                    {
                        Debug.LogWarning($"‚ö†Ô∏è [ID:{instance_id}] –î–æ–ø–æ–ª–Ω–µ–Ω—ã –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω—É–ª—è–º–∏: {inputArray.Length} -> {neural_network.layers[0]}");
                    }
                }
                else
                {
                    // –†–∞–∑–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    adjustedInputs = inputArray;
                }
                
                try
                {
                    // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                    float[] outputs = neural_network.FeedForward(adjustedInputs);
                    
                    // –ó–∞—â–∏—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
                    if (outputs == null)
                    {
                        Debug.LogError("‚ùå FeedForward –≤–µ—Ä–Ω—É–ª null –≤–º–µ—Å—Ç–æ –º–∞—Å—Å–∏–≤–∞ –≤—ã—Ö–æ–¥–æ–≤!");
                        return;
                    }

                    if (outputs.Length != neural_network.layers[neural_network.layers.Length - 1])
                    {
                        Debug.LogError($"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è! –û–∂–∏–¥–∞–µ—Ç—Å—è: {neural_network.layers[neural_network.layers.Length - 1]}, –ü–æ–ª—É—á–µ–Ω–æ: {outputs.Length}");
                        return;
                    }
                    
                    // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–õ–Ø –õ–£–ß–®–ï–ì–û –ê–ì–ï–ù–¢–ê: –°—Ä–∞–≤–Ω–∏–º –≤—Å–µ –≤—ã—Ö–æ–¥—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                    bool isTopAgent = fitness > 5.0f; // –ï—Å–ª–∏ —Ñ–∏—Ç–Ω–µ—Å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π - —ç—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ —Ö–æ—Ä–æ—à–∏–π –∞–≥–µ–Ω—Ç
                    
                    if (isTopAgent && Time.frameCount % 200 == 0)
                    {
                        StringBuilder sb = new StringBuilder();
                        sb.AppendLine($"\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–´–•–û–î–û–í –ù–ï–ô–†–û–°–ï–¢–ò [ID:{instance_id}, –§–∏—Ç–Ω–µ—Å:{fitness:F2}]:");
                        float maxOutput = 0f;
                        int nonZeroOutputs = 0;
                        
                        for (int i = 0; i < outputs.Length && i < 10; i++) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –≤—ã—Ö–æ–¥–æ–≤
                        {
                            sb.AppendLine($"  –í—ã—Ö–æ–¥ {i}: {outputs[i]:F6}");
                            if (!Mathf.Approximately(outputs[i], 0f))
                            {
                                nonZeroOutputs++;
                                maxOutput = Mathf.Max(maxOutput, Mathf.Abs(outputs[i]));
                            }
                        }
                        
                        if (nonZeroOutputs == 0)
                        {
                            sb.AppendLine("  ‚ö†Ô∏è –í–°–ï –í–´–•–û–î–´ –ù–ï–ô–†–û–°–ï–¢–ò –ù–£–õ–ï–í–´–ï!");
                            
                            // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                            SimulationManager manager = FindObjectOfType<SimulationManager>();
                            if (manager != null)
                            {
                                manager.WriteToLogFile($"–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê - –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ù–£–õ–ï–í–´–ï –í–´–•–û–î–´ [ID:{instance_id}, –í—Ä–µ–º—è:{Time.time:F1}]\n");
                                manager.WriteToLogFile($"–§–∏—Ç–Ω–µ—Å: {fitness:F2}, –í—Ö–æ–¥–æ–≤: {adjustedInputs.Length}, –í—ã—Ö–æ–¥–æ–≤: {outputs.Length}\n");
                                manager.WriteToLogFile("–ü–µ—Ä–≤—ã–µ 5 –≤—Ö–æ–¥–æ–≤: ");
                                
                                for (int i = 0; i < Math.Min(5, adjustedInputs.Length); i++)
                                {
                                    manager.WriteToLogFile($"{adjustedInputs[i]:F4} ");
                                }
                                
                                manager.WriteToLogFile("\n–ü–µ—Ä–≤—ã–µ 5 –≤—ã—Ö–æ–¥–æ–≤: ");
                                for (int i = 0; i < Math.Min(5, outputs.Length); i++)
                                {
                                    manager.WriteToLogFile($"{outputs[i]:F6} ");
                                }
                                
                                manager.WriteToLogFile("\n\n");
                            }
                        }
                        else
                        {
                            sb.AppendLine($"  ‚úì –ù–µ–Ω—É–ª–µ–≤—ã—Ö –≤—ã—Ö–æ–¥–æ–≤: {nonZeroOutputs}/{outputs.Length}, –ú–∞–∫—Å: {maxOutput:F6}");
                        }
                        
                        Debug.Log(sb.ToString());
                    }
                    
                    // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Å—Å–∏–≤ —Å—É—Å—Ç–∞–≤–æ–≤ –∏ last_actions –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
                    if (joints == null || last_actions == null)
                    {
                        Debug.LogError("‚ùå –ú–∞—Å—Å–∏–≤ —Å—É—Å—Ç–∞–≤–æ–≤ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–π –æ–∫–∞–∑–∞–ª—Å—è null!");
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–ø–∏—Å–∫–∞ —Å—É—Å—Ç–∞–≤–æ–≤
                    int actionCount = Math.Min(joints.Count, outputs.Length);
                    
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∫ —Å—É—Å—Ç–∞–≤–∞–º
                    for (int i = 0; i < actionCount; i++)
                    {
                        if (i >= joints.Count || joints[i] == null)
                            continue;
                            
                        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∫ —Å—É—Å—Ç–∞–≤—É
                        float action = outputs[i]; // –°–∏–≥–Ω–∞–ª —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1, 1]
                        
                        // –£—Å–∏–ª–∏–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å—É—Å—Ç–∞–≤–∞
                        if (use_differential_motor_control && joint_types.ContainsKey(joints[i]))
                        {
                            string jointType = joint_types[joints[i]];
                            
                            // –£—Å–∏–ª–∏–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –Ω–æ–≥
                            if (jointType == "leg")
                            {
                                action *= leg_motor_multiplier;
                            }
                            // –î–ª—è –ø–æ–∑–≤–æ–Ω–æ—á–Ω–∏–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                            else if (jointType == "spine")
                            {
                                action *= 0.7f;
                            }
                            // –î–ª—è —Ä—É–∫ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∏–ª—É —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                            else if (jointType == "arm")
                            {
                                action *= arm_motor_multiplier;
                            }
                        }
                        
                        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-1, 1] –ø–æ—Å–ª–µ –≤—Å–µ—Ö –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π
                        action = Mathf.Clamp(action, -1f, 1f);
                        
                        last_actions[i] = action; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                        
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –º–æ—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—Ö–æ–¥–∞ —Å–µ—Ç–∏
                        try
                        {
                            // –ú–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –º–æ—Ç–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã—Ö–æ–¥–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                            JointMotor motor = joints[i].motor;
                            
                            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ë–ê–ì–ò: Force —Ä–∞–≤–µ–Ω 1, –∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–≤–µ–Ω max_motor_force
                            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã
                            if (motor.force < max_motor_force * 0.9f)
                            {
                                motor.force = max_motor_force;
                                if (Time.frameCount % 1000 == 0 && instance_id % 10 == 0)
                                {
                                    Debug.LogWarning($"‚ö†Ô∏è [ID:{instance_id}] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∏–ª–∞ –º–æ—Ç–æ—Ä–∞: {joints[i].name} ({motor.force} –≤–º–µ—Å—Ç–æ {max_motor_force}). –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!");
                                    
                                    // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
                                    SimulationManager manager = FindObjectOfType<SimulationManager>();
                                    if (manager != null)
                                    {
                                        manager.WriteToLogFile($"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–∏–ª–∞ –º–æ—Ç–æ—Ä–∞ [ID:{instance_id}, –í—Ä–µ–º—è:{Time.time:F1}]\n");
                                        manager.WriteToLogFile($"–°—É—Å—Ç–∞–≤: {joints[i].name}, –°–∏–ª–∞: {motor.force} –≤–º–µ—Å—Ç–æ {max_motor_force}\n\n");
                                    }
                                }
                            }
                            
                            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ targetVelocity
                            motor.targetVelocity = action * max_velocity;
                            
                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—á–µ–Ω—å –º–∞–ª—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã
                            if (isTopAgent && Math.Abs(action) < 0.001f && Time.frameCount % 200 == i)
                            {
                                Debug.LogWarning($"‚ö†Ô∏è [ID:{instance_id}] –û—á–µ–Ω—å –º–∞–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ action={action} –¥–ª—è —Å—É—Å—Ç–∞–≤–∞ {i} ({joints[i].name})");
                                Debug.LogWarning($"   –ò—Å—Ö–æ–¥–Ω—ã–π –≤—ã—Ö–æ–¥ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {outputs[i]:F8}, –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {max_velocity}, –ò—Ç–æ–≥: {action * max_velocity:F8}");
                            }
                            
                            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ—Ç–æ—Ä–∞
                            joints[i].motor = motor;
                            
                            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º useMotor
                            if (!joints[i].useMotor)
                            {
                                joints[i].useMotor = true;
                                Debug.LogWarning($"‚ö†Ô∏è [ID:{instance_id}] –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π –º–æ—Ç–æ—Ä {joints[i].name} –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è! –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω.");
                            }
                        }
                        catch (Exception e)
                        {
                            Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ—Ç–æ—Ä–∞ –¥–ª—è —Å—É—Å—Ç–∞–≤–∞ {i}: {e.Message}");
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç –¥–µ–ª–∞–µ—Ç –∫–∞–∫–∏–µ-—Ç–æ –¥–≤–∏–∂–µ–Ω–∏—è - –í–ê–ñ–ù–û –î–õ–Ø –û–¢–õ–ê–î–ö–ò!
                    if (Time.frameCount % 100 == 0 && instance_id % 5 == 0) // –ß–∞—â–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º - –∫–∞–∂–¥—ã–µ 100 –∫–∞–¥—Ä–æ–≤ –≤–º–µ—Å—Ç–æ 500
                    {
                        bool anyMovement = false;
                        bool anyLegMovement = false;
                        float maxMotorOutput = 0f;
                        
                        for (int i = 0; i < actionCount; i++)
                        {
                            if (i < last_actions.Length && Mathf.Abs(last_actions[i]) > min_motor_velocity_threshold)
                            {
                                anyMovement = true;
                                maxMotorOutput = Mathf.Max(maxMotorOutput, Mathf.Abs(last_actions[i]));
                                
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–≤–∏–∂—É—Ç—Å—è –ª–∏ –Ω–æ–≥–∏
                                if (joints[i] != null && joint_types.ContainsKey(joints[i]) && joint_types[joints[i]] == "leg")
                                {
                                    anyLegMovement = true;
                                }
                            }
                        }
                        
                        // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
                        if (!anyMovement)
                        {
                            Debug.LogWarning($"‚ùå [ID:{instance_id}] –ê–≥–µ–Ω—Ç {name} –ù–ï –î–í–ò–ì–ê–ï–¢–°–Ø! –í—Å–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–æ—Ç–æ—Ä–æ–≤ –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ {min_motor_velocity_threshold}");
                        }
                        else if (!anyLegMovement)
                        {
                            Debug.LogWarning($"‚ö†Ô∏è [ID:{instance_id}] –ê–≥–µ–Ω—Ç {name} –Ω–µ –¥–≤–∏–≥–∞–µ—Ç –Ω–æ–≥–∞–º–∏! –ú–∞–∫—Å. –≤—ã—Ö–æ–¥: {maxMotorOutput:F2}, –§–∏—Ç–Ω–µ—Å: {fitness:F2}, –í—Ä–µ–º—è: {lifetime:F1}—Å");
                        }
                        else
                        {
                            // –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è
                            Vector3 displacement = transform.position - initial_position;
                            float distanceMoved = displacement.magnitude;
                            Debug.Log($"‚úÖ [ID:{instance_id}] –ê–≥–µ–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω: –ú–∞–∫—Å.–º–æ—Ç–æ—Ä={maxMotorOutput:F2}, " +
                                      $"–°–º–µ—â–µ–Ω–∏–µ={distanceMoved:F2}–º, –§–∏—Ç–Ω–µ—Å={fitness:F2}, –í—Ä–µ–º—è={lifetime:F1}—Å, " + 
                                      $"–ù–æ–≥–∏={anyLegMovement}");
                        }
                    }
                    
                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ
                    CalculateMovementReward();
                }
                catch (Exception e)
                {
                    Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {e.Message}\n{e.StackTrace}");
                }
            }
            catch (Exception e)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ UseNeuralNetworkControl: {e.Message}\n{e.StackTrace}");
            }
        }
        
        private void CheckHeadHeight()
        {
            if (head == null || is_disabled) return;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Å–æ—Ç—É –≥–æ–ª–æ–≤—ã
            float currentHeadHeight = head.position.y;
            
            if (currentHeadHeight < required_head_height)
            {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å—Ç–æ—è–Ω–∏—è
                standing_time = 0f;
                // –ë–æ–Ω—É—Å—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º, –Ω–æ –∏ –Ω–µ —à—Ç—Ä–∞—Ñ—É–µ–º - –ø—É—Å—Ç—å —É—á–∏—Ç—Å—è
            }
            else
            {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–æ—è–Ω–∏—è
                standing_time += Time.fixedDeltaTime;
                
                // –î–∞–µ–º –±–æ–Ω—É—Å –∑–∞ —Ö–æ—Ä–æ—à—É—é –≤—ã—Å–æ—Ç—É –≥–æ–ª–æ–≤—ã —Å —É—Å–∏–ª–µ–Ω–∏–µ–º –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ —Å—Ç–æ—è–Ω–∏–µ
                float heightBonus = head_height_reward;
                
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–æ–Ω—É—Å –ø—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–º —Å—Ç–æ—è–Ω–∏–∏
                if (standing_time > min_standing_time)
                {
                    heightBonus *= Mathf.Min(2.0f, 1.0f + (standing_time - min_standing_time) * 0.1f);
                }
                
                fitness += heightBonus * Time.fixedDeltaTime;
            }
        }
        
        private void EnsureMotorsEnabled()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ –º–æ—Ç–æ—Ä—ã —Å—É—Å—Ç–∞–≤–æ–≤
            foreach (HingeJoint joint in joints)
            {
                if (joint != null && !joint.useMotor)
                {
                    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ—Ç–æ—Ä–∞
                    JointMotor motor = joint.motor;
                    motor.force = max_motor_force; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–ª—É –º–æ—Ç–æ—Ä–∞
                    joint.motor = motor;
                    
                    // –í–∫–ª—é—á–∞–µ–º –º–æ—Ç–æ—Ä
                    joint.useMotor = true;
                    Debug.LogWarning($"‚ö†Ô∏è [ID:{instance_id}] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω –º–æ—Ç–æ—Ä –¥–ª—è {joint.name}!");
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–ª–∞ –º–æ—Ç–æ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                JointMotor currentMotor = joint.motor;
                if (currentMotor.force < max_motor_force * 0.9f)
                {
                    currentMotor.force = max_motor_force;
                    joint.motor = currentMotor;
                    Debug.LogWarning($"‚ö†Ô∏è [ID:{instance_id}] –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Å–∏–ª–∞ –º–æ—Ç–æ—Ä–∞ –¥–ª—è {joint.name}: {currentMotor.force} -> {max_motor_force}");
                }
            }
        }
        
        private void CheckTargetReached()
        {
            if (target_transform == null) return;
            
            // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏
            float distanceToTarget = Vector3.Distance(transform.position, target_transform.position);
            
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ (–ø–æ–¥–æ—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ)
            if (distanceToTarget < 1.5f && !success_reported)
            {
                success_reported = true;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à—É—é –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
                fitness += target_reward;
                if (neural_network != null)
                {
                    neural_network.fitness = fitness;
                }
                
                // –°–æ–æ–±—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å–∏–º—É–ª—è—Ü–∏–∏ –æ–± —É—Å–ø–µ—Ö–µ - –í–ê–ñ–ù–û–ï –°–û–ë–´–¢–ò–ï, –í–°–ï–ì–î–ê –õ–û–ì–ò–†–£–ï–ú
                if (simulation_manager != null)
                {
                    simulation_manager.ReportSuccess(this);
                    Debug.Log($"üéØ –£–°–ü–ï–•! –ê–≥–µ–Ω—Ç {instance_id} –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏! –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distanceToTarget:F2}–º, –§–∏—Ç–Ω–µ—Å: {fitness:F2}, –í—Ä–µ–º—è: {lifetime:F1}—Å");
                }
                
                // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
                DisableAgent("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å");
            }
        }
        
        private void CheckFallen()
        {
            if (head == null) return;
            
            // –ï—Å–ª–∏ –≥–æ–ª–æ–≤–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ - –∞–≥–µ–Ω—Ç —É–ø–∞–ª
            if (head.position.y < 0.3f)
            {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —á—Ç–æ–±—ã –±—ã–ª —Å—Ç–∏–º—É–ª –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–≤–∏–≥–∞—Ç—å—Å—è
                fitness -= fall_penalty * 0.7f;
                
                // –î–∞–∂–µ –µ—Å–ª–∏ —É–ø–∞–ª, –Ω–µ –æ–±–Ω—É–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é
                if (neural_network != null)
                {
                    neural_network.fitness = fitness;
                }
                
                // –í–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ - –ø–∞–¥–µ–Ω–∏–µ, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞ –∞–≥–µ–Ω—Ç–æ–≤
                if (instance_id % 20 == 0)
                {
                    Debug.Log($"üëá –ê–≥–µ–Ω—Ç {instance_id} —É–ø–∞–ª! –®—Ç—Ä–∞—Ñ: -{fall_penalty * 0.7f:F2}, –û–±—â–∏–π —Ñ–∏—Ç–Ω–µ—Å: {fitness:F2}");
                }
                
                // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ª–µ–∂–∏—Ç —Å–æ–≤—Å–µ–º –Ω–µ–ø–æ–¥–≤–∏–∂–Ω–æ
                Rigidbody rb = GetComponent<Rigidbody>();
                if (rb != null && rb.linearVelocity.magnitude < 0.1f)
                {
                    DisableAgent("–£–ø–∞–ª –∏ –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è");
                }
                // –ò–Ω–∞—á–µ –¥–∞—ë–º —à–∞–Ω—Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–ª—É—á–∞–π
            }
        }
        
        private void DisableAgent(string reason)
        {
            if (!is_disabled)
            {
                is_disabled = true;
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∞–≥–µ–Ω—Ç–æ–≤
                if (instance_id % 10 == 0)
                {
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    Vector3 displacement = transform.position - initial_position;
                    float distanceX = Mathf.Abs(displacement.x);
                    float distanceZ = displacement.z;
                    
                    Debug.Log($"‚õî –ê–≥–µ–Ω—Ç {instance_id} –æ—Ç–∫–ª—é—á–µ–Ω: {reason}, " +
                              $"–ü—Ä–æ–π–¥–µ–Ω–æ: {distanceZ:F2}–º –≤–ø–µ—Ä–µ–¥, {distanceX:F2}–º –≤–±–æ–∫, " +
                              $"–í—Ä–µ–º—è –∂–∏–∑–Ω–∏: {lifetime:F1}—Å, –§–∏—Ç–Ω–µ—Å: {fitness:F2}");
                }
            }
        }
        
        // –ú–µ—Ç–æ–¥—ã –¥–ª—è SimulationManager
        public void SetFitness(float value) { fitness = value; }
        public NeuralNetwork GetBrain() { return neural_network; }
        public bool IsSuccessful() { return success_reported; }
        public float GetStartTime() { return generation_start_time; }
        public float GetLifetime() { return lifetime; }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        public Vector3 GetInitialPosition() { return initial_position; }
        
        // –°–±—Ä–æ—Å –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è
        public void ResetAgent()
        {
            try
            {
                fitness = 0f;
                is_disabled = false;
                success_reported = false;
                lifetime = 0f;
                standing_time = 0f; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å—Ç–æ—è–Ω–∏—è
                last_moved_time = Time.time; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
                last_position = transform.position;
                initial_position = transform.position; // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                
                // –°–ë–†–û–° –§–ò–ó–ò–ö–ò: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ Rigidbody
                Rigidbody rb = GetComponent<Rigidbody>();
                if (rb != null)
                {
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
                    rb.linearVelocity = Vector3.zero;
                    rb.angularVelocity = Vector3.zero;
                    
                    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    if (float.IsInfinity(transform.position.x) || float.IsInfinity(transform.position.y) || float.IsInfinity(transform.position.z))
                    {
                        Debug.LogError("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è! –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫ –Ω—É–ª—é.");
                        transform.position = Vector3.zero;
                    }
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–∏–ª—ã
                    rb.ResetCenterOfMass();
                    rb.ResetInertiaTensor();
                    rb.Sleep(); // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
                    rb.WakeUp(); // –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ Rigidbody
                foreach (Rigidbody childRb in GetComponentsInChildren<Rigidbody>())
                {
                    if (childRb != null && childRb != rb)
                    {
                        childRb.linearVelocity = Vector3.zero;
                        childRb.angularVelocity = Vector3.zero;
                        childRb.Sleep();
                        childRb.WakeUp();
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä last_actions –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–µ—Ç–∏
                if (last_actions == null || last_actions.Length != joints.Count)
                {
                    last_actions = new float[joints.Count];
                    Debug.Log($"üîÑ ResetAgent: –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–∞—Å—Å–∏–≤ last_actions —Å —Ä–∞–∑–º–µ—Ä–æ–º {joints.Count}");
                }
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–µ–π—Å—Ç–≤–∏–π
                for (int i = 0; i < last_actions.Length; i++)
                {
                    last_actions[i] = 0f;
                }
                
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ joints –Ω–µ null
                if (joints == null)
                {
                    Debug.LogError("‚ùå –ú–∞—Å—Å–∏–≤ —Å—É—Å—Ç–∞–≤–æ–≤ –æ–∫–∞–∑–∞–ª—Å—è null –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–≥–µ–Ω—Ç–∞!");
                    return;
                }
                
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Å—É—Å—Ç–∞–≤—ã –≤ —Ä–∞–±–æ—á–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                foreach (HingeJoint joint in joints)
                {
                    if (joint != null)
                    {
                        try
                        {
                            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–æ—Ä–æ—Å—Ç—å, —Å–∏–ª—É –æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–∏–∑–º–µ–Ω–Ω–æ–π
                            JointMotor motor = joint.motor;
                            motor.targetVelocity = 0f; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
                            joint.motor = motor;
                            // –ù–µ –º–µ–Ω—è–µ–º force –∏ useMotor
                        }
                        catch (Exception e)
                        {
                            Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –º–æ—Ç–æ—Ä–∞ —Å—É—Å—Ç–∞–≤–∞: {e.Message}");
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Debug.LogError($"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ ResetAgent: {e.Message}\n{e.StackTrace}");
            }
        }
        
        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π –≤ —Ñ–∏–∑–∏–∫–µ
        private void CheckForPhysicsAnomalies()
        {
            try
            {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—ã–π Rigidbody
                Rigidbody rb = GetComponent<Rigidbody>();
                if (rb != null)
                {
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    if (float.IsInfinity(rb.linearVelocity.x) || float.IsNaN(rb.linearVelocity.x) ||
                        float.IsInfinity(rb.linearVelocity.y) || float.IsNaN(rb.linearVelocity.y) ||
                        float.IsInfinity(rb.linearVelocity.z) || float.IsNaN(rb.linearVelocity.z) ||
                        rb.linearVelocity.magnitude > 20f) // –°–Ω–∏–∂–∞–µ–º —Å 50 –¥–æ 20
                    {
                        Debug.LogWarning($"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {rb.linearVelocity}. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É.");
                        rb.linearVelocity = Vector3.zero;
                        rb.angularVelocity = Vector3.zero;
                        rb.Sleep(); // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É –Ω–∞ –º–æ–º–µ–Ω—Ç
                        rb.WakeUp(); // –ò —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–∑–∏—Ü–∏–∏
                    if (float.IsInfinity(transform.position.x) || float.IsInfinity(transform.position.y) || 
                        float.IsInfinity(transform.position.z) || float.IsNaN(transform.position.x) ||
                        float.IsNaN(transform.position.y) || float.IsNaN(transform.position.z))
                    {
                        Debug.LogError("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è! –û—Ç–∫–ª—é—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞.");
                        DisableAgent("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è");
                        
                        // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑—É–º–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                        if (spawn_point != null) 
                        {
                            transform.position = spawn_point.position;
                        }
                        else 
                        {
                            transform.position = Vector3.zero + new Vector3(0, 1, 0); // –ù–µ–±–æ–ª—å—à–æ–π –ø–æ–¥—ä–µ–º –Ω–∞–¥ –∑–µ–º–ª–µ–π
                        }
                        
                        rb.linearVelocity = Vector3.zero;
                        rb.angularVelocity = Vector3.zero;
                        return;
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—é (–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —Å–º–µ—â–µ–Ω–∏–µ)
                    float distanceMoved = Vector3.Distance(transform.position, last_position);
                    if (distanceMoved > 3f) // –°–Ω–∏–∂–∞–µ–º —Å 5 –¥–æ 3
                    {
                        Debug.LogWarning($"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–æ–º–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ: {distanceMoved}–º. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –ø—Ä–µ–∂–Ω—é—é –ø–æ–∑–∏—Ü–∏—é.");
                        transform.position = last_position;
                        rb.linearVelocity = Vector3.zero;
                        rb.angularVelocity = Vector3.zero;
                    }

                    // –ñ–µ—Å—Ç–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ö–æ–¥–∞ –¥–∞–ª–µ–∫–æ –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                    if (Mathf.Abs(transform.position.x) > 100f || 
                        Mathf.Abs(transform.position.y) > 100f || 
                        Mathf.Abs(transform.position.z) > 100f)
                    {
                        Debug.LogWarning($"‚ö†Ô∏è –ê–≥–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –Ω–∞—á–∞–ª–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {transform.position}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–ª–∏–∂–µ.");
                        Vector3 clampedPosition = new Vector3(
                            Mathf.Clamp(transform.position.x, -100f, 100f),
                            Mathf.Clamp(transform.position.y, 0f, 100f), // –ù–µ –Ω–∏–∂–µ –∑–µ–º–ª–∏
                            Mathf.Clamp(transform.position.z, -100f, 100f)
                        );
                        transform.position = clampedPosition;
                        rb.linearVelocity = Vector3.zero;
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ Rigidbody
                foreach (Rigidbody childRb in GetComponentsInChildren<Rigidbody>())
                {
                    if (childRb != null && childRb != rb)
                    {
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                        if (float.IsInfinity(childRb.linearVelocity.x) || float.IsNaN(childRb.linearVelocity.x) ||
                            float.IsInfinity(childRb.linearVelocity.y) || float.IsNaN(childRb.linearVelocity.y) ||
                            float.IsInfinity(childRb.linearVelocity.z) || float.IsNaN(childRb.linearVelocity.z) ||
                            childRb.linearVelocity.magnitude > 20f) // –°–Ω–∏–∂–∞–µ–º —Å 50 –¥–æ 20
                        {
                            Debug.LogWarning($"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –¥–æ—á–µ—Ä–Ω–µ–º –æ–±—ä–µ–∫—Ç–µ: {childRb.name}. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–∑–∏–∫—É.");
                            childRb.linearVelocity = Vector3.zero;
                            childRb.angularVelocity = Vector3.zero;
                            childRb.Sleep(); // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –Ω–∞ –º–æ–º–µ–Ω—Ç
                            childRb.WakeUp(); // –ò —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–∑–∏—Ü–∏–∏
                        if (float.IsInfinity(childRb.transform.position.x) || float.IsInfinity(childRb.transform.position.y) || 
                            float.IsInfinity(childRb.transform.position.z) || float.IsNaN(childRb.transform.position.x) ||
                            float.IsNaN(childRb.transform.position.y) || float.IsNaN(childRb.transform.position.z))
                        {
                            Debug.LogError($"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –¥–æ—á–µ—Ä–Ω–µ–º –æ–±—ä–µ–∫—Ç–µ: {childRb.name}. –û—Ç–∫–ª—é—á–∞–µ–º –∞–≥–µ–Ω—Ç–∞.");
                            DisableAgent("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –¥–æ—á–µ—Ä–Ω–µ–º –æ–±—ä–µ–∫—Ç–µ");
                            
                            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—é —Ñ–∏–∑–∏–∫—É –∞–≥–µ–Ω—Ç–∞
                            ResetAgent();
                            return;
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ –≤ CheckForPhysicsAnomalies: {e.Message}");
            }
        }
        
        // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–∑–∏–∫–∏ –≤ FixedUpdate
        private void FixedUpdatePhysicsChecks()
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—ã–π Rigidbody
            Rigidbody rb = GetComponent<Rigidbody>();
            if (rb != null)
            {
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π
                if (rb.linearVelocity.magnitude > 10f)
                {
                    rb.linearVelocity = Vector3.ClampMagnitude(rb.linearVelocity, 10f);
                }
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —É–≥–ª–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
                if (rb.angularVelocity.magnitude > 5f)
                {
                    rb.angularVelocity = Vector3.ClampMagnitude(rb.angularVelocity, 5f);
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ Rigidbody
            foreach (Rigidbody childRb in GetComponentsInChildren<Rigidbody>())
            {
                if (childRb != null && childRb != rb)
                {
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–∏–Ω–µ–π–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
                    if (childRb.linearVelocity.magnitude > 10f)
                    {
                        childRb.linearVelocity = Vector3.ClampMagnitude(childRb.linearVelocity, 10f);
                    }
                    
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —É–≥–ª–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
                    if (childRb.angularVelocity.magnitude > 5f)
                    {
                        childRb.angularVelocity = Vector3.ClampMagnitude(childRb.angularVelocity, 5f);
                    }
                }
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ CalculateMovementReward
        private void CalculateMovementReward()
        {
            if (neural_network == null || is_disabled) return;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
            float distanceMoved = Vector3.Distance(transform.position, last_position);
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ
            if (distanceMoved > 0.001f)
            {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
                Vector3 localDirection = transform.InverseTransformDirection(transform.position - last_position);
                float forwardMovement = localDirection.z;
                
                // –î–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É —Ç–æ–ª—å–∫–æ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
                if (forwardMovement > 0)
                {
                    // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ, –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
                    float reward = forwardMovement * movement_reward;
                    
                    // –ï—Å–ª–∏ —Ü–µ–ª—å —É–∫–∞–∑–∞–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–ª–∏
                    if (target_transform != null)
                    {
                        Vector3 dirToTarget = target_transform.position - transform.position;
                        dirToTarget.y = 0; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É
                        dirToTarget.Normalize();
                        
                        Vector3 moveDir = transform.position - last_position;
                        moveDir.y = 0; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É
                        if (moveDir.magnitude > 0.001f)
                        {
                            moveDir.Normalize();
                            
                            // –°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
                            float dotProduct = Vector3.Dot(moveDir, dirToTarget);
                            
                            // –ï—Å–ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –≤ —Å—Ç–æ—Ä–æ–Ω—É —Ü–µ–ª–∏ (—É–≥–æ–ª < 90¬∞)
                            if (dotProduct > 0)
                            {
                                reward *= (1f + dotProduct * target_direction_multiplier);
                            }
                        }
                    }
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
                    fitness += reward;
                    if (neural_network != null)
                    {
                        neural_network.fitness = fitness;
                    }
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
                    last_moved_time = Time.time;
                }
            }
            else if (Time.time - last_moved_time > 2.0f)
            {
                // –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –±–æ–ª–µ–µ 2 —Å–µ–∫—É–Ω–¥
                fitness -= no_movement_penalty * Time.deltaTime;
                
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∏—Ç–Ω–µ—Å –Ω–µ —Å—Ç–∞–Ω–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∏–∑-–∑–∞ —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ
                if (fitness < 0)
                {
                    fitness = 0;
                }
                
                if (neural_network != null)
                {
                    neural_network.fitness = fitness;
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
            last_position = transform.position;
        }

#if UNITY_EDITOR
        // –û—Å—Ç–∞–≤–ª—è—é —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ—Ç–æ—Ä–æ–≤, –±–µ–∑ –ø–æ–ø—ã—Ç–æ–∫ –∏—Ö –≤–∫–ª—é—á–∏—Ç—å
        [UnityEngine.ContextMenu("–ü–†–û–í–ï–†–ö–ê: –°—Ç–∞—Ç—É—Å –º–æ—Ç–æ—Ä–æ–≤")]
        public void CheckMotorStatus()
        {
            if (joints == null || joints.Count == 0)
            {
                Debug.LogError("‚ùå –°—É—Å—Ç–∞–≤—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–Ω–∞—á–∞–ª–∞.");
                return;
            }
            
            int enabled = 0;
            int disabled = 0;
            List<string> disabledJoints = new List<string>();
            
            foreach (HingeJoint joint in joints)
            {
                if (joint == null) continue;
                
                if (joint.useMotor)
                {
                    enabled++;
                }
                else
                {
                    disabled++;
                    disabledJoints.Add(joint.name);
                }
            }
            
            if (disabled > 0)
            {
                Debug.LogWarning($"‚ö†Ô∏è –ù–ê–ô–î–ï–ù–´ –û–¢–ö–õ–Æ–ß–ï–ù–ù–´–ï –ú–û–¢–û–†–´: {disabled} –∏–∑ {joints.Count}");
                Debug.LogWarning($"‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å—É—Å—Ç–∞–≤—ã: {string.Join(", ", disabledJoints)}");
                Debug.Log("üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Ä—É—á–Ω—É—é –≤–∫–ª—é—á–∏—Ç—å –º–æ—Ç–æ—Ä—ã –≤ –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä–µ Unity.");
            }
            else
            {
                Debug.Log($"‚úÖ –ó–ê–ï–ë–ò–°–¨! –í—Å–µ {enabled} –º–æ—Ç–æ—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!");
            }
        }
#endif

        // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–Ω–æ–∂–∏—Ç–µ–ª—è –ª–∏–º–∏—Ç–æ–≤ —É–≥–ª–æ–≤ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        public void SetAngleLimitMultiplier(float multiplier)
        {
            angle_limit_multiplier = multiplier;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –∫–æ –≤—Å–µ–º —Å—É—Å—Ç–∞–≤–∞–º
            foreach (HingeJoint joint in joints)
            {
                if (joint != null)
                {
                    JointLimits limits = joint.limits;
                    
                    // –°–Ω–∞—á–∞–ª–∞ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
                    float originalMin = limits.min / angle_limit_multiplier;
                    float originalMax = limits.max / angle_limit_multiplier;
                    
                    // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
                    limits.min = originalMin * multiplier;
                    limits.max = originalMax * multiplier;
                    
                    joint.limits = limits;
                }
            }
            
            Debug.Log($"üîÑ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ª–∏–º–∏—Ç–æ–≤ —É–≥–ª–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {multiplier}. –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∫ {joints.Count} —Å—É—Å—Ç–∞–≤–∞–º.");
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–Ω–æ–∂–∏—Ç–µ–ª—è –ª–∏–º–∏—Ç–æ–≤ —É–≥–ª–æ–≤
        public float GetAngleLimitMultiplier()
        {
            return angle_limit_multiplier;
        }

        [UnityEngine.ContextMenu("–£–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç—ã —É–≥–ª–æ–≤ –≤ 1.5 —Ä–∞–∑–∞")]
        public void IncreaseLimits()
        {
            SetAngleLimitMultiplier(1.5f);
        }

        [UnityEngine.ContextMenu("–£–º–µ–Ω—å—à–∏—Ç—å –ª–∏–º–∏—Ç—ã —É–≥–ª–æ–≤ –≤ 0.5 —Ä–∞–∑–∞")]
        public void DecreaseLimits()
        {
            SetAngleLimitMultiplier(0.5f);
        }

        [UnityEngine.ContextMenu("–°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã —É–≥–ª–æ–≤ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º")]
        public void ResetLimits()
        {
            SetAngleLimitMultiplier(1.0f);
         }

        // –î–û–ë–ê–í–õ–Ø–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î –°–¢–ê–¢–ò–°–¢–ò–ö–ò –î–õ–Ø –í–´–ó–û–í–ê –ò–ó SimulationManager
        public string GetAgentStats()
        {
            if (neural_network == null) return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ —Å–æ–∑–¥–∞–Ω–∞)";
            
            Vector3 displacement = transform.position - initial_position;
            float totalDistance = displacement.magnitude;
            float forwardDistance = displacement.z;
            float sideDistance = Mathf.Abs(displacement.x);
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—É—Å—Ç–∞–≤–æ–≤
            int activeJoints = 0;
            int activeLegJoints = 0;
            
            if (last_actions != null)
            {
                for (int i = 0; i < last_actions.Length; i++)
                {
                    if (Mathf.Abs(last_actions[i]) > min_motor_velocity_threshold)
                    {
                        activeJoints++;
                        
                        if (i < joints.Count && joint_types.ContainsKey(joints[i]) && joint_types[joints[i]] == "leg")
                        {
                            activeLegJoints++;
                        }
                    }
                }
            }
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            return $"[ID:{instance_id}] –§–∏—Ç–Ω–µ—Å:{fitness:F2} " +
                   $"–í—Ä–µ–º—è:{lifetime:F1}—Å " +
                   $"–í–ø–µ—Ä–µ–¥:{forwardDistance:F2}–º " +
                   $"–í–±–æ–∫:{sideDistance:F2}–º " +
                   $"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:{activeJoints}/{joints.Count} " +
                   $"–ù–æ–≥–∏:{activeLegJoints}/{joints.Count(j => joint_types.ContainsKey(j) && joint_types[j] == "leg")}";
        }

        // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –º–æ—Ç–æ—Ä–æ–≤
        private void ResetAllMotors()
        {
            if (joints == null || joints.Count == 0)
            {
                // –ù–∞–π–¥–µ–º —Å—É—Å—Ç–∞–≤—ã, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏
                HingeJoint[] foundJoints = GetComponentsInChildren<HingeJoint>(true);
                if (foundJoints.Length > 0)
                {
                    joints = new List<HingeJoint>(foundJoints);
                }
                else
                {
                    Debug.LogError($"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Å—É—Å—Ç–∞–≤—ã (HingeJoint) –¥–ª—è {name}!");
                    return;
                }
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –º–æ—Ç–æ—Ä—ã
            foreach (HingeJoint joint in joints)
            {
                if (joint == null) continue;
                
                JointMotor motor = joint.motor;
                motor.force = max_motor_force; // –í–ê–ñ–ù–û: —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–∏–ª—É –º–æ—Ç–æ—Ä–∞
                motor.targetVelocity = 0;
                joint.motor = motor;
                joint.useMotor = true;
            }
            
            Debug.Log($"‚úÖ [ID:{instance_id}] –í—Å–µ –º–æ—Ç–æ—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã! –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∏–ª–∞ = {max_motor_force}");
        }

        // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –¥–∞–º–ø–∞ –≤–µ—Å–æ–≤ –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        public void DumpNeuralDebugInfo(bool isBestAgent = false)
        {
            if (neural_network == null) return;
            
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"========== –î–ê–ú–ü –ù–ï–ô–†–û–°–ï–¢–ò –ê–ì–ï–ù–¢–ê {instance_id} ==========");
            sb.AppendLine($"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏: [{string.Join("-", neural_network.layers)}]");
            sb.AppendLine($"–§–∏—Ç–Ω–µ—Å: {neural_network.fitness:F4}");
            sb.AppendLine($"L—É—á—à–∏–π –∞–≥–µ–Ω—Ç?: {(isBestAgent ? "–î–ê" : "–Ω–µ—Ç")}");
            
            // –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤—Ö–æ–¥ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º –≤—ã—Ö–æ–¥
            if (last_actions != null)
            {
                sb.AppendLine("\n–ü–û–°–õ–ï–î–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø:");
                for (int i = 0; i < last_actions.Length && i < joints.Count; i++)
                {
                    string jointName = joints[i] != null ? joints[i].name : "unknown";
                    string jointType = joints[i] != null && joint_types.ContainsKey(joints[i]) ? joint_types[joints[i]] : "unknown";
                    sb.AppendLine($"  –°—É—Å—Ç–∞–≤ {i} ({jointName}, —Ç–∏–ø: {jointType}): action={last_actions[i]:F6}, velocity={last_actions[i] * max_velocity:F2}");
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–ª—å
                    if (Mathf.Approximately(last_actions[i], 0f))
                    {
                        sb.AppendLine($"    ‚ö†Ô∏è –°–ò–ì–ù–ê–õ –†–ê–í–ï–ù –ù–£–õ–Æ!");
                    }
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º –≤–µ—Å–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è
            int outputLayerIndex = neural_network.weights.Length - 1;
            float totalAbsWeightSum = 0;
            int zeroWeights = 0;
            int totalWeights = 0;
            
            sb.AppendLine("\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ï–°–û–í –í–´–•–û–î–ù–û–ì–û –°–õ–û–Ø:");
            for (int j = 0; j < neural_network.weights[outputLayerIndex].Length; j++)
            {
                float absSum = 0;
                for (int k = 0; k < neural_network.weights[outputLayerIndex][j].Length; k++)
                {
                    float w = neural_network.weights[outputLayerIndex][j][k];
                    absSum += Mathf.Abs(w);
                    totalAbsWeightSum += Mathf.Abs(w);
                    totalWeights++;
                    if (Mathf.Approximately(w, 0f)) zeroWeights++;
                }
                
                sb.AppendLine($"  –ù–µ–π—Ä–æ–Ω {j}: AbsSum={absSum:F4}, Bias={neural_network.biases[outputLayerIndex][j]:F4}");
                
                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                if (absSum < 0.1f)
                {
                    sb.AppendLine($"    ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ú–ê–õ–´–ï –í–ï–°–ê! AbsSum={absSum:F4}");
                }
                
                if (Mathf.Approximately(neural_network.biases[outputLayerIndex][j], 0f) && absSum < 0.5f)
                {
                    sb.AppendLine($"    ‚ö†Ô∏è –ù–£–õ–ï–í–û–ï –°–ú–ï–©–ï–ù–ò–ï –ò –ú–ê–õ–´–ï –í–ï–°–ê! –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω—É–ª—è –Ω–∞ –≤—ã—Ö–æ–¥–µ.");
                }
            }
            
            sb.AppendLine($"\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –í–ï–°–ê–ú –í–´–•–û–î–ù–û–ì–û –°–õ–û–Ø:");
            sb.AppendLine($"  –û–±—â–∞—è —Å—É–º–º–∞ –º–æ–¥—É–ª–µ–π –≤–µ—Å–æ–≤: {totalAbsWeightSum:F4}");
            sb.AppendLine($"  –ù—É–ª–µ–≤—ã—Ö –≤–µ—Å–æ–≤: {zeroWeights}/{totalWeights} ({(float)zeroWeights/totalWeights*100:F1}%)");
            
            if (totalAbsWeightSum < totalWeights * 0.1f)
            {
                sb.AppendLine($"  ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ú–ê–õ–´–ï –í–ï–°–ê –í –í–´–•–û–î–ù–û–ú –°–õ–û–ï! –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –≤–µ—Å–æ–≤: {totalAbsWeightSum/totalWeights:F4}");
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—Ç–æ—Ä–∞—Ö
            sb.AppendLine("\n–°–¢–ê–¢–£–° –ú–û–¢–û–†–û–í:");
            int enabledMotors = 0;
            int totalMotors = joints.Count;
            
            foreach (HingeJoint joint in joints)
            {
                if (joint != null && joint.useMotor)
                {
                    enabledMotors++;
                }
            }
            
            sb.AppendLine($"  –í–∫–ª—é—á–µ–Ω–æ –º–æ—Ç–æ—Ä–æ–≤: {enabledMotors}/{totalMotors}");
            
            // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            sb.AppendLine("\n–ö–õ–Æ–ß–ï–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:");
            sb.AppendLine($"  max_velocity: {max_velocity:F2}");
            sb.AppendLine($"  max_motor_force: {max_motor_force:F2}");
            sb.AppendLine($"  leg_motor_multiplier: {leg_motor_multiplier:F2}");
            sb.AppendLine($"  arm_motor_multiplier: {arm_motor_multiplier:F2}");
            sb.AppendLine($"  motor_update_interval: {motor_update_interval:F4}");
            sb.AppendLine("=========================================");
            
            Debug.Log(sb.ToString());
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ—Å–æ–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π
        [UnityEngine.ContextMenu("–§–û–†–°–ò–†–û–í–ê–¢–¨ –ù–ï–ù–£–õ–ï–í–´–ï –í–ï–°–ê")]
        public void ForceNonZeroInitialization()
        {
            if (neural_network == null)
            {
                Debug.LogError("‚ùå –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");
                return;
            }
            
            Debug.Log($"üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –≤–µ—Å–æ–≤ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ {instance_id}...");
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Å–ª–æ–π
            int outputLayerIndex = neural_network.weights.Length - 1;
            
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ–π—Ä–æ–Ω–∞ –≤ –≤—ã—Ö–æ–¥–Ω–æ–º —Å–ª–æ–µ
            for (int j = 0; j < neural_network.weights[outputLayerIndex].Length; j++)
            {
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –Ω–µ–Ω—É–ª–µ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
                neural_network.biases[outputLayerIndex][j] = UnityEngine.Random.Range(0.1f, 0.3f) * 
                    (UnityEngine.Random.value > 0.5f ? 1f : -1f);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Å–∞ –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏
                for (int k = 0; k < neural_network.weights[outputLayerIndex][j].Length; k++)
                {
                    // –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 30% —É—Å–∏–ª–∏–≤–∞–µ–º –≤–µ—Å
                    if (UnityEngine.Random.value < 0.3f)
                    {
                        neural_network.weights[outputLayerIndex][j][k] = UnityEngine.Random.Range(0.1f, 0.5f) * 
                            (UnityEngine.Random.value > 0.5f ? 1f : -1f);
                    }
                }
            }
            
            Debug.Log($"‚úÖ –í–µ—Å–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã! –ê–≥–µ–Ω—Ç {instance_id} –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –¥–≤–∏–≥–∞—Ç—å—Å—è.");
            
            // –î–∞–º–ø–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å–µ—Ç–∏
            DumpNeuralDebugInfo();
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª)
        public string GetDetailedDebugInfo(bool isBestAgent = false)
        {
            if (neural_network == null) return "–ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!\n";
            
            StringBuilder sb = new StringBuilder();
            sb.AppendLine($"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ç–∏: [{string.Join("-", neural_network.layers)}]");
            sb.AppendLine($"–§–∏—Ç–Ω–µ—Å: {neural_network.fitness:F4}");
            sb.AppendLine($"–õ—É—á—à–∏–π –∞–≥–µ–Ω—Ç?: {(isBestAgent ? "–î–ê" : "–Ω–µ—Ç")}");
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
            if (last_actions != null)
            {
                sb.AppendLine("\n–ü–û–°–õ–ï–î–ù–ò–ï –î–ï–ô–°–¢–í–ò–Ø:");
                for (int i = 0; i < last_actions.Length && i < joints.Count; i++)
                {
                    string jointName = joints[i] != null ? joints[i].name : "unknown";
                    string jointType = joints[i] != null && joint_types.ContainsKey(joints[i]) ? joint_types[joints[i]] : "unknown";
                    sb.AppendLine($"  –°—É—Å—Ç–∞–≤ {i} ({jointName}, —Ç–∏–ø: {jointType}): action={last_actions[i]:F6}, velocity={last_actions[i] * max_velocity:F2}");
                    
                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–ª—å
                    if (Mathf.Approximately(last_actions[i], 0f))
                    {
                        sb.AppendLine($"    –°–ò–ì–ù–ê–õ –†–ê–í–ï–ù –ù–£–õ–Æ!");
                    }
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∏–º –≤–µ—Å–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è
            int outputLayerIndex = neural_network.weights.Length - 1;
            float totalAbsWeightSum = 0;
            int zeroWeights = 0;
            int totalWeights = 0;
            
            sb.AppendLine("\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ï–°–û–í –í–´–•–û–î–ù–û–ì–û –°–õ–û–Ø:");
            for (int j = 0; j < neural_network.weights[outputLayerIndex].Length; j++)
            {
                float absSum = 0;
                for (int k = 0; k < neural_network.weights[outputLayerIndex][j].Length; k++)
                {
                    float w = neural_network.weights[outputLayerIndex][j][k];
                    absSum += Mathf.Abs(w);
                    totalAbsWeightSum += Mathf.Abs(w);
                    totalWeights++;
                    if (Mathf.Approximately(w, 0f)) zeroWeights++;
                }
                
                sb.AppendLine($"  –ù–µ–π—Ä–æ–Ω {j}: AbsSum={absSum:F4}, Bias={neural_network.biases[outputLayerIndex][j]:F4}");
                
                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                if (absSum < 0.1f)
                {
                    sb.AppendLine($"    –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ú–ê–õ–´–ï –í–ï–°–ê! AbsSum={absSum:F4}");
                }
                
                if (Mathf.Approximately(neural_network.biases[outputLayerIndex][j], 0f) && absSum < 0.5f)
                {
                    sb.AppendLine($"    –ù–£–õ–ï–í–û–ï –°–ú–ï–©–ï–ù–ò–ï –ò –ú–ê–õ–´–ï –í–ï–°–ê! –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω—É–ª—è –Ω–∞ –≤—ã—Ö–æ–¥–µ.");
                }
            }
            
            sb.AppendLine($"\n–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –í–ï–°–ê–ú –í–´–•–û–î–ù–û–ì–û –°–õ–û–Ø:");
            sb.AppendLine($"  –û–±—â–∞—è —Å—É–º–º–∞ –º–æ–¥—É–ª–µ–π –≤–µ—Å–æ–≤: {totalAbsWeightSum:F4}");
            sb.AppendLine($"  –ù—É–ª–µ–≤—ã—Ö –≤–µ—Å–æ–≤: {zeroWeights}/{totalWeights} ({(float)zeroWeights/totalWeights*100:F1}%)");
            
            if (totalAbsWeightSum < totalWeights * 0.1f)
            {
                sb.AppendLine($"  –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ú–ê–õ–´–ï –í–ï–°–ê –í –í–´–•–û–î–ù–û–ú –°–õ–û–ï! –°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –≤–µ—Å–æ–≤: {totalAbsWeightSum/totalWeights:F4}");
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ—Ç–æ—Ä–∞—Ö
            sb.AppendLine("\n–°–¢–ê–¢–£–° –ú–û–¢–û–†–û–í:");
            int enabledMotors = 0;
            int totalMotors = joints.Count;
            
            foreach (HingeJoint joint in joints)
            {
                if (joint != null && joint.useMotor)
                {
                    enabledMotors++;
                }
            }
            
            sb.AppendLine($"  –í–∫–ª—é—á–µ–Ω–æ –º–æ—Ç–æ—Ä–æ–≤: {enabledMotors}/{totalMotors}");
            
            // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            sb.AppendLine("\n–ö–õ–Æ–ß–ï–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:");
            sb.AppendLine($"  max_velocity: {max_velocity:F2}");
            sb.AppendLine($"  max_motor_force: {max_motor_force:F2}");
            sb.AppendLine($"  leg_motor_multiplier: {leg_motor_multiplier:F2}");
            sb.AppendLine($"  arm_motor_multiplier: {arm_motor_multiplier:F2}");
            sb.AppendLine($"  motor_update_interval: {motor_update_interval:F4}");
            
            return sb.ToString();
        }
    }
} 