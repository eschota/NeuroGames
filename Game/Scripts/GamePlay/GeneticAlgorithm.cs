using UnityEngine;
using System.Collections.Generic;
using System;

namespace Game.Scripts.GamePlay
{
    [System.Serializable]
    public class GeneticAlgorithm
    {
        public int[] neural_layers = new int[] { 10, 16, 8 };
        public int population_size = 50;
        public float mutation_rate = 0.1f;
        
        // –°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Å–ª–æ—è–º
        public NeuralNetwork CreateRandomNetwork()
        {
            if (neural_layers == null || neural_layers.Length < 2)
            {
                Debug.LogError("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ª–æ—ë–≤ –≤ GeneticAlgorithm!");
                return null;
            }

            try
            {
                NeuralNetwork network = new NeuralNetwork(neural_layers);
                network.Randomize(); // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ Randomize –∏–∑ NeuralNetwork
                
                // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–æ—Ä—Å–∏—Ä—É–µ–º –Ω–µ–Ω—É–ª–µ–≤—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞ –∏ —Å–º–µ—â–µ–Ω–∏—è
                // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Å–µ—Ç–∏ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å —à–µ–≤–µ–ª–∏—Ç—å—Å—è, –∞ –Ω–µ —Å—Ç–æ—è—Ç—å —Å—Ç–æ–ª–±–æ–º
                ForceNonZeroInitialization(network);
                
                return network;
            }
            catch (Exception e)
            {
                Debug.LogError($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∏: {e.Message}");
                throw;
            }
        }
        
        // –î–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        private void ForceNonZeroInitialization(NeuralNetwork network)
        {
            if (network == null || network.weights == null || network.biases == null) return;
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–Ω—É–ª–µ–≤—ã–µ —Å–º–µ—â–µ–Ω–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ—è
            int outputLayerIndex = network.biases.Length - 1;
            
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –Ω–µ–π—Ä–æ–Ω–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –Ω–µ–Ω—É–ª–µ–≤–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
            for (int i = 0; i < network.biases[outputLayerIndex].Length; i++)
            {
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –¥–ª—è –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞
                network.biases[outputLayerIndex][i] = UnityEngine.Random.Range(0.2f, 0.5f) * 
                    (UnityEngine.Random.value > 0.5f ? 1 : -1);
            }
            
            // –¢–∞–∫–∂–µ —Å–ª–µ–≥–∫–∞ —É—Å–∏–ª–∏–≤–∞–µ–º –≤–µ—Å–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–ª–æ–µ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
            for (int i = 0; i < network.weights[outputLayerIndex].Length; i++)
            {
                for (int j = 0; j < network.weights[outputLayerIndex][i].Length; j++)
                {
                    // –£—Å–∏–ª–∏–≤–∞–µ–º –≤–µ—Å–∞, –º–Ω–æ–∂–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
                    network.weights[outputLayerIndex][i][j] *= UnityEngine.Random.Range(1.0f, 1.5f);
                }
            }
            
            Debug.Log("üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –≤–µ—Å–∞ –∏ —Å–º–µ—â–µ–Ω–∏—è —É—Å–∏–ª–µ–Ω—ã –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è —Å –Ω—É–ª—è!");
        }
        
        // –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫—Ä–æ—Å—Å–æ–≤–µ—Ä –¥–≤—É—Ö —Å–µ—Ç–µ–π
        public NeuralNetwork Crossover(NeuralNetwork parent1, NeuralNetwork parent2)
        {
            if (parent1 == null || parent2 == null)
                return null;
                
            return NeuralNetwork.Crossover(parent1, parent2);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ—Ç –º—É—Ç–∞—Ü–∏—é –∫ —Å–µ—Ç–∏
        public void Mutate(NeuralNetwork network, float mutationRate, float mutationStrength = 0.5f)
        {
            if (network == null)
                return;
                
            network.Mutate(mutationRate, mutationStrength);
        }
    }
} 